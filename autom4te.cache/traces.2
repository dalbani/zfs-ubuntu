m4trace:/usr/share/aclocal/ltargz.m4:12: -1- AC_DEFUN([LT_FUNC_ARGZ], [
AC_CHECK_HEADERS([argz.h], [], [], [AC_INCLUDES_DEFAULT])

AC_CHECK_TYPES([error_t],
  [],
  [AC_DEFINE([error_t], [int],
   [Define to a type to use for 'error_t' if it is not otherwise available.])
   AC_DEFINE([__error_t_defined], [1], [Define so that glibc/gnulib argp.h
    does not typedef error_t.])],
  [#if defined(HAVE_ARGZ_H)
#  include <argz.h>
#endif])

LT_ARGZ_H=
AC_CHECK_FUNCS([argz_add argz_append argz_count argz_create_sep argz_insert \
	argz_next argz_stringify], [], [LT_ARGZ_H=lt__argz.h; AC_LIBOBJ([lt__argz])])

dnl if have system argz functions, allow forced use of
dnl libltdl-supplied implementation (and default to do so
dnl on "known bad" systems). Could use a runtime check, but
dnl (a) detecting malloc issues is notoriously unreliable
dnl (b) only known system that declares argz functions,
dnl     provides them, yet they are broken, is cygwin
dnl     releases prior to 16-Mar-2007 (1.5.24 and earlier)
dnl So, it's more straightforward simply to special case
dnl this for known bad systems.
AS_IF([test -z "$LT_ARGZ_H"],
    [AC_CACHE_CHECK(
        [if argz actually works],
        [lt_cv_sys_argz_works],
        [[case $host_os in #(
	 *cygwin*)
	   lt_cv_sys_argz_works=no
	   if test no != "$cross_compiling"; then
	     lt_cv_sys_argz_works="guessing no"
	   else
	     lt_sed_extract_leading_digits='s/^\([0-9\.]*\).*/\1/'
	     save_IFS=$IFS
	     IFS=-.
	     set x `uname -r | sed -e "$lt_sed_extract_leading_digits"`
	     IFS=$save_IFS
	     lt_os_major=${2-0}
	     lt_os_minor=${3-0}
	     lt_os_micro=${4-0}
	     if test 1 -lt "$lt_os_major" \
		|| { test 1 -eq "$lt_os_major" \
		  && { test 5 -lt "$lt_os_minor" \
		    || { test 5 -eq "$lt_os_minor" \
		      && test 24 -lt "$lt_os_micro"; }; }; }; then
	       lt_cv_sys_argz_works=yes
	     fi
	   fi
	   ;; #(
	 *) lt_cv_sys_argz_works=yes ;;
	 esac]])
     AS_IF([test yes = "$lt_cv_sys_argz_works"],
        [AC_DEFINE([HAVE_WORKING_ARGZ], 1,
                   [This value is set to 1 to indicate that the system argz facility works])],
        [LT_ARGZ_H=lt__argz.h
        AC_LIBOBJ([lt__argz])])])

AC_SUBST([LT_ARGZ_H])
])
m4trace:/usr/share/aclocal/ltdl.m4:16: -1- AC_DEFUN([LT_CONFIG_LTDL_DIR], [AC_BEFORE([$0], [LTDL_INIT])
_$0($*)
])
m4trace:/usr/share/aclocal/ltdl.m4:68: -1- AC_DEFUN([LTDL_CONVENIENCE], [AC_BEFORE([$0], [LTDL_INIT])dnl
dnl Although the argument is deprecated and no longer documented,
dnl LTDL_CONVENIENCE used to take a DIRECTORY orgument, if we have one
dnl here make sure it is the same as any other declaration of libltdl's
dnl location!  This also ensures lt_ltdl_dir is set when configure.ac is
dnl not yet using an explicit LT_CONFIG_LTDL_DIR.
m4_ifval([$1], [_LT_CONFIG_LTDL_DIR([$1])])dnl
_$0()
])
m4trace:/usr/share/aclocal/ltdl.m4:81: -1- AU_DEFUN([AC_LIBLTDL_CONVENIENCE], [_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_CONVENIENCE])
m4trace:/usr/share/aclocal/ltdl.m4:81: -1- AC_DEFUN([AC_LIBLTDL_CONVENIENCE], [m4_warn([obsolete], [The macro `AC_LIBLTDL_CONVENIENCE' is obsolete.
You should run autoupdate.])dnl
_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_CONVENIENCE])
m4trace:/usr/share/aclocal/ltdl.m4:124: -1- AC_DEFUN([LTDL_INSTALLABLE], [AC_BEFORE([$0], [LTDL_INIT])dnl
dnl Although the argument is deprecated and no longer documented,
dnl LTDL_INSTALLABLE used to take a DIRECTORY orgument, if we have one
dnl here make sure it is the same as any other declaration of libltdl's
dnl location!  This also ensures lt_ltdl_dir is set when configure.ac is
dnl not yet using an explicit LT_CONFIG_LTDL_DIR.
m4_ifval([$1], [_LT_CONFIG_LTDL_DIR([$1])])dnl
_$0()
])
m4trace:/usr/share/aclocal/ltdl.m4:137: -1- AU_DEFUN([AC_LIBLTDL_INSTALLABLE], [_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_INSTALLABLE])
m4trace:/usr/share/aclocal/ltdl.m4:137: -1- AC_DEFUN([AC_LIBLTDL_INSTALLABLE], [m4_warn([obsolete], [The macro `AC_LIBLTDL_INSTALLABLE' is obsolete.
You should run autoupdate.])dnl
_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_INSTALLABLE])
m4trace:/usr/share/aclocal/ltdl.m4:213: -1- AC_DEFUN([_LT_LIBOBJ], [
  m4_pattern_allow([^_LT_LIBOBJS$])
  _LT_LIBOBJS="$_LT_LIBOBJS $1.$ac_objext"
])
m4trace:/usr/share/aclocal/ltdl.m4:226: -1- AC_DEFUN([LTDL_INIT], [dnl Parse OPTIONS
_LT_SET_OPTIONS([$0], [$1])

dnl We need to keep our own list of libobjs separate from our parent project,
dnl and the easiest way to do that is redefine the AC_LIBOBJs macro while
dnl we look for our own LIBOBJs.
m4_pushdef([AC_LIBOBJ], m4_defn([_LT_LIBOBJ]))
m4_pushdef([AC_LIBSOURCES])

dnl If not otherwise defined, default to the 1.5.x compatible subproject mode:
m4_if(_LTDL_MODE, [],
        [m4_define([_LTDL_MODE], m4_default([$2], [subproject]))
        m4_if([-1], [m4_bregexp(_LTDL_MODE, [\(subproject\|\(non\)?recursive\)])],
                [m4_fatal([unknown libltdl mode: ]_LTDL_MODE)])])

AC_ARG_WITH([included_ltdl],
    [AS_HELP_STRING([--with-included-ltdl],
                    [use the GNU ltdl sources included here])])

if test yes != "$with_included_ltdl"; then
  # We are not being forced to use the included libltdl sources, so
  # decide whether there is a useful installed version we can use.
  AC_CHECK_HEADER([ltdl.h],
      [AC_CHECK_DECL([lt_dlinterface_register],
	   [AC_CHECK_LIB([ltdl], [lt_dladvise_preload],
	       [with_included_ltdl=no],
	       [with_included_ltdl=yes])],
	   [with_included_ltdl=yes],
	   [AC_INCLUDES_DEFAULT
	    #include <ltdl.h>])],
      [with_included_ltdl=yes],
      [AC_INCLUDES_DEFAULT]
  )
fi

dnl If neither LT_CONFIG_LTDL_DIR, LTDL_CONVENIENCE nor LTDL_INSTALLABLE
dnl was called yet, then for old times' sake, we assume libltdl is in an
dnl eponymous directory:
AC_PROVIDE_IFELSE([LT_CONFIG_LTDL_DIR], [], [_LT_CONFIG_LTDL_DIR([libltdl])])

AC_ARG_WITH([ltdl_include],
    [AS_HELP_STRING([--with-ltdl-include=DIR],
                    [use the ltdl headers installed in DIR])])

if test -n "$with_ltdl_include"; then
  if test -f "$with_ltdl_include/ltdl.h"; then :
  else
    AC_MSG_ERROR([invalid ltdl include directory: '$with_ltdl_include'])
  fi
else
  with_ltdl_include=no
fi

AC_ARG_WITH([ltdl_lib],
    [AS_HELP_STRING([--with-ltdl-lib=DIR],
                    [use the libltdl.la installed in DIR])])

if test -n "$with_ltdl_lib"; then
  if test -f "$with_ltdl_lib/libltdl.la"; then :
  else
    AC_MSG_ERROR([invalid ltdl library directory: '$with_ltdl_lib'])
  fi
else
  with_ltdl_lib=no
fi

case ,$with_included_ltdl,$with_ltdl_include,$with_ltdl_lib, in
  ,yes,no,no,)
	m4_case(m4_default(_LTDL_TYPE, [convenience]),
	    [convenience], [_LTDL_CONVENIENCE],
	    [installable], [_LTDL_INSTALLABLE],
	  [m4_fatal([unknown libltdl build type: ]_LTDL_TYPE)])
	;;
  ,no,no,no,)
	# If the included ltdl is not to be used, then use the
	# preinstalled libltdl we found.
	AC_DEFINE([HAVE_LTDL], [1],
	  [Define this if a modern libltdl is already installed])
	LIBLTDL=-lltdl
	LTDLDEPS=
	LTDLINCL=
	;;
  ,no*,no,*)
	AC_MSG_ERROR(['--with-ltdl-include' and '--with-ltdl-lib' options must be used together])
	;;
  *)	with_included_ltdl=no
	LIBLTDL="-L$with_ltdl_lib -lltdl"
	LTDLDEPS=
	LTDLINCL=-I$with_ltdl_include
	;;
esac
INCLTDL=$LTDLINCL

# Report our decision...
AC_MSG_CHECKING([where to find libltdl headers])
AC_MSG_RESULT([$LTDLINCL])
AC_MSG_CHECKING([where to find libltdl library])
AC_MSG_RESULT([$LIBLTDL])

_LTDL_SETUP

dnl restore autoconf definition.
m4_popdef([AC_LIBOBJ])
m4_popdef([AC_LIBSOURCES])

AC_CONFIG_COMMANDS_PRE([
    _ltdl_libobjs=
    _ltdl_ltlibobjs=
    if test -n "$_LT_LIBOBJS"; then
      # Remove the extension.
      _lt_sed_drop_objext='s/\.o$//;s/\.obj$//'
      for i in `for i in $_LT_LIBOBJS; do echo "$i"; done | sed "$_lt_sed_drop_objext" | sort -u`; do
        _ltdl_libobjs="$_ltdl_libobjs $lt_libobj_prefix$i.$ac_objext"
        _ltdl_ltlibobjs="$_ltdl_ltlibobjs $lt_libobj_prefix$i.lo"
      done
    fi
    AC_SUBST([ltdl_LIBOBJS], [$_ltdl_libobjs])
    AC_SUBST([ltdl_LTLIBOBJS], [$_ltdl_ltlibobjs])
])

# Only expand once:
m4_define([LTDL_INIT])
])
m4trace:/usr/share/aclocal/ltdl.m4:352: -1- AU_DEFUN([AC_LIB_LTDL], [LTDL_INIT($@)])
m4trace:/usr/share/aclocal/ltdl.m4:352: -1- AC_DEFUN([AC_LIB_LTDL], [m4_warn([obsolete], [The macro `AC_LIB_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:/usr/share/aclocal/ltdl.m4:353: -1- AU_DEFUN([AC_WITH_LTDL], [LTDL_INIT($@)])
m4trace:/usr/share/aclocal/ltdl.m4:353: -1- AC_DEFUN([AC_WITH_LTDL], [m4_warn([obsolete], [The macro `AC_WITH_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:/usr/share/aclocal/ltdl.m4:354: -1- AU_DEFUN([LT_WITH_LTDL], [LTDL_INIT($@)])
m4trace:/usr/share/aclocal/ltdl.m4:354: -1- AC_DEFUN([LT_WITH_LTDL], [m4_warn([obsolete], [The macro `LT_WITH_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:/usr/share/aclocal/ltdl.m4:367: -1- AC_DEFUN([_LTDL_SETUP], [AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([LT_SYS_MODULE_EXT])dnl
AC_REQUIRE([LT_SYS_MODULE_PATH])dnl
AC_REQUIRE([LT_SYS_DLSEARCH_PATH])dnl
AC_REQUIRE([LT_LIB_DLLOAD])dnl
AC_REQUIRE([LT_SYS_SYMBOL_USCORE])dnl
AC_REQUIRE([LT_FUNC_DLSYM_USCORE])dnl
AC_REQUIRE([LT_SYS_DLOPEN_DEPLIBS])dnl
AC_REQUIRE([LT_FUNC_ARGZ])dnl

m4_require([_LT_CHECK_OBJDIR])dnl
m4_require([_LT_HEADER_DLFCN])dnl
m4_require([_LT_CHECK_DLPREOPEN])dnl
m4_require([_LT_DECL_SED])dnl

dnl Don't require this, or it will be expanded earlier than the code
dnl that sets the variables it relies on:
_LT_ENABLE_INSTALL

dnl _LTDL_MODE specific code must be called at least once:
_LTDL_MODE_DISPATCH

# In order that ltdl.c can compile, find out the first AC_CONFIG_HEADERS
# the user used.  This is so that ltdl.h can pick up the parent projects
# config.h file, The first file in AC_CONFIG_HEADERS must contain the
# definitions required by ltdl.c.
# FIXME: Remove use of undocumented AC_LIST_HEADERS (2.59 compatibility).
AC_CONFIG_COMMANDS_PRE([dnl
m4_pattern_allow([^LT_CONFIG_H$])dnl
m4_ifset([AH_HEADER],
    [LT_CONFIG_H=AH_HEADER],
    [m4_ifset([AC_LIST_HEADERS],
	    [LT_CONFIG_H=`echo "AC_LIST_HEADERS" | $SED 's|^[[      ]]*||;s|[[ :]].*$||'`],
	[])])])
AC_SUBST([LT_CONFIG_H])

AC_CHECK_HEADERS([unistd.h dl.h sys/dl.h dld.h mach-o/dyld.h dirent.h],
	[], [], [AC_INCLUDES_DEFAULT])

AC_CHECK_FUNCS([closedir opendir readdir], [], [AC_LIBOBJ([lt__dirent])])
AC_CHECK_FUNCS([strlcat strlcpy], [], [AC_LIBOBJ([lt__strl])])

m4_pattern_allow([LT_LIBEXT])dnl
AC_DEFINE_UNQUOTED([LT_LIBEXT],["$libext"],[The archive extension])

name=
eval "lt_libprefix=\"$libname_spec\""
m4_pattern_allow([LT_LIBPREFIX])dnl
AC_DEFINE_UNQUOTED([LT_LIBPREFIX],["$lt_libprefix"],[The archive prefix])

name=ltdl
eval "LTDLOPEN=\"$libname_spec\""
AC_SUBST([LTDLOPEN])
])
m4trace:/usr/share/aclocal/ltdl.m4:443: -1- AC_DEFUN([LT_SYS_DLOPEN_DEPLIBS], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
AC_CACHE_CHECK([whether deplibs are loaded by dlopen],
  [lt_cv_sys_dlopen_deplibs],
  [# PORTME does your system automatically load deplibs for dlopen?
  # or its logical equivalent (e.g. shl_load for HP-UX < 11)
  # For now, we just catch OSes we know something about -- in the
  # future, we'll try test this programmatically.
  lt_cv_sys_dlopen_deplibs=unknown
  case $host_os in
  aix3*|aix4.1.*|aix4.2.*)
    # Unknown whether this is true for these versions of AIX, but
    # we want this 'case' here to explicitly catch those versions.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  aix[[4-9]]*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  amigaos*)
    case $host_cpu in
    powerpc)
      lt_cv_sys_dlopen_deplibs=no
      ;;
    esac
    ;;
  bitrig*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  darwin*)
    # Assuming the user has installed a libdl from somewhere, this is true
    # If you are looking for one http://www.opendarwin.org/projects/dlcompat
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  freebsd* | dragonfly*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  gnu* | linux* | k*bsd*-gnu | kopensolaris*-gnu)
    # GNU and its variants, using gnu ld.so (Glibc)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  hpux10*|hpux11*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  interix*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  irix[[12345]]*|irix6.[[01]]*)
    # Catch all versions of IRIX before 6.2, and indicate that we don't
    # know how it worked for any of those versions.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  irix*)
    # The case above catches anything before 6.2, and it's known that
    # at 6.2 and later dlopen does load deplibs.
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  netbsd* | netbsdelf*-gnu)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  openbsd*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  osf[[1234]]*)
    # dlopen did load deplibs (at least at 4.x), but until the 5.x series,
    # it did *not* use an RPATH in a shared library to find objects the
    # library depends on, so we explicitly say 'no'.
    lt_cv_sys_dlopen_deplibs=no
    ;;
  osf5.0|osf5.0a|osf5.1)
    # dlopen *does* load deplibs and with the right loader patch applied
    # it even uses RPATH in a shared library to search for shared objects
    # that the library depends on, but there's no easy way to know if that
    # patch is installed.  Since this is the case, all we can really
    # say is unknown -- it depends on the patch being installed.  If
    # it is, this changes to 'yes'.  Without it, it would be 'no'.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  osf*)
    # the two cases above should catch all versions of osf <= 5.1.  Read
    # the comments above for what we know about them.
    # At > 5.1, deplibs are loaded *and* any RPATH in a shared library
    # is used to find them so we can finally say 'yes'.
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  qnx*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  solaris*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
    libltdl_cv_sys_dlopen_deplibs=yes
    ;;
  esac
  ])
if test yes != "$lt_cv_sys_dlopen_deplibs"; then
 AC_DEFINE([LTDL_DLOPEN_DEPLIBS], [1],
    [Define if the OS needs help to load dependent libraries for dlopen().])
fi
])
m4trace:/usr/share/aclocal/ltdl.m4:545: -1- AU_DEFUN([AC_LTDL_SYS_DLOPEN_DEPLIBS], [m4_if($#, 0, [LT_SYS_DLOPEN_DEPLIBS], [LT_SYS_DLOPEN_DEPLIBS($@)])], [], [])
m4trace:/usr/share/aclocal/ltdl.m4:545: -1- AC_DEFUN([AC_LTDL_SYS_DLOPEN_DEPLIBS], [m4_warn([obsolete], [The macro `AC_LTDL_SYS_DLOPEN_DEPLIBS' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLOPEN_DEPLIBS], [LT_SYS_DLOPEN_DEPLIBS($@)])])
m4trace:/usr/share/aclocal/ltdl.m4:552: -1- AC_DEFUN([LT_SYS_MODULE_EXT], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([what extension is used for runtime loadable modules],
  [libltdl_cv_shlibext],
[
module=yes
eval libltdl_cv_shlibext=$shrext_cmds
module=no
eval libltdl_cv_shrext=$shrext_cmds
  ])
if test -n "$libltdl_cv_shlibext"; then
  m4_pattern_allow([LT_MODULE_EXT])dnl
  AC_DEFINE_UNQUOTED([LT_MODULE_EXT], ["$libltdl_cv_shlibext"],
    [Define to the extension used for runtime loadable modules, say, ".so".])
fi
if test "$libltdl_cv_shrext" != "$libltdl_cv_shlibext"; then
  m4_pattern_allow([LT_SHARED_EXT])dnl
  AC_DEFINE_UNQUOTED([LT_SHARED_EXT], ["$libltdl_cv_shrext"],
    [Define to the shared library suffix, say, ".dylib".])
fi
if test -n "$shared_archive_member_spec"; then
  m4_pattern_allow([LT_SHARED_LIB_MEMBER])dnl
  AC_DEFINE_UNQUOTED([LT_SHARED_LIB_MEMBER], ["($shared_archive_member_spec.o)"],
    [Define to the shared archive member specification, say "(shr.o)".])
fi
])
m4trace:/usr/share/aclocal/ltdl.m4:580: -1- AU_DEFUN([AC_LTDL_SHLIBEXT], [m4_if($#, 0, [LT_SYS_MODULE_EXT], [LT_SYS_MODULE_EXT($@)])], [], [])
m4trace:/usr/share/aclocal/ltdl.m4:580: -1- AC_DEFUN([AC_LTDL_SHLIBEXT], [m4_warn([obsolete], [The macro `AC_LTDL_SHLIBEXT' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_MODULE_EXT], [LT_SYS_MODULE_EXT($@)])])
m4trace:/usr/share/aclocal/ltdl.m4:587: -1- AC_DEFUN([LT_SYS_MODULE_PATH], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([what variable specifies run-time module search path],
  [lt_cv_module_path_var], [lt_cv_module_path_var=$shlibpath_var])
if test -n "$lt_cv_module_path_var"; then
  m4_pattern_allow([LT_MODULE_PATH_VAR])dnl
  AC_DEFINE_UNQUOTED([LT_MODULE_PATH_VAR], ["$lt_cv_module_path_var"],
    [Define to the name of the environment variable that determines the run-time module search path.])
fi
])
m4trace:/usr/share/aclocal/ltdl.m4:599: -1- AU_DEFUN([AC_LTDL_SHLIBPATH], [m4_if($#, 0, [LT_SYS_MODULE_PATH], [LT_SYS_MODULE_PATH($@)])], [], [])
m4trace:/usr/share/aclocal/ltdl.m4:599: -1- AC_DEFUN([AC_LTDL_SHLIBPATH], [m4_warn([obsolete], [The macro `AC_LTDL_SHLIBPATH' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_MODULE_PATH], [LT_SYS_MODULE_PATH($@)])])
m4trace:/usr/share/aclocal/ltdl.m4:606: -1- AC_DEFUN([LT_SYS_DLSEARCH_PATH], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([for the default library search path],
  [lt_cv_sys_dlsearch_path],
  [lt_cv_sys_dlsearch_path=$sys_lib_dlsearch_path_spec])
if test -n "$lt_cv_sys_dlsearch_path"; then
  sys_dlsearch_path=
  for dir in $lt_cv_sys_dlsearch_path; do
    if test -z "$sys_dlsearch_path"; then
      sys_dlsearch_path=$dir
    else
      sys_dlsearch_path=$sys_dlsearch_path$PATH_SEPARATOR$dir
    fi
  done
  m4_pattern_allow([LT_DLSEARCH_PATH])dnl
  AC_DEFINE_UNQUOTED([LT_DLSEARCH_PATH], ["$sys_dlsearch_path"],
    [Define to the system default library search path.])
fi
])
m4trace:/usr/share/aclocal/ltdl.m4:627: -1- AU_DEFUN([AC_LTDL_SYSSEARCHPATH], [m4_if($#, 0, [LT_SYS_DLSEARCH_PATH], [LT_SYS_DLSEARCH_PATH($@)])], [], [])
m4trace:/usr/share/aclocal/ltdl.m4:627: -1- AC_DEFUN([AC_LTDL_SYSSEARCHPATH], [m4_warn([obsolete], [The macro `AC_LTDL_SYSSEARCHPATH' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLSEARCH_PATH], [LT_SYS_DLSEARCH_PATH($@)])])
m4trace:/usr/share/aclocal/ltdl.m4:653: -1- AC_DEFUN([LT_LIB_DLLOAD], [m4_pattern_allow([^LT_DLLOADERS$])
LT_DLLOADERS=
AC_SUBST([LT_DLLOADERS])

AC_LANG_PUSH([C])
lt_dlload_save_LIBS=$LIBS

LIBADD_DLOPEN=
AC_SEARCH_LIBS([dlopen], [dl],
	[AC_DEFINE([HAVE_LIBDL], [1],
		   [Define if you have the libdl library or equivalent.])
	if test "$ac_cv_search_dlopen" != "none required"; then
	  LIBADD_DLOPEN=-ldl
	fi
	libltdl_cv_lib_dl_dlopen=yes
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"],
    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#if HAVE_DLFCN_H
#  include <dlfcn.h>
#endif
    ]], [[dlopen(0, 0);]])],
	    [AC_DEFINE([HAVE_LIBDL], [1],
		       [Define if you have the libdl library or equivalent.])
	    libltdl_cv_func_dlopen=yes
	    LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"],
	[AC_CHECK_LIB([svld], [dlopen],
		[AC_DEFINE([HAVE_LIBDL], [1],
			 [Define if you have the libdl library or equivalent.])
	        LIBADD_DLOPEN=-lsvld libltdl_cv_func_dlopen=yes
		LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"])])])
if test yes = "$libltdl_cv_func_dlopen" || test yes = "$libltdl_cv_lib_dl_dlopen"
then
  lt_save_LIBS=$LIBS
  LIBS="$LIBS $LIBADD_DLOPEN"
  AC_CHECK_FUNCS([dlerror])
  LIBS=$lt_save_LIBS
fi
AC_SUBST([LIBADD_DLOPEN])

LIBADD_SHL_LOAD=
AC_CHECK_FUNC([shl_load],
	[AC_DEFINE([HAVE_SHL_LOAD], [1],
		   [Define if you have the shl_load function.])
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}shl_load.la"],
    [AC_CHECK_LIB([dld], [shl_load],
	    [AC_DEFINE([HAVE_SHL_LOAD], [1],
		       [Define if you have the shl_load function.])
	    LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}shl_load.la"
	    LIBADD_SHL_LOAD=-ldld])])
AC_SUBST([LIBADD_SHL_LOAD])

case $host_os in
darwin[[1567]].*)
# We only want this for pre-Mac OS X 10.4.
  AC_CHECK_FUNC([_dyld_func_lookup],
	[AC_DEFINE([HAVE_DYLD], [1],
		   [Define if you have the _dyld_func_lookup function.])
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dyld.la"])
  ;;
beos*)
  LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}load_add_on.la"
  ;;
cygwin* | mingw* | pw32*)
  AC_CHECK_DECLS([cygwin_conv_path], [], [], [[#include <sys/cygwin.h>]])
  LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}loadlibrary.la"
  ;;
esac

AC_CHECK_LIB([dld], [dld_link],
	[AC_DEFINE([HAVE_DLD], [1],
		   [Define if you have the GNU dld library.])
		LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dld_link.la"])
AC_SUBST([LIBADD_DLD_LINK])

m4_pattern_allow([^LT_DLPREOPEN$])
LT_DLPREOPEN=
if test -n "$LT_DLLOADERS"
then
  for lt_loader in $LT_DLLOADERS; do
    LT_DLPREOPEN="$LT_DLPREOPEN-dlpreopen $lt_loader "
  done
  AC_DEFINE([HAVE_LIBDLLOADER], [1],
            [Define if libdlloader will be built on this platform])
fi
AC_SUBST([LT_DLPREOPEN])

dnl This isn't used anymore, but set it for backwards compatibility
LIBADD_DL="$LIBADD_DLOPEN $LIBADD_SHL_LOAD"
AC_SUBST([LIBADD_DL])

LIBS=$lt_dlload_save_LIBS
AC_LANG_POP
])
m4trace:/usr/share/aclocal/ltdl.m4:748: -1- AU_DEFUN([AC_LTDL_DLLIB], [m4_if($#, 0, [LT_LIB_DLLOAD], [LT_LIB_DLLOAD($@)])], [], [])
m4trace:/usr/share/aclocal/ltdl.m4:748: -1- AC_DEFUN([AC_LTDL_DLLIB], [m4_warn([obsolete], [The macro `AC_LTDL_DLLIB' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_LIB_DLLOAD], [LT_LIB_DLLOAD($@)])])
m4trace:/usr/share/aclocal/ltdl.m4:756: -1- AC_DEFUN([LT_SYS_SYMBOL_USCORE], [m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl
AC_CACHE_CHECK([for _ prefix in compiled symbols],
  [lt_cv_sys_symbol_underscore],
  [lt_cv_sys_symbol_underscore=no
  cat > conftest.$ac_ext <<_LT_EOF
void nm_test_func(){}
int main(){nm_test_func;return 0;}
_LT_EOF
  if AC_TRY_EVAL(ac_compile); then
    # Now try to grab the symbols.
    ac_nlist=conftest.nm
    if AC_TRY_EVAL(NM conftest.$ac_objext \| $lt_cv_sys_global_symbol_pipe \> $ac_nlist) && test -s "$ac_nlist"; then
      # See whether the symbols have a leading underscore.
      if grep '^. _nm_test_func' "$ac_nlist" >/dev/null; then
        lt_cv_sys_symbol_underscore=yes
      else
        if grep '^. nm_test_func ' "$ac_nlist" >/dev/null; then
	  :
        else
	  echo "configure: cannot find nm_test_func in $ac_nlist" >&AS_MESSAGE_LOG_FD
        fi
      fi
    else
      echo "configure: cannot run $lt_cv_sys_global_symbol_pipe" >&AS_MESSAGE_LOG_FD
    fi
  else
    echo "configure: failed program was:" >&AS_MESSAGE_LOG_FD
    cat conftest.c >&AS_MESSAGE_LOG_FD
  fi
  rm -rf conftest*
  ])
  sys_symbol_underscore=$lt_cv_sys_symbol_underscore
  AC_SUBST([sys_symbol_underscore])
])
m4trace:/usr/share/aclocal/ltdl.m4:793: -1- AU_DEFUN([AC_LTDL_SYMBOL_USCORE], [m4_if($#, 0, [LT_SYS_SYMBOL_USCORE], [LT_SYS_SYMBOL_USCORE($@)])], [], [])
m4trace:/usr/share/aclocal/ltdl.m4:793: -1- AC_DEFUN([AC_LTDL_SYMBOL_USCORE], [m4_warn([obsolete], [The macro `AC_LTDL_SYMBOL_USCORE' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_SYMBOL_USCORE], [LT_SYS_SYMBOL_USCORE($@)])])
m4trace:/usr/share/aclocal/ltdl.m4:800: -1- AC_DEFUN([LT_FUNC_DLSYM_USCORE], [AC_REQUIRE([_LT_COMPILER_PIC])dnl	for lt_prog_compiler_wl
AC_REQUIRE([LT_SYS_SYMBOL_USCORE])dnl	for lt_cv_sys_symbol_underscore
AC_REQUIRE([LT_SYS_MODULE_EXT])dnl	for libltdl_cv_shlibext
if test yes = "$lt_cv_sys_symbol_underscore"; then
  if test yes = "$libltdl_cv_func_dlopen" || test yes = "$libltdl_cv_lib_dl_dlopen"; then
    AC_CACHE_CHECK([whether we have to add an underscore for dlsym],
      [libltdl_cv_need_uscore],
      [libltdl_cv_need_uscore=unknown
      dlsym_uscore_save_LIBS=$LIBS
      LIBS="$LIBS $LIBADD_DLOPEN"
      libname=conftmod # stay within 8.3 filename limits!
      cat >$libname.$ac_ext <<_LT_EOF
[#line $LINENO "configure"
#include "confdefs.h"
/* When -fvisibility=hidden is used, assume the code has been annotated
   correspondingly for the symbols needed.  */
#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))
int fnord () __attribute__((visibility("default")));
#endif
int fnord () { return 42; }]
_LT_EOF

      # ltfn_module_cmds module_cmds
      # Execute tilde-delimited MODULE_CMDS with environment primed for
      # $module_cmds or $archive_cmds type content.
      ltfn_module_cmds ()
      {( # subshell avoids polluting parent global environment
          module_cmds_save_ifs=$IFS; IFS='~'
          for cmd in @S|@1; do
            IFS=$module_cmds_save_ifs
            libobjs=$libname.$ac_objext; lib=$libname$libltdl_cv_shlibext
            rpath=/not-exists; soname=$libname$libltdl_cv_shlibext; output_objdir=.
            major=; versuffix=; verstring=; deplibs=
            ECHO=echo; wl=$lt_prog_compiler_wl; allow_undefined_flag=
            eval $cmd
          done
          IFS=$module_cmds_save_ifs
      )}

      # Compile a loadable module using libtool macro expansion results.
      $CC $pic_flag -c $libname.$ac_ext
      ltfn_module_cmds "${module_cmds:-$archive_cmds}"

      # Try to fetch fnord with dlsym().
      libltdl_dlunknown=0; libltdl_dlnouscore=1; libltdl_dluscore=2
      cat >conftest.$ac_ext <<_LT_EOF
[#line $LINENO "configure"
#include "confdefs.h"
#if HAVE_DLFCN_H
#include <dlfcn.h>
#endif
#include <stdio.h>
#ifndef RTLD_GLOBAL
#  ifdef DL_GLOBAL
#    define RTLD_GLOBAL DL_GLOBAL
#  else
#    define RTLD_GLOBAL 0
#  endif
#endif
#ifndef RTLD_NOW
#  ifdef DL_NOW
#    define RTLD_NOW DL_NOW
#  else
#    define RTLD_NOW 0
#  endif
#endif
int main () {
  void *handle = dlopen ("`pwd`/$libname$libltdl_cv_shlibext", RTLD_GLOBAL|RTLD_NOW);
  int status = $libltdl_dlunknown;
  if (handle) {
    if (dlsym (handle, "fnord"))
      status = $libltdl_dlnouscore;
    else {
      if (dlsym (handle, "_fnord"))
        status = $libltdl_dluscore;
      else
	puts (dlerror ());
    }
    dlclose (handle);
  } else
    puts (dlerror ());
  return status;
}]
_LT_EOF
      if AC_TRY_EVAL(ac_link) && test -s "conftest$ac_exeext" 2>/dev/null; then
        (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null
        libltdl_status=$?
        case x$libltdl_status in
          x$libltdl_dlnouscore) libltdl_cv_need_uscore=no ;;
	  x$libltdl_dluscore) libltdl_cv_need_uscore=yes ;;
	  x*) libltdl_cv_need_uscore=unknown ;;
        esac
      fi
      rm -rf conftest* $libname*
      LIBS=$dlsym_uscore_save_LIBS
    ])
  fi
fi

if test yes = "$libltdl_cv_need_uscore"; then
  AC_DEFINE([NEED_USCORE], [1],
    [Define if dlsym() requires a leading underscore in symbol names.])
fi
])
m4trace:/usr/share/aclocal/ltdl.m4:907: -1- AU_DEFUN([AC_LTDL_DLSYM_USCORE], [m4_if($#, 0, [LT_FUNC_DLSYM_USCORE], [LT_FUNC_DLSYM_USCORE($@)])], [], [])
m4trace:/usr/share/aclocal/ltdl.m4:907: -1- AC_DEFUN([AC_LTDL_DLSYM_USCORE], [m4_warn([obsolete], [The macro `AC_LTDL_DLSYM_USCORE' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_FUNC_DLSYM_USCORE], [LT_FUNC_DLSYM_USCORE($@)])])
m4trace:/usr/share/aclocal-1.16/amversion.m4:14: -1- AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version='1.16'
dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to
dnl require some minimum version.  Point them to the right macro.
m4_if([$1], [1.16.5], [],
      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl
])
m4trace:/usr/share/aclocal-1.16/amversion.m4:33: -1- AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION], [AM_AUTOMAKE_VERSION([1.16.5])dnl
m4_ifndef([AC_AUTOCONF_VERSION],
  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])
m4trace:/usr/share/aclocal-1.16/as.m4:11: -1- AC_DEFUN([AM_PROG_AS], [# By default we simply use the C compiler to build assembly code.
AC_REQUIRE([AC_PROG_CC])
test "${CCAS+set}" = set || CCAS=$CC
test "${CCASFLAGS+set}" = set || CCASFLAGS=$CFLAGS
AC_ARG_VAR([CCAS],      [assembler compiler command (defaults to CC)])
AC_ARG_VAR([CCASFLAGS], [assembler compiler flags (defaults to CFLAGS)])
_AM_IF_OPTION([no-dependencies],, [_AM_DEPENDENCIES([CCAS])])dnl
])
m4trace:/usr/share/aclocal-1.16/auxdir.m4:47: -1- AC_DEFUN([AM_AUX_DIR_EXPAND], [AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl
# Expand $ac_aux_dir to an absolute path.
am_aux_dir=`cd "$ac_aux_dir" && pwd`
])
m4trace:/usr/share/aclocal-1.16/cond-if.m4:23: -1- AC_DEFUN([AM_COND_IF], [m4_ifndef([_AM_COND_VALUE_$1],
	   [m4_fatal([$0: no such condition "$1"])])dnl
_AM_COND_IF([$1])dnl
if test -z "$$1_TRUE"; then :
  m4_n([$2])[]dnl
m4_ifval([$3],
[_AM_COND_ELSE([$1])dnl
else
  $3
])dnl
_AM_COND_ENDIF([$1])dnl
fi[]dnl
])
m4trace:/usr/share/aclocal-1.16/cond.m4:12: -1- AC_DEFUN([AM_CONDITIONAL], [AC_PREREQ([2.52])dnl
 m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],
       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl
AC_SUBST([$1_TRUE])dnl
AC_SUBST([$1_FALSE])dnl
_AM_SUBST_NOTMAKE([$1_TRUE])dnl
_AM_SUBST_NOTMAKE([$1_FALSE])dnl
m4_define([_AM_COND_VALUE_$1], [$2])dnl
if $2; then
  $1_TRUE=
  $1_FALSE='#'
else
  $1_TRUE='#'
  $1_FALSE=
fi
AC_CONFIG_COMMANDS_PRE(
[if test -z "${$1_TRUE}" && test -z "${$1_FALSE}"; then
  AC_MSG_ERROR([[conditional "$1" was never defined.
Usually this means the macro was only invoked conditionally.]])
fi])])
m4trace:/usr/share/aclocal-1.16/depend.m4:26: -1- AC_DEFUN([_AM_DEPENDENCIES], [AC_REQUIRE([AM_SET_DEPDIR])dnl
AC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl
AC_REQUIRE([AM_MAKE_INCLUDE])dnl
AC_REQUIRE([AM_DEP_TRACK])dnl

m4_if([$1], [CC],   [depcc="$CC"   am_compiler_list=],
      [$1], [CXX],  [depcc="$CXX"  am_compiler_list=],
      [$1], [OBJC], [depcc="$OBJC" am_compiler_list='gcc3 gcc'],
      [$1], [OBJCXX], [depcc="$OBJCXX" am_compiler_list='gcc3 gcc'],
      [$1], [UPC],  [depcc="$UPC"  am_compiler_list=],
      [$1], [GCJ],  [depcc="$GCJ"  am_compiler_list='gcc3 gcc'],
                    [depcc="$$1"   am_compiler_list=])

AC_CACHE_CHECK([dependency style of $depcc],
               [am_cv_$1_dependencies_compiler_type],
[if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
  # We make a subdir and do the tests there.  Otherwise we can end up
  # making bogus files that we don't know about and never remove.  For
  # instance it was reported that on HP-UX the gcc test will end up
  # making a dummy file named 'D' -- because '-MD' means "put the output
  # in D".
  rm -rf conftest.dir
  mkdir conftest.dir
  # Copy depcomp to subdir because otherwise we won't find it if we're
  # using a relative directory.
  cp "$am_depcomp" conftest.dir
  cd conftest.dir
  # We will build objects and dependencies in a subdirectory because
  # it helps to detect inapplicable dependency modes.  For instance
  # both Tru64's cc and ICC support -MD to output dependencies as a
  # side effect of compilation, but ICC will put the dependencies in
  # the current directory while Tru64 will put them in the object
  # directory.
  mkdir sub

  am_cv_$1_dependencies_compiler_type=none
  if test "$am_compiler_list" = ""; then
     am_compiler_list=`sed -n ['s/^#*\([a-zA-Z0-9]*\))$/\1/p'] < ./depcomp`
  fi
  am__universal=false
  m4_case([$1], [CC],
    [case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac],
    [CXX],
    [case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac])

  for depmode in $am_compiler_list; do
    # Setup a source with many dependencies, because some compilers
    # like to wrap large dependency lists on column 80 (with \), and
    # we should not choose a depcomp mode which is confused by this.
    #
    # We need to recreate these files for each test, as the compiler may
    # overwrite some of them when testing with obscure command lines.
    # This happens at least with the AIX C compiler.
    : > sub/conftest.c
    for i in 1 2 3 4 5 6; do
      echo '#include "conftst'$i'.h"' >> sub/conftest.c
      # Using ": > sub/conftst$i.h" creates only sub/conftst1.h with
      # Solaris 10 /bin/sh.
      echo '/* dummy */' > sub/conftst$i.h
    done
    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf

    # We check with '-c' and '-o' for the sake of the "dashmstdout"
    # mode.  It turns out that the SunPro C++ compiler does not properly
    # handle '-M -o', and we need to detect this.  Also, some Intel
    # versions had trouble with output in subdirs.
    am__obj=sub/conftest.${OBJEXT-o}
    am__minus_obj="-o $am__obj"
    case $depmode in
    gcc)
      # This depmode causes a compiler race in universal mode.
      test "$am__universal" = false || continue
      ;;
    nosideeffect)
      # After this tag, mechanisms are not by side-effect, so they'll
      # only be used when explicitly requested.
      if test "x$enable_dependency_tracking" = xyes; then
	continue
      else
	break
      fi
      ;;
    msvc7 | msvc7msys | msvisualcpp | msvcmsys)
      # This compiler won't grok '-c -o', but also, the minuso test has
      # not run yet.  These depmodes are late enough in the game, and
      # so weak that their functioning should not be impacted.
      am__obj=conftest.${OBJEXT-o}
      am__minus_obj=
      ;;
    none) break ;;
    esac
    if depmode=$depmode \
       source=sub/conftest.c object=$am__obj \
       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
         >/dev/null 2>conftest.err &&
       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
      # icc doesn't choke on unknown options, it will just issue warnings
      # or remarks (even with -Werror).  So we grep stderr for any message
      # that says an option was ignored or not supported.
      # When given -MP, icc 7.0 and 7.1 complain thusly:
      #   icc: Command line warning: ignoring option '-M'; no argument required
      # The diagnosis changed in icc 8.0:
      #   icc: Command line remark: option '-MP' not supported
      if (grep 'ignoring option' conftest.err ||
          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
        am_cv_$1_dependencies_compiler_type=$depmode
        break
      fi
    fi
  done

  cd ..
  rm -rf conftest.dir
else
  am_cv_$1_dependencies_compiler_type=none
fi
])
AC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])
AM_CONDITIONAL([am__fastdep$1], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_$1_dependencies_compiler_type" = gcc3])
])
m4trace:/usr/share/aclocal-1.16/depend.m4:163: -1- AC_DEFUN([AM_SET_DEPDIR], [AC_REQUIRE([AM_SET_LEADING_DOT])dnl
AC_SUBST([DEPDIR], ["${am__leading_dot}deps"])dnl
])
m4trace:/usr/share/aclocal-1.16/depend.m4:171: -1- AC_DEFUN([AM_DEP_TRACK], [AC_ARG_ENABLE([dependency-tracking], [dnl
AS_HELP_STRING(
  [--enable-dependency-tracking],
  [do not reject slow dependency extractors])
AS_HELP_STRING(
  [--disable-dependency-tracking],
  [speeds up one-time build])])
if test "x$enable_dependency_tracking" != xno; then
  am_depcomp="$ac_aux_dir/depcomp"
  AMDEPBACKSLASH='\'
  am__nodep='_no'
fi
AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
AC_SUBST([AMDEPBACKSLASH])dnl
_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl
AC_SUBST([am__nodep])dnl
_AM_SUBST_NOTMAKE([am__nodep])dnl
])
m4trace:/usr/share/aclocal-1.16/depout.m4:11: -1- AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS], [{
  # Older Autoconf quotes --file arguments for eval, but not when files
  # are listed without --file.  Let's play safe and only enable the eval
  # if we detect the quoting.
  # TODO: see whether this extra hack can be removed once we start
  # requiring Autoconf 2.70 or later.
  AS_CASE([$CONFIG_FILES],
          [*\'*], [eval set x "$CONFIG_FILES"],
          [*], [set x $CONFIG_FILES])
  shift
  # Used to flag and report bootstrapping failures.
  am_rc=0
  for am_mf
  do
    # Strip MF so we end up with the name of the file.
    am_mf=`AS_ECHO(["$am_mf"]) | sed -e 's/:.*$//'`
    # Check whether this is an Automake generated Makefile which includes
    # dependency-tracking related rules and includes.
    # Grep'ing the whole file directly is not great: AIX grep has a line
    # limit of 2048, but all sed's we know have understand at least 4000.
    sed -n 's,^am--depfiles:.*,X,p' "$am_mf" | grep X >/dev/null 2>&1 \
      || continue
    am_dirpart=`AS_DIRNAME(["$am_mf"])`
    am_filepart=`AS_BASENAME(["$am_mf"])`
    AM_RUN_LOG([cd "$am_dirpart" \
      && sed -e '/# am--include-marker/d' "$am_filepart" \
        | $MAKE -f - am--depfiles]) || am_rc=$?
  done
  if test $am_rc -ne 0; then
    AC_MSG_FAILURE([Something went wrong bootstrapping makefile fragments
    for automatic dependency tracking.  If GNU make was not used, consider
    re-running the configure script with MAKE="gmake" (or whatever is
    necessary).  You can also try re-running configure with the
    '--disable-dependency-tracking' option to at least be able to build
    the package (albeit without support for automatic dependency tracking).])
  fi
  AS_UNSET([am_dirpart])
  AS_UNSET([am_filepart])
  AS_UNSET([am_mf])
  AS_UNSET([am_rc])
  rm -f conftest-deps.mk
}
])
m4trace:/usr/share/aclocal-1.16/depout.m4:64: -1- AC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS], [AC_CONFIG_COMMANDS([depfiles],
     [test x"$AMDEP_TRUE" != x"" || _AM_OUTPUT_DEPENDENCY_COMMANDS],
     [AMDEP_TRUE="$AMDEP_TRUE" MAKE="${MAKE-make}"])])
m4trace:/usr/share/aclocal-1.16/init.m4:29: -1- AC_DEFUN([AM_INIT_AUTOMAKE], [AC_PREREQ([2.65])dnl
m4_ifdef([_$0_ALREADY_INIT],
  [m4_fatal([$0 expanded multiple times
]m4_defn([_$0_ALREADY_INIT]))],
  [m4_define([_$0_ALREADY_INIT], m4_expansion_stack)])dnl
dnl Autoconf wants to disallow AM_ names.  We explicitly allow
dnl the ones we care about.
m4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl
AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl
AC_REQUIRE([AC_PROG_INSTALL])dnl
if test "`cd $srcdir && pwd`" != "`pwd`"; then
  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output
  # is not polluted with repeated "-I."
  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl
  # test to see if srcdir already configured
  if test -f $srcdir/config.status; then
    AC_MSG_ERROR([source directory already configured; run "make distclean" there first])
  fi
fi

# test whether we have cygpath
if test -z "$CYGPATH_W"; then
  if (cygpath --version) >/dev/null 2>/dev/null; then
    CYGPATH_W='cygpath -w'
  else
    CYGPATH_W=echo
  fi
fi
AC_SUBST([CYGPATH_W])

# Define the identity of the package.
dnl Distinguish between old-style and new-style calls.
m4_ifval([$2],
[AC_DIAGNOSE([obsolete],
             [$0: two- and three-arguments forms are deprecated.])
m4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl
 AC_SUBST([PACKAGE], [$1])dnl
 AC_SUBST([VERSION], [$2])],
[_AM_SET_OPTIONS([$1])dnl
dnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.
m4_if(
  m4_ifset([AC_PACKAGE_NAME], [ok]):m4_ifset([AC_PACKAGE_VERSION], [ok]),
  [ok:ok],,
  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl
 AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl
 AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl

_AM_IF_OPTION([no-define],,
[AC_DEFINE_UNQUOTED([PACKAGE], ["$PACKAGE"], [Name of package])
 AC_DEFINE_UNQUOTED([VERSION], ["$VERSION"], [Version number of package])])dnl

# Some tools Automake needs.
AC_REQUIRE([AM_SANITY_CHECK])dnl
AC_REQUIRE([AC_ARG_PROGRAM])dnl
AM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])
AM_MISSING_PROG([AUTOCONF], [autoconf])
AM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])
AM_MISSING_PROG([AUTOHEADER], [autoheader])
AM_MISSING_PROG([MAKEINFO], [makeinfo])
AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
AC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl
AC_REQUIRE([AC_PROG_MKDIR_P])dnl
# For better backward compatibility.  To be removed once Automake 1.9.x
# dies out for good.  For more background, see:
# <https://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>
# <https://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>
AC_SUBST([mkdir_p], ['$(MKDIR_P)'])
# We need awk for the "check" target (and possibly the TAP driver).  The
# system "awk" is bad on some platforms.
AC_REQUIRE([AC_PROG_AWK])dnl
AC_REQUIRE([AC_PROG_MAKE_SET])dnl
AC_REQUIRE([AM_SET_LEADING_DOT])dnl
_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],
	      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
			     [_AM_PROG_TAR([v7])])])
_AM_IF_OPTION([no-dependencies],,
[AC_PROVIDE_IFELSE([AC_PROG_CC],
		  [_AM_DEPENDENCIES([CC])],
		  [m4_define([AC_PROG_CC],
			     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_CXX],
		  [_AM_DEPENDENCIES([CXX])],
		  [m4_define([AC_PROG_CXX],
			     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJC],
		  [_AM_DEPENDENCIES([OBJC])],
		  [m4_define([AC_PROG_OBJC],
			     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],
		  [_AM_DEPENDENCIES([OBJCXX])],
		  [m4_define([AC_PROG_OBJCXX],
			     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl
])
# Variables for tags utilities; see am/tags.am
if test -z "$CTAGS"; then
  CTAGS=ctags
fi
AC_SUBST([CTAGS])
if test -z "$ETAGS"; then
  ETAGS=etags
fi
AC_SUBST([ETAGS])
if test -z "$CSCOPE"; then
  CSCOPE=cscope
fi
AC_SUBST([CSCOPE])

AC_REQUIRE([AM_SILENT_RULES])dnl
dnl The testsuite driver may need to know about EXEEXT, so add the
dnl 'am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This
dnl macro is hooked onto _AC_COMPILER_EXEEXT early, see below.
AC_CONFIG_COMMANDS_PRE(dnl
[m4_provide_if([_AM_COMPILER_EXEEXT],
  [AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])])])dnl

# POSIX will say in a future version that running "rm -f" with no argument
# is OK; and we want to be able to make that assumption in our Makefile
# recipes.  So use an aggressive probe to check that the usage we want is
# actually supported "in the wild" to an acceptable degree.
# See automake bug#10828.
# To make any issue more visible, cause the running configure to be aborted
# by default if the 'rm' program in use doesn't match our expectations; the
# user can still override this though.
if rm -f && rm -fr && rm -rf; then : OK; else
  cat >&2 <<'END'
Oops!

Your 'rm' program seems unable to run without file operands specified
on the command line, even when the '-f' option is present.  This is contrary
to the behaviour of most rm programs out there, and not conforming with
the upcoming POSIX standard: <http://austingroupbugs.net/view.php?id=542>

Please tell bug-automake@gnu.org about your system, including the value
of your $PATH and any error possibly output before this message.  This
can help us improve future automake versions.

END
  if test x"$ACCEPT_INFERIOR_RM_PROGRAM" = x"yes"; then
    echo 'Configuration will proceed anyway, since you have set the' >&2
    echo 'ACCEPT_INFERIOR_RM_PROGRAM variable to "yes"' >&2
    echo >&2
  else
    cat >&2 <<'END'
Aborting the configuration process, to ensure you take notice of the issue.

You can download and install GNU coreutils to get an 'rm' implementation
that behaves properly: <https://www.gnu.org/software/coreutils/>.

If you want to complete the configuration process using your problematic
'rm' anyway, export the environment variable ACCEPT_INFERIOR_RM_PROGRAM
to "yes", and re-run configure.

END
    AC_MSG_ERROR([Your 'rm' program is bad, sorry.])
  fi
fi
dnl The trailing newline in this macro's definition is deliberate, for
dnl backward compatibility and to allow trailing 'dnl'-style comments
dnl after the AM_INIT_AUTOMAKE invocation. See automake bug#16841.
])
m4trace:/usr/share/aclocal-1.16/init.m4:204: -1- AC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK], [# Compute $1's index in $config_headers.
_am_arg=$1
_am_stamp_count=1
for _am_header in $config_headers :; do
  case $_am_header in
    $_am_arg | $_am_arg:* )
      break ;;
    * )
      _am_stamp_count=`expr $_am_stamp_count + 1` ;;
  esac
done
echo "timestamp for $_am_arg" >`AS_DIRNAME(["$_am_arg"])`/stamp-h[]$_am_stamp_count])
m4trace:/usr/share/aclocal-1.16/install-sh.m4:11: -1- AC_DEFUN([AM_PROG_INSTALL_SH], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
if test x"${install_sh+set}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    install_sh="\${SHELL} '$am_aux_dir/install-sh'" ;;
  *)
    install_sh="\${SHELL} $am_aux_dir/install-sh"
  esac
fi
AC_SUBST([install_sh])])
m4trace:/usr/share/aclocal-1.16/lead-dot.m4:10: -1- AC_DEFUN([AM_SET_LEADING_DOT], [rm -rf .tst 2>/dev/null
mkdir .tst 2>/dev/null
if test -d .tst; then
  am__leading_dot=.
else
  am__leading_dot=_
fi
rmdir .tst 2>/dev/null
AC_SUBST([am__leading_dot])])
m4trace:/usr/share/aclocal-1.16/maintainer.m4:16: -1- AC_DEFUN([AM_MAINTAINER_MODE], [m4_case(m4_default([$1], [disable]),
       [enable], [m4_define([am_maintainer_other], [disable])],
       [disable], [m4_define([am_maintainer_other], [enable])],
       [m4_define([am_maintainer_other], [enable])
        m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])
AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])
  dnl maintainer-mode's default is 'disable' unless 'enable' is passed
  AC_ARG_ENABLE([maintainer-mode],
    [AS_HELP_STRING([--]am_maintainer_other[-maintainer-mode],
      am_maintainer_other[ make rules and dependencies not useful
      (and sometimes confusing) to the casual installer])],
    [USE_MAINTAINER_MODE=$enableval],
    [USE_MAINTAINER_MODE=]m4_if(am_maintainer_other, [enable], [no], [yes]))
  AC_MSG_RESULT([$USE_MAINTAINER_MODE])
  AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])
  MAINT=$MAINTAINER_MODE_TRUE
  AC_SUBST([MAINT])dnl

])
m4trace:/usr/share/aclocal-1.16/make.m4:13: -1- AC_DEFUN([AM_MAKE_INCLUDE], [AC_MSG_CHECKING([whether ${MAKE-make} supports the include directive])
cat > confinc.mk << 'END'
am__doit:
	@echo this is the am__doit target >confinc.out
.PHONY: am__doit
END
am__include="#"
am__quote=
# BSD make does it like this.
echo '.include "confinc.mk" # ignored' > confmf.BSD
# Other make implementations (GNU, Solaris 10, AIX) do it like this.
echo 'include confinc.mk # ignored' > confmf.GNU
_am_result=no
for s in GNU BSD; do
  AM_RUN_LOG([${MAKE-make} -f confmf.$s && cat confinc.out])
  AS_CASE([$?:`cat confinc.out 2>/dev/null`],
      ['0:this is the am__doit target'],
      [AS_CASE([$s],
          [BSD], [am__include='.include' am__quote='"'],
          [am__include='include' am__quote=''])])
  if test "$am__include" != "#"; then
    _am_result="yes ($s style)"
    break
  fi
done
rm -f confinc.* confmf.*
AC_MSG_RESULT([${_am_result}])
AC_SUBST([am__include])])
m4trace:/usr/share/aclocal-1.16/make.m4:42: -1- m4_pattern_allow([^am__quote$])
m4trace:/usr/share/aclocal-1.16/missing.m4:11: -1- AC_DEFUN([AM_MISSING_PROG], [AC_REQUIRE([AM_MISSING_HAS_RUN])
$1=${$1-"${am_missing_run}$2"}
AC_SUBST($1)])
m4trace:/usr/share/aclocal-1.16/missing.m4:20: -1- AC_DEFUN([AM_MISSING_HAS_RUN], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
AC_REQUIRE_AUX_FILE([missing])dnl
if test x"${MISSING+set}" != xset; then
  MISSING="\${SHELL} '$am_aux_dir/missing'"
fi
# Use eval to expand $SHELL
if eval "$MISSING --is-lightweight"; then
  am_missing_run="$MISSING "
else
  am_missing_run=
  AC_MSG_WARN(['missing' script is too old or missing])
fi
])
m4trace:/usr/share/aclocal-1.16/options.m4:11: -1- AC_DEFUN([_AM_MANGLE_OPTION], [[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])
m4trace:/usr/share/aclocal-1.16/options.m4:17: -1- AC_DEFUN([_AM_SET_OPTION], [m4_define(_AM_MANGLE_OPTION([$1]), [1])])
m4trace:/usr/share/aclocal-1.16/options.m4:23: -1- AC_DEFUN([_AM_SET_OPTIONS], [m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])
m4trace:/usr/share/aclocal-1.16/options.m4:29: -1- AC_DEFUN([_AM_IF_OPTION], [m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])
m4trace:/usr/share/aclocal-1.16/prog-cc-c-o.m4:12: -1- AC_DEFUN([_AM_PROG_CC_C_O], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
AC_REQUIRE_AUX_FILE([compile])dnl
AC_LANG_PUSH([C])dnl
AC_CACHE_CHECK(
  [whether $CC understands -c and -o together],
  [am_cv_prog_cc_c_o],
  [AC_LANG_CONFTEST([AC_LANG_PROGRAM([])])
  # Make sure it works both with $CC and with simple cc.
  # Following AC_PROG_CC_C_O, we do the test twice because some
  # compilers refuse to overwrite an existing .o file with -o,
  # though they will create one.
  am_cv_prog_cc_c_o=yes
  for am_i in 1 2; do
    if AM_RUN_LOG([$CC -c conftest.$ac_ext -o conftest2.$ac_objext]) \
         && test -f conftest2.$ac_objext; then
      : OK
    else
      am_cv_prog_cc_c_o=no
      break
    fi
  done
  rm -f core conftest*
  unset am_i])
if test "$am_cv_prog_cc_c_o" != yes; then
   # Losing compiler, so override with the script.
   # FIXME: It is wrong to rewrite CC.
   # But if we don't then we get into trouble of one sort or another.
   # A longer-term fix would be to have automake use am__CC in this case,
   # and then we could set am__CC="\$(top_srcdir)/compile \$(CC)"
   CC="$am_aux_dir/compile $CC"
fi
AC_LANG_POP([C])])
m4trace:/usr/share/aclocal-1.16/prog-cc-c-o.m4:47: -1- AC_DEFUN_ONCE([AM_PROG_CC_C_O], [AC_REQUIRE([AC_PROG_CC])])
m4trace:/usr/share/aclocal-1.16/python.m4:35: -1- AC_DEFUN([AM_PATH_PYTHON], [
  dnl Find a Python interpreter.  Python versions prior to 2.0 are not
  dnl supported. (2.0 was released on October 16, 2000).
  m4_define_default([_AM_PYTHON_INTERPRETER_LIST],
[python python2 python3 dnl
 python3.11 python3.10 dnl
 python3.9 python3.8 python3.7 python3.6 python3.5 python3.4 python3.3 dnl
 python3.2 python3.1 python3.0 dnl
 python2.7 python2.6 python2.5 python2.4 python2.3 python2.2 python2.1 dnl
 python2.0])

  AC_ARG_VAR([PYTHON], [the Python interpreter])

  m4_if([$1],[],[
    dnl No version check is needed.
    # Find any Python interpreter.
    if test -z "$PYTHON"; then
      AC_PATH_PROGS([PYTHON], _AM_PYTHON_INTERPRETER_LIST, :)
    fi
    am_display_PYTHON=python
  ], [
    dnl A version check is needed.
    if test -n "$PYTHON"; then
      # If the user set $PYTHON, use it and don't search something else.
      AC_MSG_CHECKING([whether $PYTHON version is >= $1])
      AM_PYTHON_CHECK_VERSION([$PYTHON], [$1],
			      [AC_MSG_RESULT([yes])],
			      [AC_MSG_RESULT([no])
			       AC_MSG_ERROR([Python interpreter is too old])])
      am_display_PYTHON=$PYTHON
    else
      # Otherwise, try each interpreter until we find one that satisfies
      # VERSION.
      AC_CACHE_CHECK([for a Python interpreter with version >= $1],
	[am_cv_pathless_PYTHON],[
	for am_cv_pathless_PYTHON in _AM_PYTHON_INTERPRETER_LIST none; do
	  test "$am_cv_pathless_PYTHON" = none && break
	  AM_PYTHON_CHECK_VERSION([$am_cv_pathless_PYTHON], [$1], [break])
	done])
      # Set $PYTHON to the absolute path of $am_cv_pathless_PYTHON.
      if test "$am_cv_pathless_PYTHON" = none; then
	PYTHON=:
      else
        AC_PATH_PROG([PYTHON], [$am_cv_pathless_PYTHON])
      fi
      am_display_PYTHON=$am_cv_pathless_PYTHON
    fi
  ])

  if test "$PYTHON" = :; then
    dnl Run any user-specified action, or abort.
    m4_default([$3], [AC_MSG_ERROR([no suitable Python interpreter found])])
  else

  dnl Query Python for its version number.  Although site.py simply uses
  dnl sys.version[:3], printing that failed with Python 3.10, since the
  dnl trailing zero was eliminated. So now we output just the major
  dnl and minor version numbers, as numbers. Apparently the tertiary
  dnl version is not of interest.
  dnl
  AC_CACHE_CHECK([for $am_display_PYTHON version], [am_cv_python_version],
    [am_cv_python_version=`$PYTHON -c "import sys; print ('%u.%u' % sys.version_info[[:2]])"`])
  AC_SUBST([PYTHON_VERSION], [$am_cv_python_version])

  dnl At times, e.g., when building shared libraries, you may want
  dnl to know which OS platform Python thinks this is.
  dnl
  AC_CACHE_CHECK([for $am_display_PYTHON platform], [am_cv_python_platform],
    [am_cv_python_platform=`$PYTHON -c "import sys; sys.stdout.write(sys.platform)"`])
  AC_SUBST([PYTHON_PLATFORM], [$am_cv_python_platform])

  dnl emacs-page
  dnl If --with-python-sys-prefix is given, use the values of sys.prefix
  dnl and sys.exec_prefix for the corresponding values of PYTHON_PREFIX
  dnl and PYTHON_EXEC_PREFIX. Otherwise, use the GNU ${prefix} and
  dnl ${exec_prefix} variables.
  dnl
  dnl The two are made distinct variables so they can be overridden if
  dnl need be, although general consensus is that you shouldn't need
  dnl this separation.
  dnl
  dnl Also allow directly setting the prefixes via configure options,
  dnl overriding any default.
  dnl
  if test "x$prefix" = xNONE; then
    am__usable_prefix=$ac_default_prefix
  else
    am__usable_prefix=$prefix
  fi

  # Allow user to request using sys.* values from Python,
  # instead of the GNU $prefix values.
  AC_ARG_WITH([python-sys-prefix],
  [AS_HELP_STRING([--with-python-sys-prefix],
                  [use Python's sys.prefix and sys.exec_prefix values])],
  [am_use_python_sys=:],
  [am_use_python_sys=false])

  # Allow user to override whatever the default Python prefix is.
  AC_ARG_WITH([python_prefix],
  [AS_HELP_STRING([--with-python_prefix],
                  [override the default PYTHON_PREFIX])],
  [am_python_prefix_subst=$withval
   am_cv_python_prefix=$withval
   AC_MSG_CHECKING([for explicit $am_display_PYTHON prefix])
   AC_MSG_RESULT([$am_cv_python_prefix])],
  [
   if $am_use_python_sys; then
     # using python sys.prefix value, not GNU
     AC_CACHE_CHECK([for python default $am_display_PYTHON prefix],
     [am_cv_python_prefix],
     [am_cv_python_prefix=`$PYTHON -c "import sys; sys.stdout.write(sys.prefix)"`])

     dnl If sys.prefix is a subdir of $prefix, replace the literal value of
     dnl $prefix with a variable reference so it can be overridden.
     case $am_cv_python_prefix in
     $am__usable_prefix*)
       am__strip_prefix=`echo "$am__usable_prefix" | sed 's|.|.|g'`
       am_python_prefix_subst=`echo "$am_cv_python_prefix" | sed "s,^$am__strip_prefix,\\${prefix},"`
       ;;
     *)
       am_python_prefix_subst=$am_cv_python_prefix
       ;;
     esac
   else # using GNU prefix value, not python sys.prefix
     am_python_prefix_subst='${prefix}'
     am_python_prefix=$am_python_prefix_subst
     AC_MSG_CHECKING([for GNU default $am_display_PYTHON prefix])
     AC_MSG_RESULT([$am_python_prefix])
   fi])
  # Substituting python_prefix_subst value.
  AC_SUBST([PYTHON_PREFIX], [$am_python_prefix_subst])

  # emacs-page Now do it all over again for Python exec_prefix, but with yet
  # another conditional: fall back to regular prefix if that was specified.
  AC_ARG_WITH([python_exec_prefix],
  [AS_HELP_STRING([--with-python_exec_prefix],
                  [override the default PYTHON_EXEC_PREFIX])],
  [am_python_exec_prefix_subst=$withval
   am_cv_python_exec_prefix=$withval
   AC_MSG_CHECKING([for explicit $am_display_PYTHON exec_prefix])
   AC_MSG_RESULT([$am_cv_python_exec_prefix])],
  [
   # no explicit --with-python_exec_prefix, but if
   # --with-python_prefix was given, use its value for python_exec_prefix too.
   AS_IF([test -n "$with_python_prefix"],
   [am_python_exec_prefix_subst=$with_python_prefix
    am_cv_python_exec_prefix=$with_python_prefix
    AC_MSG_CHECKING([for python_prefix-given $am_display_PYTHON exec_prefix])
    AC_MSG_RESULT([$am_cv_python_exec_prefix])],
   [
    # Set am__usable_exec_prefix whether using GNU or Python values,
    # since we use that variable for pyexecdir.
    if test "x$exec_prefix" = xNONE; then
      am__usable_exec_prefix=$am__usable_prefix
    else
      am__usable_exec_prefix=$exec_prefix
    fi
    #
    if $am_use_python_sys; then # using python sys.exec_prefix, not GNU
      AC_CACHE_CHECK([for python default $am_display_PYTHON exec_prefix],
      [am_cv_python_exec_prefix],
      [am_cv_python_exec_prefix=`$PYTHON -c "import sys; sys.stdout.write(sys.exec_prefix)"`])
      dnl If sys.exec_prefix is a subdir of $exec_prefix, replace the
      dnl literal value of $exec_prefix with a variable reference so it can
      dnl be overridden.
      case $am_cv_python_exec_prefix in
      $am__usable_exec_prefix*)
        am__strip_prefix=`echo "$am__usable_exec_prefix" | sed 's|.|.|g'`
        am_python_exec_prefix_subst=`echo "$am_cv_python_exec_prefix" | sed "s,^$am__strip_prefix,\\${exec_prefix},"`
        ;;
      *)
        am_python_exec_prefix_subst=$am_cv_python_exec_prefix
        ;;
     esac
   else # using GNU $exec_prefix, not python sys.exec_prefix
     am_python_exec_prefix_subst='${exec_prefix}'
     am_python_exec_prefix=$am_python_exec_prefix_subst
     AC_MSG_CHECKING([for GNU default $am_display_PYTHON exec_prefix])
     AC_MSG_RESULT([$am_python_exec_prefix])
   fi])])
  # Substituting python_exec_prefix_subst.
  AC_SUBST([PYTHON_EXEC_PREFIX], [$am_python_exec_prefix_subst])

  # Factor out some code duplication into this shell variable.
  am_python_setup_sysconfig="\
import sys
# Prefer sysconfig over distutils.sysconfig, for better compatibility
# with python 3.x.  See automake bug#10227.
try:
    import sysconfig
except ImportError:
    can_use_sysconfig = 0
else:
    can_use_sysconfig = 1
# Can't use sysconfig in CPython 2.7, since it's broken in virtualenvs:
# <https://github.com/pypa/virtualenv/issues/118>
try:
    from platform import python_implementation
    if python_implementation() == 'CPython' and sys.version[[:3]] == '2.7':
        can_use_sysconfig = 0
except ImportError:
    pass"

  dnl emacs-page Set up 4 directories:

  dnl 1. pythondir: where to install python scripts.  This is the
  dnl    site-packages directory, not the python standard library
  dnl    directory like in previous automake betas.  This behavior
  dnl    is more consistent with lispdir.m4 for example.
  dnl Query distutils for this directory.
  dnl
  AC_CACHE_CHECK([for $am_display_PYTHON script directory (pythondir)],
  [am_cv_python_pythondir],
  [if test "x$am_cv_python_prefix" = x; then
     am_py_prefix=$am__usable_prefix
   else
     am_py_prefix=$am_cv_python_prefix
   fi
   am_cv_python_pythondir=`$PYTHON -c "
$am_python_setup_sysconfig
if can_use_sysconfig:
  if hasattr(sysconfig, 'get_default_scheme'):
    scheme = sysconfig.get_default_scheme()
  else:
    scheme = sysconfig._get_default_scheme()
  if scheme == 'posix_local':
    # Debian's default scheme installs to /usr/local/ but we want to find headers in /usr/
    scheme = 'posix_prefix'
  sitedir = sysconfig.get_path('purelib', scheme, vars={'base':'$am_py_prefix'})
else:
  from distutils import sysconfig
  sitedir = sysconfig.get_python_lib(0, 0, prefix='$am_py_prefix')
sys.stdout.write(sitedir)"`
   #
   case $am_cv_python_pythondir in
   $am_py_prefix*)
     am__strip_prefix=`echo "$am_py_prefix" | sed 's|.|.|g'`
     am_cv_python_pythondir=`echo "$am_cv_python_pythondir" | sed "s,^$am__strip_prefix,\\${PYTHON_PREFIX},"`
     ;;
   *)
     case $am_py_prefix in
       /usr|/System*) ;;
       *) am_cv_python_pythondir="\${PYTHON_PREFIX}/lib/python$PYTHON_VERSION/site-packages"
          ;;
     esac
     ;;
   esac
  ])
  AC_SUBST([pythondir], [$am_cv_python_pythondir])

  dnl 2. pkgpythondir: $PACKAGE directory under pythondir.  Was
  dnl    PYTHON_SITE_PACKAGE in previous betas, but this naming is
  dnl    more consistent with the rest of automake.
  dnl
  AC_SUBST([pkgpythondir], [\${pythondir}/$PACKAGE])

  dnl 3. pyexecdir: directory for installing python extension modules
  dnl    (shared libraries).
  dnl Query distutils for this directory.
  dnl
  AC_CACHE_CHECK([for $am_display_PYTHON extension module directory (pyexecdir)],
  [am_cv_python_pyexecdir],
  [if test "x$am_cv_python_exec_prefix" = x; then
     am_py_exec_prefix=$am__usable_exec_prefix
   else
     am_py_exec_prefix=$am_cv_python_exec_prefix
   fi
   am_cv_python_pyexecdir=`$PYTHON -c "
$am_python_setup_sysconfig
if can_use_sysconfig:
  if hasattr(sysconfig, 'get_default_scheme'):
    scheme = sysconfig.get_default_scheme()
  else:
    scheme = sysconfig._get_default_scheme()
  if scheme == 'posix_local':
    # Debian's default scheme installs to /usr/local/ but we want to find headers in /usr/
    scheme = 'posix_prefix'
  sitedir = sysconfig.get_path('platlib', scheme, vars={'platbase':'$am_py_exec_prefix'})
else:
  from distutils import sysconfig
  sitedir = sysconfig.get_python_lib(1, 0, prefix='$am_py_exec_prefix')
sys.stdout.write(sitedir)"`
   #
   case $am_cv_python_pyexecdir in
   $am_py_exec_prefix*)
     am__strip_prefix=`echo "$am_py_exec_prefix" | sed 's|.|.|g'`
     am_cv_python_pyexecdir=`echo "$am_cv_python_pyexecdir" | sed "s,^$am__strip_prefix,\\${PYTHON_EXEC_PREFIX},"`
     ;;
   *)
     case $am_py_exec_prefix in
       /usr|/System*) ;;
       *) am_cv_python_pyexecdir="\${PYTHON_EXEC_PREFIX}/lib/python$PYTHON_VERSION/site-packages"
          ;;
     esac
     ;;
   esac
  ])
  AC_SUBST([pyexecdir], [$am_cv_python_pyexecdir])

  dnl 4. pkgpyexecdir: $(pyexecdir)/$(PACKAGE)
  dnl
  AC_SUBST([pkgpyexecdir], [\${pyexecdir}/$PACKAGE])

  dnl Run any user-specified action.
  $2
  fi
])
m4trace:/usr/share/aclocal-1.16/python.m4:353: -1- AC_DEFUN([AM_PYTHON_CHECK_VERSION], [prog="import sys
# split strings by '.' and convert to numeric.  Append some zeros
# because we need at least 4 digits for the hex conversion.
# map returns an iterator in Python 3.0 and a list in 2.x
minver = list(map(int, '$2'.split('.'))) + [[0, 0, 0]]
minverhex = 0
# xrange is not present in Python 3.0 and range returns an iterator
for i in list(range(0, 4)): minverhex = (minverhex << 8) + minver[[i]]
sys.exit(sys.hexversion < minverhex)"
  AS_IF([AM_RUN_LOG([$1 -c "$prog"])], [$3], [$4])])
m4trace:/usr/share/aclocal-1.16/runlog.m4:12: -1- AC_DEFUN([AM_RUN_LOG], [{ echo "$as_me:$LINENO: $1" >&AS_MESSAGE_LOG_FD
   ($1) >&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
   (exit $ac_status); }])
m4trace:/usr/share/aclocal-1.16/sanity.m4:11: -1- AC_DEFUN([AM_SANITY_CHECK], [AC_MSG_CHECKING([whether build environment is sane])
# Reject unsafe characters in $srcdir or the absolute working directory
# name.  Accept space and tab only in the latter.
am_lf='
'
case `pwd` in
  *[[\\\"\#\$\&\'\`$am_lf]]*)
    AC_MSG_ERROR([unsafe absolute working directory name]);;
esac
case $srcdir in
  *[[\\\"\#\$\&\'\`$am_lf\ \	]]*)
    AC_MSG_ERROR([unsafe srcdir value: '$srcdir']);;
esac

# Do 'set' in a subshell so we don't clobber the current shell's
# arguments.  Must try -L first in case configure is actually a
# symlink; some systems play weird games with the mod time of symlinks
# (eg FreeBSD returns the mod time of the symlink's containing
# directory).
if (
   am_has_slept=no
   for am_try in 1 2; do
     echo "timestamp, slept: $am_has_slept" > conftest.file
     set X `ls -Lt "$srcdir/configure" conftest.file 2> /dev/null`
     if test "$[*]" = "X"; then
	# -L didn't work.
	set X `ls -t "$srcdir/configure" conftest.file`
     fi
     if test "$[*]" != "X $srcdir/configure conftest.file" \
	&& test "$[*]" != "X conftest.file $srcdir/configure"; then

	# If neither matched, then we have a broken ls.  This can happen
	# if, for instance, CONFIG_SHELL is bash and it inherits a
	# broken ls alias from the environment.  This has actually
	# happened.  Such a system could not be considered "sane".
	AC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken
  alias in your environment])
     fi
     if test "$[2]" = conftest.file || test $am_try -eq 2; then
       break
     fi
     # Just in case.
     sleep 1
     am_has_slept=yes
   done
   test "$[2]" = conftest.file
   )
then
   # Ok.
   :
else
   AC_MSG_ERROR([newly created file is older than distributed files!
Check your system clock])
fi
AC_MSG_RESULT([yes])
# If we didn't sleep, we still need to ensure time stamps of config.status and
# generated files are strictly newer.
am_sleep_pid=
if grep 'slept: no' conftest.file >/dev/null 2>&1; then
  ( sleep 1 ) &
  am_sleep_pid=$!
fi
AC_CONFIG_COMMANDS_PRE(
  [AC_MSG_CHECKING([that generated files are newer than configure])
   if test -n "$am_sleep_pid"; then
     # Hide warnings about reused PIDs.
     wait $am_sleep_pid 2>/dev/null
   fi
   AC_MSG_RESULT([done])])
rm -f conftest.file
])
m4trace:/usr/share/aclocal-1.16/silent.m4:12: -1- AC_DEFUN([AM_SILENT_RULES], [AC_ARG_ENABLE([silent-rules], [dnl
AS_HELP_STRING(
  [--enable-silent-rules],
  [less verbose build output (undo: "make V=1")])
AS_HELP_STRING(
  [--disable-silent-rules],
  [verbose build output (undo: "make V=0")])dnl
])
case $enable_silent_rules in @%:@ (((
  yes) AM_DEFAULT_VERBOSITY=0;;
   no) AM_DEFAULT_VERBOSITY=1;;
    *) AM_DEFAULT_VERBOSITY=m4_if([$1], [yes], [0], [1]);;
esac
dnl
dnl A few 'make' implementations (e.g., NonStop OS and NextStep)
dnl do not support nested variable expansions.
dnl See automake bug#9928 and bug#10237.
am_make=${MAKE-make}
AC_CACHE_CHECK([whether $am_make supports nested variables],
   [am_cv_make_support_nested_variables],
   [if AS_ECHO([['TRUE=$(BAR$(V))
BAR0=false
BAR1=true
V=1
am__doit:
	@$(TRUE)
.PHONY: am__doit']]) | $am_make -f - >/dev/null 2>&1; then
  am_cv_make_support_nested_variables=yes
else
  am_cv_make_support_nested_variables=no
fi])
if test $am_cv_make_support_nested_variables = yes; then
  dnl Using '$V' instead of '$(V)' breaks IRIX make.
  AM_V='$(V)'
  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
else
  AM_V=$AM_DEFAULT_VERBOSITY
  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY
fi
AC_SUBST([AM_V])dnl
AM_SUBST_NOTMAKE([AM_V])dnl
AC_SUBST([AM_DEFAULT_V])dnl
AM_SUBST_NOTMAKE([AM_DEFAULT_V])dnl
AC_SUBST([AM_DEFAULT_VERBOSITY])dnl
AM_BACKSLASH='\'
AC_SUBST([AM_BACKSLASH])dnl
_AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl
])
m4trace:/usr/share/aclocal-1.16/strip.m4:17: -1- AC_DEFUN([AM_PROG_INSTALL_STRIP], [AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
# Installed binaries are usually stripped using 'strip' when the user
# run "make install-strip".  However 'strip' might not be the right
# tool to use in cross-compilation environments, therefore Automake
# will honor the 'STRIP' environment variable to overrule this program.
dnl Don't test for $cross_compiling = yes, because it might be 'maybe'.
if test "$cross_compiling" != no; then
  AC_CHECK_TOOL([STRIP], [strip], :)
fi
INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
AC_SUBST([INSTALL_STRIP_PROGRAM])])
m4trace:/usr/share/aclocal-1.16/substnot.m4:12: -1- AC_DEFUN([_AM_SUBST_NOTMAKE])
m4trace:/usr/share/aclocal-1.16/substnot.m4:17: -1- AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])
m4trace:/usr/share/aclocal-1.16/tar.m4:23: -1- AC_DEFUN([_AM_PROG_TAR], [# Always define AMTAR for backward compatibility.  Yes, it's still used
# in the wild :-(  We should find a proper way to deprecate it ...
AC_SUBST([AMTAR], ['$${TAR-tar}'])

# We'll loop over all known methods to create a tar archive until one works.
_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'

m4_if([$1], [v7],
  [am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -'],

  [m4_case([$1],
    [ustar],
     [# The POSIX 1988 'ustar' format is defined with fixed-size fields.
      # There is notably a 21 bits limit for the UID and the GID.  In fact,
      # the 'pax' utility can hang on bigger UID/GID (see automake bug#8343
      # and bug#13588).
      am_max_uid=2097151 # 2^21 - 1
      am_max_gid=$am_max_uid
      # The $UID and $GID variables are not portable, so we need to resort
      # to the POSIX-mandated id(1) utility.  Errors in the 'id' calls
      # below are definitely unexpected, so allow the users to see them
      # (that is, avoid stderr redirection).
      am_uid=`id -u || echo unknown`
      am_gid=`id -g || echo unknown`
      AC_MSG_CHECKING([whether UID '$am_uid' is supported by ustar format])
      if test $am_uid -le $am_max_uid; then
         AC_MSG_RESULT([yes])
      else
         AC_MSG_RESULT([no])
         _am_tools=none
      fi
      AC_MSG_CHECKING([whether GID '$am_gid' is supported by ustar format])
      if test $am_gid -le $am_max_gid; then
         AC_MSG_RESULT([yes])
      else
        AC_MSG_RESULT([no])
        _am_tools=none
      fi],

  [pax],
    [],

  [m4_fatal([Unknown tar format])])

  AC_MSG_CHECKING([how to create a $1 tar archive])

  # Go ahead even if we have the value already cached.  We do so because we
  # need to set the values for the 'am__tar' and 'am__untar' variables.
  _am_tools=${am_cv_prog_tar_$1-$_am_tools}

  for _am_tool in $_am_tools; do
    case $_am_tool in
    gnutar)
      for _am_tar in tar gnutar gtar; do
        AM_RUN_LOG([$_am_tar --version]) && break
      done
      am__tar="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$$tardir"'
      am__tar_="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$tardir"'
      am__untar="$_am_tar -xf -"
      ;;
    plaintar)
      # Must skip GNU tar: if it does not support --format= it doesn't create
      # ustar tarball either.
      (tar --version) >/dev/null 2>&1 && continue
      am__tar='tar chf - "$$tardir"'
      am__tar_='tar chf - "$tardir"'
      am__untar='tar xf -'
      ;;
    pax)
      am__tar='pax -L -x $1 -w "$$tardir"'
      am__tar_='pax -L -x $1 -w "$tardir"'
      am__untar='pax -r'
      ;;
    cpio)
      am__tar='find "$$tardir" -print | cpio -o -H $1 -L'
      am__tar_='find "$tardir" -print | cpio -o -H $1 -L'
      am__untar='cpio -i -H $1 -d'
      ;;
    none)
      am__tar=false
      am__tar_=false
      am__untar=false
      ;;
    esac

    # If the value was cached, stop now.  We just wanted to have am__tar
    # and am__untar set.
    test -n "${am_cv_prog_tar_$1}" && break

    # tar/untar a dummy directory, and stop if the command works.
    rm -rf conftest.dir
    mkdir conftest.dir
    echo GrepMe > conftest.dir/file
    AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
    rm -rf conftest.dir
    if test -s conftest.tar; then
      AM_RUN_LOG([$am__untar <conftest.tar])
      AM_RUN_LOG([cat conftest.dir/file])
      grep GrepMe conftest.dir/file >/dev/null 2>&1 && break
    fi
  done
  rm -rf conftest.dir

  AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
  AC_MSG_RESULT([$am_cv_prog_tar_$1])])

AC_SUBST([am__tar])
AC_SUBST([am__untar])
])
m4trace:config/always-arch.m4:11: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_ARCH], [
	case $target_cpu in
	i?86)
		TARGET_CPU=i386
		;;
	amd64|x86_64)
		TARGET_CPU=x86_64
		;;
	powerpc*)
		TARGET_CPU=powerpc
		;;
	aarch64*)
		TARGET_CPU=aarch64
		;;
	armv*)
		TARGET_CPU=arm
		;;
	sparc64)
		TARGET_CPU=sparc64
		;;
	*)
		TARGET_CPU=$target_cpu
		;;
	esac

	AM_CONDITIONAL([TARGET_CPU_AARCH64], test $TARGET_CPU = aarch64)
	AM_CONDITIONAL([TARGET_CPU_X86_64],  test $TARGET_CPU = x86_64)
	AM_CONDITIONAL([TARGET_CPU_POWERPC], test $TARGET_CPU = powerpc)
	AM_CONDITIONAL([TARGET_CPU_SPARC64], test $TARGET_CPU = sparc64)
	AM_CONDITIONAL([TARGET_CPU_ARM],     test $TARGET_CPU = arm)
])
m4trace:config/always-compiler-options.m4:10: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_ASAN], [
	AC_MSG_CHECKING([whether to build with -fsanitize=address support])
	AC_ARG_ENABLE([asan],
		[AS_HELP_STRING([--enable-asan],
		[Enable -fsanitize=address support  @<:@default=no@:>@])],
		[],
		[enable_asan=no])

	AM_CONDITIONAL([ASAN_ENABLED], [test x$enable_asan = xyes])
	AC_SUBST([ASAN_ENABLED], [$enable_asan])
	AC_MSG_RESULT($enable_asan)

	AS_IF([ test "$enable_asan" = "yes" ], [
		AC_MSG_CHECKING([whether $CC supports -fsanitize=address])
		saved_cflags="$CFLAGS"
		CFLAGS="$CFLAGS -Werror -fsanitize=address"
		AC_LINK_IFELSE([
			AC_LANG_SOURCE([[ int main() { return 0; } ]])
		], [
			ASAN_CFLAGS="-fsanitize=address"
			ASAN_LDFLAGS="-fsanitize=address"
			ASAN_ZFS="_with_asan"
			AC_MSG_RESULT([yes])
		], [
			AC_MSG_ERROR([$CC does not support -fsanitize=address])
		])
		CFLAGS="$saved_cflags"
	], [
		ASAN_CFLAGS=""
		ASAN_LDFLAGS=""
		ASAN_ZFS="_without_asan"
	])

	AC_SUBST([ASAN_CFLAGS])
	AC_SUBST([ASAN_LDFLAGS])
	AC_SUBST([ASAN_ZFS])
])
m4trace:config/always-compiler-options.m4:57: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_UBSAN], [
	AC_MSG_CHECKING([whether to build with -fsanitize=undefined support])
	AC_ARG_ENABLE([ubsan],
		[AS_HELP_STRING([--enable-ubsan],
		[Enable -fsanitize=undefined support  @<:@default=no@:>@])],
		[],
		[enable_ubsan=no])

	AM_CONDITIONAL([UBSAN_ENABLED], [test x$enable_ubsan = xyes])
	AC_SUBST([UBSAN_ENABLED], [$enable_ubsan])
	AC_MSG_RESULT($enable_ubsan)

	AS_IF([ test "$enable_ubsan" = "yes" ], [
		AC_MSG_CHECKING([whether $CC supports -fsanitize=undefined])
		saved_cflags="$CFLAGS"
		CFLAGS="$CFLAGS -Werror -fsanitize=undefined"
		AC_LINK_IFELSE([
			AC_LANG_SOURCE([[ int main() { return 0; } ]])
		], [
			UBSAN_CFLAGS="-fsanitize=undefined"
			UBSAN_LDFLAGS="-fsanitize=undefined"
			UBSAN_ZFS="_with_ubsan"
			AC_MSG_RESULT([yes])
		], [
			AC_MSG_ERROR([$CC does not support -fsanitize=undefined])
		])
		CFLAGS="$saved_cflags"
	], [
		UBSAN_CFLAGS=""
		UBSAN_LDFLAGS=""
		UBSAN_ZFS="_without_ubsan"
	])

	AC_SUBST([UBSAN_CFLAGS])
	AC_SUBST([UBSAN_LDFLAGS])
	AC_SUBST([UBSAN_ZFS])
])
m4trace:config/always-compiler-options.m4:98: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_FRAME_LARGER_THAN], [
	AC_MSG_CHECKING([whether $CC supports -Wframe-larger-than=<size>])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -Wframe-larger-than=4096"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		FRAME_LARGER_THAN="-Wframe-larger-than=4096"
		AC_MSG_RESULT([yes])
	], [
		FRAME_LARGER_THAN=""
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([FRAME_LARGER_THAN])
])
m4trace:config/always-compiler-options.m4:119: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_NO_FORMAT_TRUNCATION], [
	AC_MSG_CHECKING([whether $CC supports -Wno-format-truncation])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -Wno-format-truncation"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		NO_FORMAT_TRUNCATION=-Wno-format-truncation
		AC_MSG_RESULT([yes])
	], [
		NO_FORMAT_TRUNCATION=
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([NO_FORMAT_TRUNCATION])
])
m4trace:config/always-compiler-options.m4:140: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_NO_FORMAT_ZERO_LENGTH], [
	AC_MSG_CHECKING([whether $CC supports -Wno-format-zero-length])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -Wno-format-zero-length"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		NO_FORMAT_ZERO_LENGTH=-Wno-format-zero-length
		AC_MSG_RESULT([yes])
	], [
		NO_FORMAT_ZERO_LENGTH=
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([NO_FORMAT_ZERO_LENGTH])
])
m4trace:config/always-compiler-options.m4:166: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_NO_CLOBBERED], [
	AC_MSG_CHECKING([whether $CC supports -Wno-clobbered])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -Wclobbered"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		NO_CLOBBERED=-Wno-clobbered
		AC_MSG_RESULT([yes])
	], [
		NO_CLOBBERED=
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([NO_CLOBBERED])
])
m4trace:config/always-compiler-options.m4:187: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_IMPLICIT_FALLTHROUGH], [
	AC_MSG_CHECKING([whether $CC supports -Wimplicit-fallthrough])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -Wimplicit-fallthrough"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		IMPLICIT_FALLTHROUGH=-Wimplicit-fallthrough
		AC_DEFINE([HAVE_IMPLICIT_FALLTHROUGH], 1,
			[Define if compiler supports -Wimplicit-fallthrough])
		AC_MSG_RESULT([yes])
	], [
		IMPLICIT_FALLTHROUGH=
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([IMPLICIT_FALLTHROUGH])
])
m4trace:config/always-compiler-options.m4:210: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_INFINITE_RECURSION], [
	AC_MSG_CHECKING([whether $CC supports -Winfinite-recursion])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -Winfinite-recursion"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		INFINITE_RECURSION=-Winfinite-recursion
		AC_DEFINE([HAVE_INFINITE_RECURSION], 1,
			[Define if compiler supports -Winfinite-recursion])
		AC_MSG_RESULT([yes])
	], [
		INFINITE_RECURSION=
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([INFINITE_RECURSION])
])
m4trace:config/always-compiler-options.m4:233: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_KERNEL_CC_INFINITE_RECURSION], [
	AC_MSG_CHECKING([whether $KERNEL_CC supports -Winfinite-recursion])

	saved_cc="$CC"
	saved_flags="$CFLAGS"
	CC="gcc"
	CFLAGS="$CFLAGS -Werror -Winfinite-recursion"

	AS_IF([ test -n "$KERNEL_CC" ], [
		CC="$KERNEL_CC"
	])
	AS_IF([ test -n "$KERNEL_LLVM" ], [
		CC="clang"
	])

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		KERNEL_INFINITE_RECURSION=-Winfinite-recursion
		AC_DEFINE([HAVE_KERNEL_INFINITE_RECURSION], 1,
			[Define if compiler supports -Winfinite-recursion])
		AC_MSG_RESULT([yes])
	], [
		KERNEL_INFINITE_RECURSION=
		AC_MSG_RESULT([no])
	])

	CC="$saved_cc"
	CFLAGS="$saved_flags"
	AC_SUBST([KERNEL_INFINITE_RECURSION])
])
m4trace:config/always-compiler-options.m4:266: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_FORMAT_OVERFLOW], [
	AC_MSG_CHECKING([whether $CC supports -Wformat-overflow])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -Wformat-overflow"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		FORMAT_OVERFLOW=-Wformat-overflow
		AC_DEFINE([HAVE_FORMAT_OVERFLOW], 1,
			[Define if compiler supports -Wformat-overflow])
		AC_MSG_RESULT([yes])
	], [
		FORMAT_OVERFLOW=
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([FORMAT_OVERFLOW])
])
m4trace:config/always-compiler-options.m4:289: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_NO_OMIT_FRAME_POINTER], [
	AC_MSG_CHECKING([whether $CC supports -fno-omit-frame-pointer])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -fno-omit-frame-pointer"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		NO_OMIT_FRAME_POINTER=-fno-omit-frame-pointer
		AC_MSG_RESULT([yes])
	], [
		NO_OMIT_FRAME_POINTER=
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([NO_OMIT_FRAME_POINTER])
])
m4trace:config/always-compiler-options.m4:310: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CC_NO_IPA_SRA], [
	AC_MSG_CHECKING([whether $CC supports -fno-ipa-sra])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Werror -fno-ipa-sra"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		NO_IPA_SRA=-fno-ipa-sra
		AC_MSG_RESULT([yes])
	], [
		NO_IPA_SRA=
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
	AC_SUBST([NO_IPA_SRA])
])
m4trace:config/always-compiler-options.m4:331: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_KERNEL_CC_NO_IPA_SRA], [
	AC_MSG_CHECKING([whether $KERNEL_CC supports -fno-ipa-sra])

	saved_cc="$CC"
	saved_flags="$CFLAGS"
	CC="gcc"
	CFLAGS="$CFLAGS -Werror -fno-ipa-sra"

	AS_IF([ test -n "$KERNEL_CC" ], [
		CC="$KERNEL_CC"
	])
	AS_IF([ test -n "$KERNEL_LLVM" ], [
		CC="clang"
	])

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		KERNEL_NO_IPA_SRA=-fno-ipa-sra
		AC_MSG_RESULT([yes])
	], [
		KERNEL_NO_IPA_SRA=
		AC_MSG_RESULT([no])
	])

	CC="$saved_cc"
	CFLAGS="$saved_flags"
	AC_SUBST([KERNEL_NO_IPA_SRA])
])
m4trace:config/always-cppcheck.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_CPPCHECK], [
	AC_CHECK_PROG([CPPCHECK], [cppcheck], [cppcheck])
	if test -z "$CPPCHECK"; then
		CPPCHECK='@printf "skipping cppcheck because cppcheck is not installed\n"'
	fi
])
m4trace:config/always-parallel.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_PARALLEL], [
	AC_CHECK_PROG([PARALLEL], [parallel], [yes])

	AM_CONDITIONAL([HAVE_PARALLEL], [test "x$PARALLEL" = "xyes"])
])
m4trace:config/always-python.m4:7: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_PYTHON], [
	AC_ARG_WITH([python],
		AS_HELP_STRING([--with-python[=VERSION]],
		[default system python version @<:@default=check@:>@]),
		[with_python=$withval],
		[with_python=check])

	AS_CASE([$with_python],
		[check], [AC_CHECK_PROGS([PYTHON], [python3], [:])],
		[3*], [PYTHON="python${with_python}"],
		[*python3*], [PYTHON="${with_python}"],
		[no], [PYTHON=":"],
		[AC_MSG_ERROR([Unknown --with-python value '$with_python'])]
	)

	dnl #
	dnl # Minimum supported Python versions for utilities: Python 3.6
	dnl #
	AM_PATH_PYTHON([], [], [:])
	AS_IF([test -z "$PYTHON_VERSION"], [
		PYTHON_VERSION=$(echo ${PYTHON##*/} | tr -cd 0-9.)
	])
	PYTHON_MINOR=${PYTHON_VERSION#*\.}

	AS_CASE([$PYTHON_VERSION],
		[3.*], [
			AS_IF([test $PYTHON_MINOR -lt 6],
				[AC_MSG_ERROR("Python >= 3.6 is required")])
		],
		[:|2|3], [],
		[PYTHON_VERSION=3]
	)

	AM_CONDITIONAL([USING_PYTHON], [test "$PYTHON" != :])
	AC_SUBST([PYTHON_SHEBANG], [python3])

	dnl #
	dnl # Request that packages be built for a specific Python version.
	dnl #
	AS_IF([test "x$with_python" != xcheck], [
		PYTHON_PKG_VERSION=$(echo $PYTHON_VERSION | tr -d .)
		DEFINE_PYTHON_PKG_VERSION='--define "__use_python_pkg_version '${PYTHON_PKG_VERSION}'"'
		DEFINE_PYTHON_VERSION='--define "__use_python '${PYTHON}'"'
	], [
		DEFINE_PYTHON_VERSION=''
		DEFINE_PYTHON_PKG_VERSION=''
	])

	AC_SUBST(DEFINE_PYTHON_VERSION)
	AC_SUBST(DEFINE_PYTHON_PKG_VERSION)
])
m4trace:config/always-pyzfs.m4:8: -1- AC_DEFUN([ZFS_AC_PYTHON_MODULE], [
	PYTHON_NAME=${PYTHON##*/}
	AC_MSG_CHECKING([for $PYTHON_NAME module: $1])
	AS_IF([$PYTHON -c "import $1" 2>/dev/null], [
		AC_MSG_RESULT(yes)
		m4_ifvaln([$2], [$2])
	], [
		AC_MSG_RESULT(no)
		m4_ifvaln([$3], [$3])
	])
])
m4trace:config/always-pyzfs.m4:23: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_PYZFS], [
	AC_ARG_ENABLE([pyzfs],
		AS_HELP_STRING([--enable-pyzfs],
		[install libzfs_core python bindings @<:@default=check@:>@]),
		[enable_pyzfs=$enableval],
		[enable_pyzfs=check])

	dnl #
	dnl # Packages for pyzfs specifically enabled/disabled.
	dnl #
	AS_IF([test "x$enable_pyzfs" != xcheck], [
		AS_IF([test "x$enable_pyzfs" = xyes], [
			DEFINE_PYZFS='--with pyzfs'
		], [
			DEFINE_PYZFS='--without pyzfs'
		])
	], [
		AS_IF([test "$PYTHON" != :], [
			DEFINE_PYZFS=''
		], [
			enable_pyzfs=no
			DEFINE_PYZFS='--without pyzfs'
		])
	])
	AC_SUBST(DEFINE_PYZFS)

	dnl #
	dnl # Autodetection disables pyzfs if kernel or srpm config
	dnl #
	AS_IF([test "x$enable_pyzfs" = xcheck], [
		AS_IF([test "x$ZFS_CONFIG" = xkernel -o "x$ZFS_CONFIG" = xsrpm ], [
				enable_pyzfs=no
				AC_MSG_NOTICE([Disabling pyzfs for kernel/srpm config])
		])
	])

	dnl #
	dnl # Python "packaging" (or, failing that, "distlib") module is required to build and install pyzfs
	dnl #
	AS_IF([test "x$enable_pyzfs" = xcheck -o "x$enable_pyzfs" = xyes], [
		ZFS_AC_PYTHON_MODULE([packaging], [], [
			ZFS_AC_PYTHON_MODULE([distlib], [], [
				AS_IF([test "x$enable_pyzfs" = xyes], [
					AC_MSG_ERROR("Python $PYTHON_VERSION packaging and distlib modules are not installed")
				], [test "x$enable_pyzfs" != xno], [
					enable_pyzfs=no
				])
			])
		])
	])

	dnl #
	dnl # Require python3-devel libraries
	dnl #
	AS_IF([test "x$enable_pyzfs" = xcheck  -o "x$enable_pyzfs" = xyes], [
		AS_CASE([$PYTHON_VERSION],
			[3.*], [PYTHON_REQUIRED_VERSION=">= '3.6.0'"],
			[AC_MSG_ERROR("Python $PYTHON_VERSION unknown")]
		)

		AX_PYTHON_DEVEL([$PYTHON_REQUIRED_VERSION], [
			AS_IF([test "x$enable_pyzfs" = xyes], [
				AC_MSG_ERROR("Python $PYTHON_REQUIRED_VERSION development library is not installed")
			], [test "x$enable_pyzfs" != xno], [
				enable_pyzfs=no
			])
		])
	])

	dnl #
	dnl # Python "setuptools" module is required to build and install pyzfs
	dnl #
	AS_IF([test "x$enable_pyzfs" = xcheck -o "x$enable_pyzfs" = xyes], [
		ZFS_AC_PYTHON_MODULE([setuptools], [], [
			AS_IF([test "x$enable_pyzfs" = xyes], [
				AC_MSG_ERROR("Python $PYTHON_VERSION setuptools is not installed")
			], [test "x$enable_pyzfs" != xno], [
				enable_pyzfs=no
			])
		])
	])

	dnl #
	dnl # Python "cffi" module is required to run pyzfs
	dnl #
	AS_IF([test "x$enable_pyzfs" = xcheck -o "x$enable_pyzfs" = xyes], [
		ZFS_AC_PYTHON_MODULE([cffi], [], [
			AS_IF([test "x$enable_pyzfs" = xyes], [
				AC_MSG_ERROR("Python $PYTHON_VERSION cffi is not installed")
			], [test "x$enable_pyzfs" != xno], [
				enable_pyzfs=no
			])
		])
	])

	dnl #
	dnl # Set enable_pyzfs to 'yes' if every check passed
	dnl #
	AS_IF([test "x$enable_pyzfs" = xcheck], [enable_pyzfs=yes])

	AM_CONDITIONAL([PYZFS_ENABLED], [test "x$enable_pyzfs" = xyes])
	AC_SUBST([PYZFS_ENABLED], [$enable_pyzfs])
	AC_SUBST(pythonsitedir, [$PYTHON_SITE_PKG])

	AC_MSG_CHECKING([whether to enable pyzfs: ])
	AC_MSG_RESULT($enable_pyzfs)
])
m4trace:config/always-sed.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_SED], [
	AC_REQUIRE([AC_PROG_SED])dnl
	AC_CACHE_CHECK([for sed --in-place], [ac_cv_inplace], [
		tmpfile=$(mktemp conftest.XXXXXX)
		echo foo >$tmpfile
		AS_IF([$SED --in-place 's#foo#bar#' $tmpfile 2>/dev/null],
		      [ac_cv_inplace="--in-place"],
		      [$SED -i '' 's#foo#bar#' $tmpfile 2>/dev/null],
		      [ac_cv_inplace="-i ''"],
		      [AC_MSG_ERROR([$SED does not support in-place])])
	])
	AC_SUBST([ac_inplace], [$ac_cv_inplace])
])
m4trace:config/always-shellcheck.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_SHELLCHECK], [
	AC_CHECK_PROG([SHELLCHECK], [shellcheck], [yes])
	AC_CHECK_PROG([CHECKBASHISMS], [checkbashisms], [yes])

	AM_CONDITIONAL([HAVE_SHELLCHECK], [test "x$SHELLCHECK" = "xyes"])
	AM_CONDITIONAL([HAVE_CHECKBASHISMS], [test "x$CHECKBASHISMS" = "xyes"])
])
m4trace:config/always-system.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_SYSTEM], [
	AC_MSG_CHECKING([for system type ($host_os)])
	case $host_os in
		*linux*)
			AC_DEFINE([SYSTEM_LINUX], [1],
				[True if ZFS is to be compiled for a Linux system])
			ac_system="Linux"
			ac_system_l="linux"
			;;
		*freebsd*)
			AC_DEFINE([SYSTEM_FREEBSD], [1],
				[True if ZFS is to be compiled for a FreeBSD system])
			ac_system="FreeBSD"
			ac_system_l="freebsd"
			;;
		*)
			ac_system="unknown"
			ac_system_l="unknown"
			;;
	esac
	AC_MSG_RESULT([$ac_system])
	AC_SUBST([ac_system])
	AC_SUBST([ac_system_l])

	AM_CONDITIONAL([BUILD_LINUX], [test "x$ac_system" = "xLinux"])
	AM_CONDITIONAL([BUILD_FREEBSD], [test "x$ac_system" = "xFreeBSD"])
])
m4trace:config/ax_code_coverage.m4:80: -1- AC_DEFUN([AX_CODE_COVERAGE], [
	dnl Check for --enable-code-coverage
	AC_REQUIRE([AC_PROG_SED])

	# allow to override gcov location
	AC_ARG_WITH([gcov],
	  [AS_HELP_STRING([--with-gcov[=GCOV]], [use given GCOV for coverage (GCOV=gcov).])],
	  [_AX_CODE_COVERAGE_GCOV_PROG_WITH=$with_gcov],
	  [_AX_CODE_COVERAGE_GCOV_PROG_WITH=gcov])

	AC_MSG_CHECKING([whether to build with code coverage support])
	AC_ARG_ENABLE([code-coverage],
	  AS_HELP_STRING([--enable-code-coverage],
	  [Whether to enable code coverage support]),,
	  enable_code_coverage=no)

	AM_CONDITIONAL([CODE_COVERAGE_ENABLED], [test x$enable_code_coverage = xyes])
	AC_SUBST([CODE_COVERAGE_ENABLED], [$enable_code_coverage])
	AC_MSG_RESULT($enable_code_coverage)

	AS_IF([ test "$enable_code_coverage" = "yes" ], [
		# check for gcov
		AC_CHECK_TOOL([GCOV],
		  [$_AX_CODE_COVERAGE_GCOV_PROG_WITH],
		  [:])
		AS_IF([test "X$GCOV" = "X:"],
		  [AC_MSG_ERROR([gcov is needed to do coverage])])
		AC_SUBST([GCOV])

		dnl Check if gcc is being used
		AS_IF([ test "$GCC" = "no" ], [
			AC_MSG_ERROR([not compiling with gcc, which is required for gcov code coverage])
		])

		AC_CHECK_PROG([LCOV], [lcov], [lcov])
		AC_CHECK_PROG([GENHTML], [genhtml], [genhtml])

		AS_IF([ test -z "$LCOV" ], [
			AC_MSG_ERROR([To enable code coverage reporting you must have lcov installed])
		])

		AS_IF([ test -z "$GENHTML" ], [
			AC_MSG_ERROR([Could not find genhtml from the lcov package])
		])

		dnl Build the code coverage flags
		dnl Define CODE_COVERAGE_LDFLAGS for backwards compatibility
		CODE_COVERAGE_CPPFLAGS=""
		CODE_COVERAGE_CFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
		CODE_COVERAGE_CXXFLAGS="-O0 -g -fprofile-arcs -ftest-coverage"
		CODE_COVERAGE_LIBS="-lgcov"
		CODE_COVERAGE_LDFLAGS="$CODE_COVERAGE_LIBS"

		AC_SUBST([CODE_COVERAGE_CPPFLAGS])
		AC_SUBST([CODE_COVERAGE_CFLAGS])
		AC_SUBST([CODE_COVERAGE_CXXFLAGS])
		AC_SUBST([CODE_COVERAGE_LIBS])
		AC_SUBST([CODE_COVERAGE_LDFLAGS])

		[CODE_COVERAGE_RULES_CHECK='
	-$(A''M_V_at)$(MAKE) $(AM_MAKEFLAGS) -k check
	$(A''M_V_at)$(MAKE) $(AM_MAKEFLAGS) code-coverage-capture
']
		[CODE_COVERAGE_RULES_CAPTURE='
	$(code_coverage_v_lcov_cap)$(LCOV) $(code_coverage_quiet) $(addprefix --directory ,$(CODE_COVERAGE_DIRECTORY)) --capture --output-file "$(CODE_COVERAGE_OUTPUT_FILE).tmp" --test-name "$(call code_coverage_sanitize,$(PACKAGE_NAME)-$(PACKAGE_VERSION))" --no-checksum --compat-libtool $(CODE_COVERAGE_LCOV_SHOPTS) $(CODE_COVERAGE_LCOV_OPTIONS)
	$(code_coverage_v_lcov_ign)$(LCOV) $(code_coverage_quiet) $(addprefix --directory ,$(CODE_COVERAGE_DIRECTORY)) --remove "$(CODE_COVERAGE_OUTPUT_FILE).tmp" $(CODE_COVERAGE_IGNORE_PATTERN) --output-file "$(CODE_COVERAGE_OUTPUT_FILE)" $(CODE_COVERAGE_LCOV_SHOPTS) $(CODE_COVERAGE_LCOV_RMOPTS)
	-@rm -f $(CODE_COVERAGE_OUTPUT_FILE).tmp
	$(code_coverage_v_genhtml)LANG=C $(GENHTML) $(code_coverage_quiet) $(addprefix --prefix ,$(CODE_COVERAGE_DIRECTORY)) --output-directory "$(CODE_COVERAGE_OUTPUT_DIRECTORY)" --title "$(PACKAGE_NAME)-$(PACKAGE_VERSION) Code Coverage" --legend --show-details "$(CODE_COVERAGE_OUTPUT_FILE)" $(CODE_COVERAGE_GENHTML_OPTIONS)
	@echo "file://$(abs_builddir)/$(CODE_COVERAGE_OUTPUT_DIRECTORY)/index.html"
']
		[CODE_COVERAGE_RULES_CLEAN='
clean: code-coverage-clean
distclean: code-coverage-clean
code-coverage-clean:
	-$(LCOV) --directory $(top_builddir) -z
	-rm -rf $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_FILE).tmp $(CODE_COVERAGE_OUTPUT_DIRECTORY)
	-find . \( -name "*.gcda" -o -name "*.gcno" -o -name "*.gcov" \) -delete
']
	], [
		[CODE_COVERAGE_RULES_CHECK='
	@echo "Need to reconfigure with --enable-code-coverage"
']
		CODE_COVERAGE_RULES_CAPTURE="$CODE_COVERAGE_RULES_CHECK"
		CODE_COVERAGE_RULES_CLEAN=''
	])

[CODE_COVERAGE_RULES='
# Code coverage
#
# Optional:
#  - CODE_COVERAGE_DIRECTORY: Top-level directory for code coverage reporting.
#    Multiple directories may be specified, separated by whitespace.
#    (Default: $(top_builddir))
#  - CODE_COVERAGE_OUTPUT_FILE: Filename and path for the .info file generated
#    by lcov for code coverage. (Default:
#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info)
#  - CODE_COVERAGE_OUTPUT_DIRECTORY: Directory for generated code coverage
#    reports to be created. (Default:
#    $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage)
#  - CODE_COVERAGE_BRANCH_COVERAGE: Set to 1 to enforce branch coverage,
#    set to 0 to disable it and leave empty to stay with the default.
#    (Default: empty)
#  - CODE_COVERAGE_LCOV_SHOPTS_DEFAULT: Extra options shared between both lcov
#    instances. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
#  - CODE_COVERAGE_LCOV_SHOPTS: Extra options to shared between both lcov
#    instances. (Default: $CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
#  - CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH: --gcov-tool pathtogcov
#  - CODE_COVERAGE_LCOV_OPTIONS_DEFAULT: Extra options to pass to the
#    collecting lcov instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
#  - CODE_COVERAGE_LCOV_OPTIONS: Extra options to pass to the collecting lcov
#    instance. (Default: $CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
#  - CODE_COVERAGE_LCOV_RMOPTS_DEFAULT: Extra options to pass to the filtering
#    lcov instance. (Default: empty)
#  - CODE_COVERAGE_LCOV_RMOPTS: Extra options to pass to the filtering lcov
#    instance. (Default: $CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
#  - CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT: Extra options to pass to the
#    genhtml instance. (Default: based on $CODE_COVERAGE_BRANCH_COVERAGE)
#  - CODE_COVERAGE_GENHTML_OPTIONS: Extra options to pass to the genhtml
#    instance. (Default: $CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)
#  - CODE_COVERAGE_IGNORE_PATTERN: Extra glob pattern of files to ignore
#
# The generated report will be titled using the $(PACKAGE_NAME) and
# $(PACKAGE_VERSION). In order to add the current git hash to the title,
# use the git-version-gen script, available online.

# Optional variables
CODE_COVERAGE_DIRECTORY ?= $(top_builddir)
CODE_COVERAGE_OUTPUT_FILE ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage.info
CODE_COVERAGE_OUTPUT_DIRECTORY ?= $(PACKAGE_NAME)-$(PACKAGE_VERSION)-coverage
CODE_COVERAGE_BRANCH_COVERAGE ?=
CODE_COVERAGE_LCOV_SHOPTS_DEFAULT ?= $(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
--rc lcov_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
CODE_COVERAGE_LCOV_SHOPTS ?= $(CODE_COVERAGE_LCOV_SHOPTS_DEFAULT)
CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH ?= --gcov-tool "$(GCOV)"
CODE_COVERAGE_LCOV_OPTIONS_DEFAULT ?= $(CODE_COVERAGE_LCOV_OPTIONS_GCOVPATH)
CODE_COVERAGE_LCOV_OPTIONS ?= $(CODE_COVERAGE_LCOV_OPTIONS_DEFAULT)
CODE_COVERAGE_LCOV_RMOPTS_DEFAULT ?=
CODE_COVERAGE_LCOV_RMOPTS ?= $(CODE_COVERAGE_LCOV_RMOPTS_DEFAULT)
CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT ?=\
$(if $(CODE_COVERAGE_BRANCH_COVERAGE),\
--rc genhtml_branch_coverage=$(CODE_COVERAGE_BRANCH_COVERAGE))
CODE_COVERAGE_GENHTML_OPTIONS ?= $(CODE_COVERAGE_GENHTML_OPTIONS_DEFAULT)

# Add any folders you want to ignore here
# Ignore tmp and tests themselves
CODE_COVERAGE_IGNORE_PATTERN ?= "/tmp/*" "*/tests/*"
CODE_COVERAGE_IGNORE_PATTERN += "*/module/zstd/lib/*"
CODE_COVERAGE_IGNORE_PATTERN += "*/module/zfs/lz4.c"

GITIGNOREFILES ?=
GITIGNOREFILES += $(CODE_COVERAGE_OUTPUT_FILE) $(CODE_COVERAGE_OUTPUT_DIRECTORY)

code_coverage_v_lcov_cap = $(code_coverage_v_lcov_cap_$(V))
code_coverage_v_lcov_cap_ = $(code_coverage_v_lcov_cap_$(AM_DEFAULT_VERBOSITY))
code_coverage_v_lcov_cap_0 = @echo "  LCOV   --capture"\
 $(CODE_COVERAGE_OUTPUT_FILE);
code_coverage_v_lcov_ign = $(code_coverage_v_lcov_ign_$(V))
code_coverage_v_lcov_ign_ = $(code_coverage_v_lcov_ign_$(AM_DEFAULT_VERBOSITY))
code_coverage_v_lcov_ign_0 = @echo "  LCOV   --remove /tmp/*"\
 $(CODE_COVERAGE_IGNORE_PATTERN);
code_coverage_v_genhtml = $(code_coverage_v_genhtml_$(V))
code_coverage_v_genhtml_ = $(code_coverage_v_genhtml_$(AM_DEFAULT_VERBOSITY))
code_coverage_v_genhtml_0 = @echo "  GEN   " $(CODE_COVERAGE_OUTPUT_DIRECTORY);
code_coverage_quiet = $(code_coverage_quiet_$(V))
code_coverage_quiet_ = $(code_coverage_quiet_$(AM_DEFAULT_VERBOSITY))
code_coverage_quiet_0 = --quiet

# sanitizes the test-name: replaces with underscores: dashes and dots
code_coverage_sanitize = $(subst -,_,$(subst .,_,$(1)))

# Use recursive makes in order to ignore errors during check
check-code-coverage:'"$CODE_COVERAGE_RULES_CHECK"'

# Capture code coverage data
code-coverage-capture: code-coverage-capture-hook'"$CODE_COVERAGE_RULES_CAPTURE"'

# Hook rule executed before code-coverage-capture, overridable by the user
code-coverage-capture-hook:

'"$CODE_COVERAGE_RULES_CLEAN"'

A''M_DISTCHECK_CONFIGURE_FLAGS ?=
A''M_DISTCHECK_CONFIGURE_FLAGS += --disable-code-coverage

.PHONY: check-code-coverage code-coverage-capture code-coverage-capture-hook code-coverage-clean
']

	AC_SUBST([CODE_COVERAGE_RULES])
	m4_ifdef([_AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE([CODE_COVERAGE_RULES])])
])
m4trace:config/ax_count_cpus.m4:33: -1- AC_DEFUN([AX_COUNT_CPUS], [dnl
      AC_REQUIRE([AC_CANONICAL_HOST])dnl
      AC_REQUIRE([AC_PROG_EGREP])dnl
      AC_MSG_CHECKING([the number of available CPUs])
      CPU_COUNT="0"

      # Try generic methods

      # 'getconf' is POSIX utility, but '_NPROCESSORS_ONLN' and
      # 'NPROCESSORS_ONLN' are platform-specific
      command -v getconf >/dev/null 2>&1 && \
        CPU_COUNT=`getconf _NPROCESSORS_ONLN 2>/dev/null || getconf NPROCESSORS_ONLN 2>/dev/null` || CPU_COUNT="0"
      AS_IF([[test "$CPU_COUNT" -gt "0" 2>/dev/null || ! command -v nproc >/dev/null 2>&1]],[[: # empty]],[dnl
        # 'nproc' is part of GNU Coreutils and is widely available
        CPU_COUNT=`OMP_NUM_THREADS='' nproc 2>/dev/null` || CPU_COUNT=`nproc 2>/dev/null` || CPU_COUNT="0"
      ])dnl

      AS_IF([[test "$CPU_COUNT" -gt "0" 2>/dev/null]],[[: # empty]],[dnl
        # Try platform-specific preferred methods
        AS_CASE([[$host_os]],dnl
          [[*linux*]],[[CPU_COUNT=`lscpu -p 2>/dev/null | $EGREP -e '^@<:@0-9@:>@+,' -c` || CPU_COUNT="0"]],dnl
          [[*darwin*]],[[CPU_COUNT=`sysctl -n hw.logicalcpu 2>/dev/null` || CPU_COUNT="0"]],dnl
          [[freebsd*]],[[command -v sysctl >/dev/null 2>&1 && CPU_COUNT=`sysctl -n kern.smp.cpus 2>/dev/null` || CPU_COUNT="0"]],dnl
          [[netbsd*]], [[command -v sysctl >/dev/null 2>&1 && CPU_COUNT=`sysctl -n hw.ncpuonline 2>/dev/null` || CPU_COUNT="0"]],dnl
          [[solaris*]],[[command -v psrinfo >/dev/null 2>&1 && CPU_COUNT=`psrinfo 2>/dev/null | $EGREP -e '^@<:@0-9@:>@.*on-line' -c 2>/dev/null` || CPU_COUNT="0"]],dnl
          [[mingw*]],[[CPU_COUNT=`ls -qpU1 /proc/registry/HKEY_LOCAL_MACHINE/HARDWARE/DESCRIPTION/System/CentralProcessor/ 2>/dev/null | $EGREP -e '^@<:@0-9@:>@+/' -c` || CPU_COUNT="0"]],dnl
          [[msys*]],[[CPU_COUNT=`ls -qpU1 /proc/registry/HKEY_LOCAL_MACHINE/HARDWARE/DESCRIPTION/System/CentralProcessor/ 2>/dev/null | $EGREP -e '^@<:@0-9@:>@+/' -c` || CPU_COUNT="0"]],dnl
          [[cygwin*]],[[CPU_COUNT=`ls -qpU1 /proc/registry/HKEY_LOCAL_MACHINE/HARDWARE/DESCRIPTION/System/CentralProcessor/ 2>/dev/null | $EGREP -e '^@<:@0-9@:>@+/' -c` || CPU_COUNT="0"]]dnl
        )dnl
      ])dnl

      AS_IF([[test "$CPU_COUNT" -gt "0" 2>/dev/null || ! command -v sysctl >/dev/null 2>&1]],[[: # empty]],[dnl
        # Try less preferred generic method
        # 'hw.ncpu' exist on many platforms, but not on GNU/Linux
        CPU_COUNT=`sysctl -n hw.ncpu 2>/dev/null` || CPU_COUNT="0"
      ])dnl

      AS_IF([[test "$CPU_COUNT" -gt "0" 2>/dev/null]],[[: # empty]],[dnl
      # Try platform-specific fallback methods
      # They can be less accurate and slower then preferred methods
        AS_CASE([[$host_os]],dnl
          [[*linux*]],[[CPU_COUNT=`$EGREP -e '^processor' -c /proc/cpuinfo 2>/dev/null` || CPU_COUNT="0"]],dnl
          [[*darwin*]],[[CPU_COUNT=`system_profiler SPHardwareDataType 2>/dev/null | $EGREP -i -e 'number of cores:'|cut -d : -f 2 -s|tr -d ' '` || CPU_COUNT="0"]],dnl
          [[freebsd*]],[[CPU_COUNT=`dmesg 2>/dev/null| $EGREP -e '^cpu@<:@0-9@:>@+: '|sort -u|$EGREP -e '^' -c` || CPU_COUNT="0"]],dnl
          [[netbsd*]], [[CPU_COUNT=`command -v cpuctl >/dev/null 2>&1 && cpuctl list 2>/dev/null| $EGREP -e '^@<:@0-9@:>@+ .* online ' -c` || \
                           CPU_COUNT=`dmesg 2>/dev/null| $EGREP -e '^cpu@<:@0-9@:>@+ at'|sort -u|$EGREP -e '^' -c` || CPU_COUNT="0"]],dnl
          [[solaris*]],[[command -v kstat >/dev/null 2>&1 && CPU_COUNT=`kstat -m cpu_info -s state -p 2>/dev/null | $EGREP -c -e 'on-line'` || \
                           CPU_COUNT=`kstat -m cpu_info 2>/dev/null | $EGREP -c -e 'module: cpu_info'` || CPU_COUNT="0"]],dnl
          [[mingw*]],[AS_IF([[CPU_COUNT=`reg query 'HKLM\\Hardware\\Description\\System\\CentralProcessor' 2>/dev/null | $EGREP -e '\\\\@<:@0-9@:>@+$' -c`]],dnl
                        [[: # empty]],[[test "$NUMBER_OF_PROCESSORS" -gt "0" 2>/dev/null && CPU_COUNT="$NUMBER_OF_PROCESSORS"]])],dnl
          [[msys*]],[[test "$NUMBER_OF_PROCESSORS" -gt "0" 2>/dev/null && CPU_COUNT="$NUMBER_OF_PROCESSORS"]],dnl
          [[cygwin*]],[[test "$NUMBER_OF_PROCESSORS" -gt "0" 2>/dev/null && CPU_COUNT="$NUMBER_OF_PROCESSORS"]]dnl
        )dnl
      ])dnl

      AS_IF([[test "x$CPU_COUNT" != "x0" && test "$CPU_COUNT" -gt 0 2>/dev/null]],[dnl
          AC_MSG_RESULT([[$CPU_COUNT]])
          m4_ifvaln([$1],[$1],)dnl
        ],[dnl
          m4_ifval([$2],[dnl
            AS_UNSET([[CPU_COUNT]])
            AC_MSG_RESULT([[unable to detect]])
            $2
          ], [dnl
            CPU_COUNT="1"
            AC_MSG_RESULT([[unable to detect (assuming 1)]])
          ])dnl
        ])dnl
      ])
m4trace:config/ax_python_devel.m4:78: -1- AU_DEFUN([AC_PYTHON_DEVEL], [m4_if($#, 0, [AX_PYTHON_DEVEL], [AX_PYTHON_DEVEL($@)])], [], [])
m4trace:config/ax_python_devel.m4:78: -1- AC_DEFUN([AC_PYTHON_DEVEL], [m4_warn([obsolete], [The macro `AC_PYTHON_DEVEL' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [AX_PYTHON_DEVEL], [AX_PYTHON_DEVEL($@)])])
m4trace:config/ax_python_devel.m4:79: -1- AC_DEFUN([AX_PYTHON_DEVEL], [
	#
	# Allow the use of a (user set) custom python version
	#
	AC_ARG_VAR([PYTHON_VERSION],[The installed Python
		version to use, for example '2.3'. This string
		will be appended to the Python interpreter
		canonical name.])

	AC_PATH_PROG([PYTHON],[python[$PYTHON_VERSION]])
	if test -z "$PYTHON"; then
		m4_ifvaln([$2],[$2],[
			AC_MSG_ERROR([Cannot find python$PYTHON_VERSION in your system path])
			PYTHON_VERSION=""
		])
	fi

	#
	# Check for a version of Python >= 2.1.0
	#
	AC_MSG_CHECKING([for a version of Python >= '2.1.0'])
	ac_supports_python_ver=`$PYTHON -c "import sys; \
		ver = sys.version.split ()[[0]]; \
		print (ver >= '2.1.0')"`
	if test "$ac_supports_python_ver" != "True"; then
		if test -z "$PYTHON_NOVERSIONCHECK"; then
			AC_MSG_RESULT([no])
			AC_MSG_FAILURE([
This version of the AC@&t@_PYTHON_DEVEL macro
doesn't work properly with versions of Python before
2.1.0. You may need to re-run configure, setting the
variables PYTHON_CPPFLAGS, PYTHON_LIBS, PYTHON_SITE_PKG,
PYTHON_EXTRA_LIBS and PYTHON_EXTRA_LDFLAGS by hand.
Moreover, to disable this check, set PYTHON_NOVERSIONCHECK
to something else than an empty string.
])
		else
			AC_MSG_RESULT([skip at user request])
		fi
	else
		AC_MSG_RESULT([yes])
	fi

	#
	# If the macro parameter ``version'' is set, honour it.
	# A Python shim class, VPy, is used to implement correct version comparisons via
	# string expressions, since e.g. a naive textual ">= 2.7.3" won't work for
	# Python 2.7.10 (the ".1" being evaluated as less than ".3").
	#
	if test -n "$1"; then
		AC_MSG_CHECKING([for a version of Python $1])
                cat << EOF > ax_python_devel_vpy.py
class VPy:
    def vtup(self, s):
        return tuple(map(int, s.strip().replace("rc", ".").split(".")))
    def __init__(self):
        import sys
        self.vpy = tuple(sys.version_info)
    def __eq__(self, s):
        return self.vpy == self.vtup(s)
    def __ne__(self, s):
        return self.vpy != self.vtup(s)
    def __lt__(self, s):
        return self.vpy < self.vtup(s)
    def __gt__(self, s):
        return self.vpy > self.vtup(s)
    def __le__(self, s):
        return self.vpy <= self.vtup(s)
    def __ge__(self, s):
        return self.vpy >= self.vtup(s)
EOF
		ac_supports_python_ver=`$PYTHON -c "import ax_python_devel_vpy; \
                        ver = ax_python_devel_vpy.VPy(); \
			print (ver $1)"`
                rm -rf ax_python_devel_vpy*.py* __pycache__/ax_python_devel_vpy*.py*
		if test "$ac_supports_python_ver" = "True"; then
			AC_MSG_RESULT([yes])
		else
			AC_MSG_RESULT([no])
			AC_MSG_ERROR([this package requires Python $1.
If you have it installed, but it isn't the default Python
interpreter in your system path, please pass the PYTHON_VERSION
variable to configure. See ``configure --help'' for reference.
])
			PYTHON_VERSION=""
		fi
	fi

	#
	# Check for Python include path
	#
	#
	AC_MSG_CHECKING([for Python include path])
	if test -z "$PYTHON_CPPFLAGS"; then
		python_path=`$PYTHON -c "import sysconfig; \
			print (sysconfig.get_path('include'));"`
		plat_python_path=`$PYTHON -c "import sysconfig; \
			print (sysconfig.get_path('platinclude'));"`
		if test -n "${python_path}"; then
			if test "${plat_python_path}" != "${python_path}"; then
				python_path="-I$python_path -I$plat_python_path"
			else
				python_path="-I$python_path"
			fi
		fi
		PYTHON_CPPFLAGS=$python_path
	fi
	AC_MSG_RESULT([$PYTHON_CPPFLAGS])
	AC_SUBST([PYTHON_CPPFLAGS])

	#
	# Check for Python library path
	#
	AC_MSG_CHECKING([for Python library path])
	if test -z "$PYTHON_LIBS"; then
		# (makes two attempts to ensure we've got a version number
		# from the interpreter)
		ac_python_version=`cat<<EOD | $PYTHON -

# join all versioning strings, on some systems
# major/minor numbers could be in different list elements
from sysconfig import *
e = get_config_var('VERSION')
if e is not None:
	print(e)
EOD`

		if test -z "$ac_python_version"; then
			if test -n "$PYTHON_VERSION"; then
				ac_python_version=$PYTHON_VERSION
			else
				ac_python_version=`$PYTHON -c "import sys; \
					print ('.'.join(sys.version.split('.')[[:2]]))"`
			fi
		fi

		# Make the versioning information available to the compiler
		AC_DEFINE_UNQUOTED([HAVE_PYTHON], ["$ac_python_version"],
                                   [If available, contains the Python version number currently in use.])

		# First, the library directory:
		ac_python_libdir=`cat<<EOD | $PYTHON -

# There should be only one
import sysconfig
e = sysconfig.get_config_var('LIBDIR')
if e is not None:
	print (e)
EOD`

		# Now, for the library:
		ac_python_library=`cat<<EOD | $PYTHON -

import sysconfig
c = sysconfig.get_config_vars()
if 'LDVERSION' in c:
	print ('python'+c[['LDVERSION']])
else:
	print ('python'+c[['VERSION']])
EOD`

		# This small piece shamelessly adapted from PostgreSQL python macro;
		# credits goes to momjian, I think. I'd like to put the right name
		# in the credits, if someone can point me in the right direction... ?
		#
		if test -n "$ac_python_libdir" -a -n "$ac_python_library"
		then
			# use the official shared library
			ac_python_library=`echo "$ac_python_library" | sed "s/^lib//"`
			PYTHON_LIBS="-L$ac_python_libdir -l$ac_python_library"
		else
			# old way: use libpython from python_configdir
			ac_python_libdir=`$PYTHON -c \
			  "import sysconfig; \
			  import os; \
			  print (os.path.join(sysconfig.get_path('platstdlib'), 'config'));"`
			PYTHON_LIBS="-L$ac_python_libdir -lpython$ac_python_version"
		fi

		if test -z "PYTHON_LIBS"; then
			m4_ifvaln([$2],[$2],[
				AC_MSG_ERROR([
  Cannot determine location of your Python DSO. Please check it was installed with
  dynamic libraries enabled, or try setting PYTHON_LIBS by hand.
				])
			])
		fi
	fi
	AC_MSG_RESULT([$PYTHON_LIBS])
	AC_SUBST([PYTHON_LIBS])

	#
	# Check for site packages
	#
	AC_MSG_CHECKING([for Python site-packages path])
	if test -z "$PYTHON_SITE_PKG"; then
		PYTHON_SITE_PKG=`$PYTHON -c "import distutils.sysconfig; \
			print (distutils.sysconfig.get_python_lib(0,0));" 2>/dev/null || \
			$PYTHON -c "import sysconfig; \
			print (sysconfig.get_path('purelib'));"`
	fi
	AC_MSG_RESULT([$PYTHON_SITE_PKG])
	AC_SUBST([PYTHON_SITE_PKG])

	#
	# libraries which must be linked in when embedding
	#
	AC_MSG_CHECKING(python extra libraries)
	if test -z "$PYTHON_EXTRA_LIBS"; then
	   PYTHON_EXTRA_LIBS=`$PYTHON -c "import sysconfig; \
                conf = sysconfig.get_config_var; \
                print (conf('LIBS') + ' ' + conf('SYSLIBS'))"`
	fi
	AC_MSG_RESULT([$PYTHON_EXTRA_LIBS])
	AC_SUBST(PYTHON_EXTRA_LIBS)

	#
	# linking flags needed when embedding
	#
	AC_MSG_CHECKING(python extra linking flags)
	if test -z "$PYTHON_EXTRA_LDFLAGS"; then
		PYTHON_EXTRA_LDFLAGS=`$PYTHON -c "import sysconfig; \
			conf = sysconfig.get_config_var; \
			print (conf('LINKFORSHARED'))"`
	fi
	AC_MSG_RESULT([$PYTHON_EXTRA_LDFLAGS])
	AC_SUBST(PYTHON_EXTRA_LDFLAGS)

	#
	# final check to see if everything compiles alright
	#
	AC_MSG_CHECKING([consistency of all components of python development environment])
	# save current global flags
	ac_save_LIBS="$LIBS"
	ac_save_LDFLAGS="$LDFLAGS"
	ac_save_CPPFLAGS="$CPPFLAGS"
	LIBS="$ac_save_LIBS $PYTHON_LIBS $PYTHON_EXTRA_LIBS $PYTHON_EXTRA_LIBS"
	LDFLAGS="$ac_save_LDFLAGS $PYTHON_EXTRA_LDFLAGS"
	CPPFLAGS="$ac_save_CPPFLAGS $PYTHON_CPPFLAGS"
	AC_LANG_PUSH([C])
	AC_LINK_IFELSE([
		AC_LANG_PROGRAM([[#include <Python.h>]],
				[[Py_Initialize();]])
		],[pythonexists=yes],[pythonexists=no])
	AC_LANG_POP([C])
	# turn back to default flags
	CPPFLAGS="$ac_save_CPPFLAGS"
	LIBS="$ac_save_LIBS"
	LDFLAGS="$ac_save_LDFLAGS"

	AC_MSG_RESULT([$pythonexists])

        if test ! "x$pythonexists" = "xyes"; then
		m4_ifvaln([$2],[$2],[
			AC_MSG_FAILURE([
  Could not link test program to Python. Maybe the main Python library has been
  installed in some non-standard library path. If so, pass it to configure,
  via the LIBS environment variable.
  Example: ./configure LIBS="-L/usr/non-standard-path/python/lib"
  ============================================================================
   ERROR!
   You probably have to install the development version of the Python package
   for your distribution.  The exact name of this package varies among them.
  ============================================================================
	   ])
			PYTHON_VERSION=""
		])
	fi

	#
	# all done!
	#
])
m4trace:config/ax_restore_flags.m4:24: -1- AC_DEFUN([AX_RESTORE_FLAGS], [
  CPPFLAGS="${CPPFLAGS_save}"
  CFLAGS="${CFLAGS_save}"
  CXXFLAGS="${CXXFLAGS_save}"
  OBJCFLAGS="${OBJCFLAGS_save}"
  LDFLAGS="${LDFLAGS_save}"
  LIBS="${LIBS_save}"
])
m4trace:config/ax_save_flags.m4:24: -1- AC_DEFUN([AX_SAVE_FLAGS], [
  CPPFLAGS_save="${CPPFLAGS}"
  CFLAGS_save="${CFLAGS}"
  CXXFLAGS_save="${CXXFLAGS}"
  OBJCFLAGS_save="${OBJCFLAGS}"
  LDFLAGS_save="${LDFLAGS}"
  LIBS_save="${LIBS}"
])
m4trace:config/dkms.m4:4: -1- AC_DEFUN([ZFS_AC_DKMS_INHIBIT], [
	AC_MSG_CHECKING([for dkms.conf file])
        AS_IF([test -e dkms.conf], [
		AC_MSG_ERROR([
	*** ZFS should not be manually built in the DKMS source tree.
	*** Remove all ZFS packages before compiling the ZoL sources.
	*** Running "make install" breaks ZFS packages.])
        ], [
		AC_MSG_RESULT([not found])
        ])
])
m4trace:config/find_system_library.m4:9: -1- AC_DEFUN([ZFS_AC_FIND_SYSTEM_LIBRARY], [
    AC_REQUIRE([PKG_PROG_PKG_CONFIG])

    _header_found=
    _library_found=
    _pc_found=

    AS_IF([test -n "$2"], [PKG_CHECK_MODULES([$1], [$2], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])])

    # set _header_found/_library_found if the user passed in CFLAGS/LIBS
    AS_IF([test "x$[$1][_CFLAGS]" != x], [_header_found=1])
    AS_IF([test "x$[$1][_LIBS]" != x], [_library_found=1])

    AX_SAVE_FLAGS

    orig_CFLAGS="$CFLAGS"

    for _prefixdir in /usr /usr/local
    do
	AS_VAR_PUSHDEF([header_cache], [ac_cv_header_$3])
	AS_IF([test "x$_prefixdir" != "x/usr"], [
	    [$1][_CFLAGS]="-I$lt_sysroot$_prefixdir/include"
	    AS_IF([test "x$_library_found" = x], [
		[$1][_LIBS]="-L$lt_sysroot$_prefixdir/lib"
	    ])
	])
	CFLAGS="$orig_CFLAGS $[$1][_CFLAGS]"
	AS_UNSET([header_cache])
	AC_CHECK_HEADER([$3], [
	    _header_found=1
	    break
	], [AS_IF([test "x$_header_found" = "x1"], [
	    # if pkg-config or the user set CFLAGS, fail if the header is unusable
	    AC_MSG_FAILURE([header [$3] for library [$5] is not usable])
	])], [AC_INCLUDES_DEFAULT])
	# search for header under HEADER-PREFIXES
	m4_foreach_w([prefix], [$4], [
	    [$1][_CFLAGS]=["-I$lt_sysroot$_prefixdir/include/]prefix["]
	    CFLAGS="$orig_CFLAGS $[$1][_CFLAGS]"
	    AS_UNSET([header_cache])
	    AC_CHECK_HEADER([$3], [
		_header_found=1
		break
	    ], [], [AC_INCLUDES_DEFAULT])
	])
	AS_VAR_POPDEF([header_cache])
    done

    AS_IF([test "x$_header_found" = "x1"], [
	AS_IF([test "x$_library_found" = x], [
	    [$1][_LIBS]="$[$1]_LIBS -l[$5]"
	])
	LDFLAGS="$LDFLAGS $[$1][_LIBS]"

	_libcheck=1
	m4_ifval([$6],
	    [m4_foreach_w([func], [$6], [AC_CHECK_LIB([$5], func, [:], [_libcheck=])])],
	    [AC_CHECK_LIB([$5], [main], [:], [_libcheck=])])

	AS_IF([test "x$_libcheck" = "x1"], [_library_found=1],
	    [test "x$_library_found" = "x1"], [
	    # if pkg-config or the user set LIBS, fail if the library is unusable
	    AC_MSG_FAILURE([library [$5] is not usable])
	])
    ], [test "x$_library_found" = "x1"], [
	# if the user set LIBS, fail if we didn't find the header
	AC_MSG_FAILURE([cannot find header [$3] for library [$5]])
    ])

    AX_RESTORE_FLAGS

    AS_IF([test "x$_header_found" = "x1" && test "x$_library_found" = "x1"], [
	AC_SUBST([$1]_CFLAGS)
	AC_SUBST([$1]_LIBS)
	AS_IF([test "x$_pc_found" = "x1"], [
	    AC_SUBST([$1]_PC, [$2])
	])
	AC_DEFINE([HAVE_][$1], [1], [Define if you have [$5]])
	$7
    ],[dnl ELSE
	AC_SUBST([$1]_CFLAGS, [])
	AC_SUBST([$1]_LIBS, [])
	AC_MSG_WARN([cannot find [$5] via pkg-config or in the standard locations])
	$8
    ])
])
m4trace:config/gettext.m4:55: -1- AC_DEFUN([AM_GNU_GETTEXT], [
  dnl Argument checking.
  ifelse([$1], [], , [ifelse([$1], [external], , [ifelse([$1], [use-libtool], ,
    [errprint([ERROR: invalid first argument to AM_GNU_GETTEXT
])])])])
  ifelse(ifelse([$1], [], [old])[]ifelse([$1], [no-libtool], [old]), [old],
    [errprint([ERROR: Use of AM_GNU_GETTEXT without [external] argument is no longer supported.
])])
  ifelse([$2], [], , [ifelse([$2], [need-ngettext], , [ifelse([$2], [need-formatstring-macros], ,
    [errprint([ERROR: invalid second argument to AM_GNU_GETTEXT
])])])])
  define([gt_included_intl],
    ifelse([$1], [external], [no], [yes]))
  gt_NEEDS_INIT
  AM_GNU_GETTEXT_NEED([$2])

  AC_REQUIRE([AM_PO_SUBDIRS])dnl
  ifelse(gt_included_intl, yes, [
    AC_REQUIRE([AM_INTL_SUBDIR])dnl
  ])

  dnl Prerequisites of AC_LIB_LINKFLAGS_BODY.
  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])
  AC_REQUIRE([AC_LIB_RPATH])

  dnl Sometimes libintl requires libiconv, so first search for libiconv.
  dnl Ideally we would do this search only after the
  dnl      if test "$USE_NLS" = "yes"; then
  dnl        if { eval "gt_val=\$$gt_func_gnugettext_libc"; test "$gt_val" != "yes"; }; then
  dnl tests. But if configure.in invokes AM_ICONV after AM_GNU_GETTEXT
  dnl the configure script would need to contain the same shell code
  dnl again, outside any 'if'. There are two solutions:
  dnl - Invoke AM_ICONV_LINKFLAGS_BODY here, outside any 'if'.
  dnl - Control the expansions in more detail using AC_PROVIDE_IFELSE.
  dnl Since AC_PROVIDE_IFELSE is not documented, we avoid it.
  ifelse(gt_included_intl, yes, , [
    AC_REQUIRE([AM_ICONV_LINKFLAGS_BODY])
  ])

  dnl Sometimes, on Mac OS X, libintl requires linking with CoreFoundation.
  gt_INTL_MACOSX

  dnl Set USE_NLS.
  AC_REQUIRE([AM_NLS])

  ifelse(gt_included_intl, yes, [
    BUILD_INCLUDED_LIBINTL=no
    USE_INCLUDED_LIBINTL=no
  ])
  LIBINTL=
  LTLIBINTL=
  POSUB=

  dnl Add a version number to the cache macros.
  case " $gt_needs " in
    *" need-formatstring-macros "*) gt_api_version=3 ;;
    *" need-ngettext "*) gt_api_version=2 ;;
    *) gt_api_version=1 ;;
  esac
  gt_func_gnugettext_libc="gt_cv_func_gnugettext${gt_api_version}_libc"
  gt_func_gnugettext_libintl="gt_cv_func_gnugettext${gt_api_version}_libintl"

  dnl If we use NLS figure out what method
  if test "$USE_NLS" = "yes"; then
    gt_use_preinstalled_gnugettext=no
    ifelse(gt_included_intl, yes, [
      AC_MSG_CHECKING([whether included gettext is requested])
      AC_ARG_WITH([included-gettext],
        [  --with-included-gettext use the GNU gettext library included here],
        nls_cv_force_use_gnu_gettext=$withval,
        nls_cv_force_use_gnu_gettext=no)
      AC_MSG_RESULT([$nls_cv_force_use_gnu_gettext])

      nls_cv_use_gnu_gettext="$nls_cv_force_use_gnu_gettext"
      if test "$nls_cv_force_use_gnu_gettext" != "yes"; then
    ])
        dnl User does not insist on using GNU NLS library.  Figure out what
        dnl to use.  If GNU gettext is available we use this.  Else we have
        dnl to fall back to GNU NLS library.

        if test $gt_api_version -ge 3; then
          gt_revision_test_code='
#ifndef __GNU_GETTEXT_SUPPORTED_REVISION
#define __GNU_GETTEXT_SUPPORTED_REVISION(major) ((major) == 0 ? 0 : -1)
#endif
changequote(,)dnl
typedef int array [2 * (__GNU_GETTEXT_SUPPORTED_REVISION(0) >= 1) - 1];
changequote([,])dnl
'
        else
          gt_revision_test_code=
        fi
        if test $gt_api_version -ge 2; then
          gt_expression_test_code=' + * ngettext ("", "", 0)'
        else
          gt_expression_test_code=
        fi

        AC_CACHE_CHECK([for GNU gettext in libc], [$gt_func_gnugettext_libc],
         [AC_LINK_IFELSE(
            [AC_LANG_PROGRAM(
               [[
#include <libintl.h>
#ifndef __GNU_GETTEXT_SUPPORTED_REVISION
extern int _nl_msg_cat_cntr;
extern int *_nl_domain_bindings;
#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_domain_bindings)
#else
#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0
#endif
$gt_revision_test_code
               ]],
               [[
bindtextdomain ("", "");
return * gettext ("")$gt_expression_test_code + __GNU_GETTEXT_SYMBOL_EXPRESSION
               ]])],
            [eval "$gt_func_gnugettext_libc=yes"],
            [eval "$gt_func_gnugettext_libc=no"])])

        if { eval "gt_val=\$$gt_func_gnugettext_libc"; test "$gt_val" != "yes"; }; then
          dnl Sometimes libintl requires libiconv, so first search for libiconv.
          ifelse(gt_included_intl, yes, , [
            AM_ICONV_LINK
          ])
          dnl Search for libintl and define LIBINTL, LTLIBINTL and INCINTL
          dnl accordingly. Don't use AC_LIB_LINKFLAGS_BODY([intl],[iconv])
          dnl because that would add "-liconv" to LIBINTL and LTLIBINTL
          dnl even if libiconv doesn't exist.
          AC_LIB_LINKFLAGS_BODY([intl])
          AC_CACHE_CHECK([for GNU gettext in libintl],
            [$gt_func_gnugettext_libintl],
           [gt_save_CPPFLAGS="$CPPFLAGS"
            CPPFLAGS="$CPPFLAGS $INCINTL"
            gt_save_LIBS="$LIBS"
            LIBS="$LIBS $LIBINTL"
            dnl Now see whether libintl exists and does not depend on libiconv.
            AC_LINK_IFELSE(
              [AC_LANG_PROGRAM(
                 [[
#include <libintl.h>
#ifndef __GNU_GETTEXT_SUPPORTED_REVISION
extern int _nl_msg_cat_cntr;
extern
#ifdef __cplusplus
"C"
#endif
const char *_nl_expand_alias (const char *);
#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_expand_alias (""))
#else
#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0
#endif
$gt_revision_test_code
                 ]],
                 [[
bindtextdomain ("", "");
return * gettext ("")$gt_expression_test_code + __GNU_GETTEXT_SYMBOL_EXPRESSION
                 ]])],
              [eval "$gt_func_gnugettext_libintl=yes"],
              [eval "$gt_func_gnugettext_libintl=no"])
            dnl Now see whether libintl exists and depends on libiconv.
            if { eval "gt_val=\$$gt_func_gnugettext_libintl"; test "$gt_val" != yes; } && test -n "$LIBICONV"; then
              LIBS="$LIBS $LIBICONV"
              AC_LINK_IFELSE(
                [AC_LANG_PROGRAM(
                   [[
#include <libintl.h>
#ifndef __GNU_GETTEXT_SUPPORTED_REVISION
extern int _nl_msg_cat_cntr;
extern
#ifdef __cplusplus
"C"
#endif
const char *_nl_expand_alias (const char *);
#define __GNU_GETTEXT_SYMBOL_EXPRESSION (_nl_msg_cat_cntr + *_nl_expand_alias (""))
#else
#define __GNU_GETTEXT_SYMBOL_EXPRESSION 0
#endif
$gt_revision_test_code
                   ]],
                   [[
bindtextdomain ("", "");
return * gettext ("")$gt_expression_test_code + __GNU_GETTEXT_SYMBOL_EXPRESSION
                   ]])],
                [LIBINTL="$LIBINTL $LIBICONV"
                 LTLIBINTL="$LTLIBINTL $LTLIBICONV"
                 eval "$gt_func_gnugettext_libintl=yes"
                ])
            fi
            CPPFLAGS="$gt_save_CPPFLAGS"
            LIBS="$gt_save_LIBS"])
        fi

        dnl If an already present or preinstalled GNU gettext() is found,
        dnl use it.  But if this macro is used in GNU gettext, and GNU
        dnl gettext is already preinstalled in libintl, we update this
        dnl libintl.  (Cf. the install rule in intl/Makefile.in.)
        if { eval "gt_val=\$$gt_func_gnugettext_libc"; test "$gt_val" = "yes"; } \
           || { { eval "gt_val=\$$gt_func_gnugettext_libintl"; test "$gt_val" = "yes"; } \
                && test "$PACKAGE" != gettext-runtime \
                && test "$PACKAGE" != gettext-tools; }; then
          gt_use_preinstalled_gnugettext=yes
        else
          dnl Reset the values set by searching for libintl.
          LIBINTL=
          LTLIBINTL=
          INCINTL=
        fi

    ifelse(gt_included_intl, yes, [
        if test "$gt_use_preinstalled_gnugettext" != "yes"; then
          dnl GNU gettext is not found in the C library.
          dnl Fall back on included GNU gettext library.
          nls_cv_use_gnu_gettext=yes
        fi
      fi

      if test "$nls_cv_use_gnu_gettext" = "yes"; then
        dnl Mark actions used to generate GNU NLS library.
        BUILD_INCLUDED_LIBINTL=yes
        USE_INCLUDED_LIBINTL=yes
        LIBINTL="ifelse([$3],[],\${top_builddir}/intl,[$3])/libintl.la $LIBICONV $LIBTHREAD"
        LTLIBINTL="ifelse([$3],[],\${top_builddir}/intl,[$3])/libintl.la $LTLIBICONV $LTLIBTHREAD"
        LIBS=`echo " $LIBS " | sed -e 's/ -lintl / /' -e 's/^ //' -e 's/ $//'`
      fi

      CATOBJEXT=
      if test "$gt_use_preinstalled_gnugettext" = "yes" \
         || test "$nls_cv_use_gnu_gettext" = "yes"; then
        dnl Mark actions to use GNU gettext tools.
        CATOBJEXT=.gmo
      fi
    ])

    if test -n "$INTL_MACOSX_LIBS"; then
      if test "$gt_use_preinstalled_gnugettext" = "yes" \
         || test "$nls_cv_use_gnu_gettext" = "yes"; then
        dnl Some extra flags are needed during linking.
        LIBINTL="$LIBINTL $INTL_MACOSX_LIBS"
        LTLIBINTL="$LTLIBINTL $INTL_MACOSX_LIBS"
      fi
    fi

    if test "$gt_use_preinstalled_gnugettext" = "yes" \
       || test "$nls_cv_use_gnu_gettext" = "yes"; then
      AC_DEFINE([ENABLE_NLS], [1],
        [Define to 1 if translation of program messages to the user's native language
   is requested.])
    else
      USE_NLS=no
    fi
  fi

  AC_MSG_CHECKING([whether to use NLS])
  AC_MSG_RESULT([$USE_NLS])
  if test "$USE_NLS" = "yes"; then
    AC_MSG_CHECKING([where the gettext function comes from])
    if test "$gt_use_preinstalled_gnugettext" = "yes"; then
      if { eval "gt_val=\$$gt_func_gnugettext_libintl"; test "$gt_val" = "yes"; }; then
        gt_source="external libintl"
      else
        gt_source="libc"
      fi
    else
      gt_source="included intl directory"
    fi
    AC_MSG_RESULT([$gt_source])
  fi

  if test "$USE_NLS" = "yes"; then

    if test "$gt_use_preinstalled_gnugettext" = "yes"; then
      if { eval "gt_val=\$$gt_func_gnugettext_libintl"; test "$gt_val" = "yes"; }; then
        AC_MSG_CHECKING([how to link with libintl])
        AC_MSG_RESULT([$LIBINTL])
        AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCINTL])
      fi

      dnl For backward compatibility. Some packages may be using this.
      AC_DEFINE([HAVE_GETTEXT], [1],
       [Define if the GNU gettext() function is already present or preinstalled.])
      AC_DEFINE([HAVE_DCGETTEXT], [1],
       [Define if the GNU dcgettext() function is already present or preinstalled.])
    fi

    dnl We need to process the po/ directory.
    POSUB=po
  fi

  ifelse(gt_included_intl, yes, [
    dnl In GNU gettext we have to set BUILD_INCLUDED_LIBINTL to 'yes'
    dnl because some of the testsuite requires it.
    BUILD_INCLUDED_LIBINTL=yes

    dnl Make all variables we use known to autoconf.
    AC_SUBST([BUILD_INCLUDED_LIBINTL])
    AC_SUBST([USE_INCLUDED_LIBINTL])
    AC_SUBST([CATOBJEXT])
  ])

  dnl For backward compatibility. Some Makefiles may be using this.
  INTLLIBS="$LIBINTL"
  AC_SUBST([INTLLIBS])

  dnl Make all documented variables known to autoconf.
  AC_SUBST([LIBINTL])
  AC_SUBST([LTLIBINTL])
  AC_SUBST([POSUB])
])
m4trace:config/gettext.m4:375: -1- AC_DEFUN([AM_GNU_GETTEXT_NEED], [
  m4_divert_text([INIT_PREPARE], [gt_needs="$gt_needs $1"])
])
m4trace:config/gettext.m4:382: -1- AC_DEFUN([AM_GNU_GETTEXT_VERSION], [])
m4trace:config/gettext.m4:386: -1- AC_DEFUN([AM_GNU_GETTEXT_REQUIRE_VERSION], [])
m4trace:config/host-cpu-c-abi.m4:50: -1- AC_DEFUN([gl_HOST_CPU_C_ABI], [
  AC_REQUIRE([AC_CANONICAL_HOST])
  AC_REQUIRE([gl_C_ASM])
  AC_CACHE_CHECK([host CPU and C ABI], [gl_cv_host_cpu_c_abi],
    [case "$host_cpu" in

changequote(,)dnl
       i[4567]86 )
changequote([,])dnl
         gl_cv_host_cpu_c_abi=i386
         ;;

       x86_64 )
         # On x86_64 systems, the C compiler may be generating code in one of
         # these ABIs:
         # - 64-bit instruction set, 64-bit pointers, 64-bit 'long': x86_64.
         # - 64-bit instruction set, 64-bit pointers, 32-bit 'long': x86_64
         #   with native Windows (mingw, MSVC).
         # - 64-bit instruction set, 32-bit pointers, 32-bit 'long': x86_64-x32.
         # - 32-bit instruction set, 32-bit pointers, 32-bit 'long': i386.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#if (defined __x86_64__ || defined __amd64__ \
                     || defined _M_X64 || defined _M_AMD64)
                 int ok;
                #else
                 error fail
                #endif
              ]])],
           [AC_COMPILE_IFELSE(
              [AC_LANG_SOURCE(
                 [[#if defined __ILP32__ || defined _ILP32
                    int ok;
                   #else
                    error fail
                   #endif
                 ]])],
              [gl_cv_host_cpu_c_abi=x86_64-x32],
              [gl_cv_host_cpu_c_abi=x86_64])],
           [gl_cv_host_cpu_c_abi=i386])
         ;;

changequote(,)dnl
       alphaev[4-8] | alphaev56 | alphapca5[67] | alphaev6[78] )
changequote([,])dnl
         gl_cv_host_cpu_c_abi=alpha
         ;;

       arm* | aarch64 )
         # Assume arm with EABI.
         # On arm64 systems, the C compiler may be generating code in one of
         # these ABIs:
         # - aarch64 instruction set, 64-bit pointers, 64-bit 'long': arm64.
         # - aarch64 instruction set, 32-bit pointers, 32-bit 'long': arm64-ilp32.
         # - 32-bit instruction set, 32-bit pointers, 32-bit 'long': arm or armhf.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#ifdef __aarch64__
                 int ok;
                #else
                 error fail
                #endif
              ]])],
           [AC_COMPILE_IFELSE(
              [AC_LANG_SOURCE(
                [[#if defined __ILP32__ || defined _ILP32
                   int ok;
                  #else
                   error fail
                  #endif
                ]])],
              [gl_cv_host_cpu_c_abi=arm64-ilp32],
              [gl_cv_host_cpu_c_abi=arm64])],
           [# Don't distinguish little-endian and big-endian arm, since they
            # don't require different machine code for simple operations and
            # since the user can distinguish them through the preprocessor
            # defines __ARMEL__ vs. __ARMEB__.
            # But distinguish arm which passes floating-point arguments and
            # return values in integer registers (r0, r1, ...) - this is
            # gcc -mfloat-abi=soft or gcc -mfloat-abi=softfp - from arm which
            # passes them in float registers (s0, s1, ...) and double registers
            # (d0, d1, ...) - this is gcc -mfloat-abi=hard. GCC 4.6 or newer
            # sets the preprocessor defines __ARM_PCS (for the first case) and
            # __ARM_PCS_VFP (for the second case), but older GCC does not.
            echo 'double ddd; void func (double dd) { ddd = dd; }' > conftest.c
            # Look for a reference to the register d0 in the .s file.
            AC_TRY_COMMAND(${CC-cc} $CFLAGS $CPPFLAGS $gl_c_asm_opt conftest.c) >/dev/null 2>&1
            if LC_ALL=C grep 'd0,' conftest.$gl_asmext >/dev/null; then
              gl_cv_host_cpu_c_abi=armhf
            else
              gl_cv_host_cpu_c_abi=arm
            fi
            rm -f conftest*
           ])
         ;;

       hppa1.0 | hppa1.1 | hppa2.0* | hppa64 )
         # On hppa, the C compiler may be generating 32-bit code or 64-bit
         # code. In the latter case, it defines _LP64 and __LP64__.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#ifdef __LP64__
                 int ok;
                #else
                 error fail
                #endif
              ]])],
           [gl_cv_host_cpu_c_abi=hppa64],
           [gl_cv_host_cpu_c_abi=hppa])
         ;;

       ia64* )
         # On ia64 on HP-UX, the C compiler may be generating 64-bit code or
         # 32-bit code. In the latter case, it defines _ILP32.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#ifdef _ILP32
                 int ok;
                #else
                 error fail
                #endif
              ]])],
           [gl_cv_host_cpu_c_abi=ia64-ilp32],
           [gl_cv_host_cpu_c_abi=ia64])
         ;;

       mips* )
         # We should also check for (_MIPS_SZPTR == 64), but gcc keeps this
         # at 32.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#if defined _MIPS_SZLONG && (_MIPS_SZLONG == 64)
                 int ok;
                #else
                 error fail
                #endif
              ]])],
           [gl_cv_host_cpu_c_abi=mips64],
           [# In the n32 ABI, _ABIN32 is defined, _ABIO32 is not defined (but
            # may later get defined by <sgidefs.h>), and _MIPS_SIM == _ABIN32.
            # In the 32 ABI, _ABIO32 is defined, _ABIN32 is not defined (but
            # may later get defined by <sgidefs.h>), and _MIPS_SIM == _ABIO32.
            AC_COMPILE_IFELSE(
              [AC_LANG_SOURCE(
                 [[#if (_MIPS_SIM == _ABIN32)
                    int ok;
                   #else
                    error fail
                   #endif
                 ]])],
              [gl_cv_host_cpu_c_abi=mipsn32],
              [gl_cv_host_cpu_c_abi=mips])])
         ;;

       powerpc* )
         # Different ABIs are in use on AIX vs. Mac OS X vs. Linux,*BSD.
         # No need to distinguish them here; the caller may distinguish
         # them based on the OS.
         # On powerpc64 systems, the C compiler may still be generating
         # 32-bit code. And on powerpc-ibm-aix systems, the C compiler may
         # be generating 64-bit code.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#if defined __powerpc64__ || defined _ARCH_PPC64
                 int ok;
                #else
                 error fail
                #endif
              ]])],
           [# On powerpc64, there are two ABIs on Linux: The AIX compatible
            # one and the ELFv2 one. The latter defines _CALL_ELF=2.
            AC_COMPILE_IFELSE(
              [AC_LANG_SOURCE(
                 [[#if defined _CALL_ELF && _CALL_ELF == 2
                    int ok;
                   #else
                    error fail
                   #endif
                 ]])],
              [gl_cv_host_cpu_c_abi=powerpc64-elfv2],
              [gl_cv_host_cpu_c_abi=powerpc64])
           ],
           [gl_cv_host_cpu_c_abi=powerpc])
         ;;

       rs6000 )
         gl_cv_host_cpu_c_abi=powerpc
         ;;

       riscv32 | riscv64 )
         # There are 2 architectures (with variants): rv32* and rv64*.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#if __riscv_xlen == 64
                  int ok;
                #else
                  error fail
                #endif
              ]])],
           [cpu=riscv64],
           [cpu=riscv32])
         # There are 6 ABIs: ilp32, ilp32f, ilp32d, lp64, lp64f, lp64d.
         # Size of 'long' and 'void *':
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#if defined __LP64__
                  int ok;
                #else
                  error fail
                #endif
              ]])],
           [main_abi=lp64],
           [main_abi=ilp32])
         # Float ABIs:
         # __riscv_float_abi_double:
         #   'float' and 'double' are passed in floating-point registers.
         # __riscv_float_abi_single:
         #   'float' are passed in floating-point registers.
         # __riscv_float_abi_soft:
         #   No values are passed in floating-point registers.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#if defined __riscv_float_abi_double
                  int ok;
                #else
                  error fail
                #endif
              ]])],
           [float_abi=d],
           [AC_COMPILE_IFELSE(
              [AC_LANG_SOURCE(
                 [[#if defined __riscv_float_abi_single
                     int ok;
                   #else
                     error fail
                   #endif
                 ]])],
              [float_abi=f],
              [float_abi=''])
           ])
         gl_cv_host_cpu_c_abi="${cpu}-${main_abi}${float_abi}"
         ;;

       s390* )
         # On s390x, the C compiler may be generating 64-bit (= s390x) code
         # or 31-bit (= s390) code.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#if defined __LP64__ || defined __s390x__
                  int ok;
                #else
                  error fail
                #endif
              ]])],
           [gl_cv_host_cpu_c_abi=s390x],
           [gl_cv_host_cpu_c_abi=s390])
         ;;

       sparc | sparc64 )
         # UltraSPARCs running Linux have `uname -m` = "sparc64", but the
         # C compiler still generates 32-bit code.
         AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#if defined __sparcv9 || defined __arch64__
                 int ok;
                #else
                 error fail
                #endif
              ]])],
           [gl_cv_host_cpu_c_abi=sparc64],
           [gl_cv_host_cpu_c_abi=sparc])
         ;;

       *)
         gl_cv_host_cpu_c_abi="$host_cpu"
         ;;
     esac
    ])

  dnl In most cases, $HOST_CPU and $HOST_CPU_C_ABI are the same.
  HOST_CPU=`echo "$gl_cv_host_cpu_c_abi" | sed -e 's/-.*//'`
  HOST_CPU_C_ABI="$gl_cv_host_cpu_c_abi"
  AC_SUBST([HOST_CPU])
  AC_SUBST([HOST_CPU_C_ABI])

  # This was
  #   AC_DEFINE_UNQUOTED([__${HOST_CPU}__])
  #   AC_DEFINE_UNQUOTED([__${HOST_CPU_C_ABI}__])
  # earlier, but KAI C++ 3.2d doesn't like this.
  sed -e 's/-/_/g' >> confdefs.h <<EOF
#ifndef __${HOST_CPU}__
#define __${HOST_CPU}__ 1
#endif
#ifndef __${HOST_CPU_C_ABI}__
#define __${HOST_CPU_C_ABI}__ 1
#endif
EOF
  AH_TOP([/* CPU and C ABI indicator */
#ifndef __i386__
#undef __i386__
#endif
#ifndef __x86_64_x32__
#undef __x86_64_x32__
#endif
#ifndef __x86_64__
#undef __x86_64__
#endif
#ifndef __alpha__
#undef __alpha__
#endif
#ifndef __arm__
#undef __arm__
#endif
#ifndef __armhf__
#undef __armhf__
#endif
#ifndef __arm64_ilp32__
#undef __arm64_ilp32__
#endif
#ifndef __arm64__
#undef __arm64__
#endif
#ifndef __hppa__
#undef __hppa__
#endif
#ifndef __hppa64__
#undef __hppa64__
#endif
#ifndef __ia64_ilp32__
#undef __ia64_ilp32__
#endif
#ifndef __ia64__
#undef __ia64__
#endif
#ifndef __m68k__
#undef __m68k__
#endif
#ifndef __mips__
#undef __mips__
#endif
#ifndef __mipsn32__
#undef __mipsn32__
#endif
#ifndef __mips64__
#undef __mips64__
#endif
#ifndef __powerpc__
#undef __powerpc__
#endif
#ifndef __powerpc64__
#undef __powerpc64__
#endif
#ifndef __powerpc64_elfv2__
#undef __powerpc64_elfv2__
#endif
#ifndef __riscv32__
#undef __riscv32__
#endif
#ifndef __riscv64__
#undef __riscv64__
#endif
#ifndef __riscv32_ilp32__
#undef __riscv32_ilp32__
#endif
#ifndef __riscv32_ilp32f__
#undef __riscv32_ilp32f__
#endif
#ifndef __riscv32_ilp32d__
#undef __riscv32_ilp32d__
#endif
#ifndef __riscv64_ilp32__
#undef __riscv64_ilp32__
#endif
#ifndef __riscv64_ilp32f__
#undef __riscv64_ilp32f__
#endif
#ifndef __riscv64_ilp32d__
#undef __riscv64_ilp32d__
#endif
#ifndef __riscv64_lp64__
#undef __riscv64_lp64__
#endif
#ifndef __riscv64_lp64f__
#undef __riscv64_lp64f__
#endif
#ifndef __riscv64_lp64d__
#undef __riscv64_lp64d__
#endif
#ifndef __s390__
#undef __s390__
#endif
#ifndef __s390x__
#undef __s390x__
#endif
#ifndef __sh__
#undef __sh__
#endif
#ifndef __sparc__
#undef __sparc__
#endif
#ifndef __sparc64__
#undef __sparc64__
#endif
])

])
m4trace:config/host-cpu-c-abi.m4:462: -1- AC_DEFUN([gl_HOST_CPU_C_ABI_32BIT], [
  AC_REQUIRE([AC_CANONICAL_HOST])
  AC_CACHE_CHECK([32-bit host C ABI], [gl_cv_host_cpu_c_abi_32bit],
    [if test -n "$gl_cv_host_cpu_c_abi"; then
       case "$gl_cv_host_cpu_c_abi" in
         i386 | x86_64-x32 | arm | armhf | arm64-ilp32 | hppa | ia64-ilp32 | mips | mipsn32 | powerpc | riscv*-ilp32* | s390 | sparc)
           gl_cv_host_cpu_c_abi_32bit=yes ;;
         *)
           gl_cv_host_cpu_c_abi_32bit=no ;;
       esac
     else
       case "$host_cpu" in

changequote(,)dnl
         i[4567]86 )
changequote([,])dnl
           gl_cv_host_cpu_c_abi_32bit=yes
           ;;

         x86_64 )
           # On x86_64 systems, the C compiler may be generating code in one of
           # these ABIs:
           # - 64-bit instruction set, 64-bit pointers, 64-bit 'long': x86_64.
           # - 64-bit instruction set, 64-bit pointers, 32-bit 'long': x86_64
           #   with native Windows (mingw, MSVC).
           # - 64-bit instruction set, 32-bit pointers, 32-bit 'long': x86_64-x32.
           # - 32-bit instruction set, 32-bit pointers, 32-bit 'long': i386.
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#if (defined __x86_64__ || defined __amd64__ \
                       || defined _M_X64 || defined _M_AMD64) \
                      && !(defined __ILP32__ || defined _ILP32)
                   int ok;
                  #else
                   error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=no],
             [gl_cv_host_cpu_c_abi_32bit=yes])
           ;;

         arm* | aarch64 )
           # Assume arm with EABI.
           # On arm64 systems, the C compiler may be generating code in one of
           # these ABIs:
           # - aarch64 instruction set, 64-bit pointers, 64-bit 'long': arm64.
           # - aarch64 instruction set, 32-bit pointers, 32-bit 'long': arm64-ilp32.
           # - 32-bit instruction set, 32-bit pointers, 32-bit 'long': arm or armhf.
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#if defined __aarch64__ && !(defined __ILP32__ || defined _ILP32)
                   int ok;
                  #else
                   error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=no],
             [gl_cv_host_cpu_c_abi_32bit=yes])
           ;;

         hppa1.0 | hppa1.1 | hppa2.0* | hppa64 )
           # On hppa, the C compiler may be generating 32-bit code or 64-bit
           # code. In the latter case, it defines _LP64 and __LP64__.
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#ifdef __LP64__
                   int ok;
                  #else
                   error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=no],
             [gl_cv_host_cpu_c_abi_32bit=yes])
           ;;

         ia64* )
           # On ia64 on HP-UX, the C compiler may be generating 64-bit code or
           # 32-bit code. In the latter case, it defines _ILP32.
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#ifdef _ILP32
                   int ok;
                  #else
                   error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=yes],
             [gl_cv_host_cpu_c_abi_32bit=no])
           ;;

         mips* )
           # We should also check for (_MIPS_SZPTR == 64), but gcc keeps this
           # at 32.
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#if defined _MIPS_SZLONG && (_MIPS_SZLONG == 64)
                   int ok;
                  #else
                   error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=no],
             [gl_cv_host_cpu_c_abi_32bit=yes])
           ;;

         powerpc* )
           # Different ABIs are in use on AIX vs. Mac OS X vs. Linux,*BSD.
           # No need to distinguish them here; the caller may distinguish
           # them based on the OS.
           # On powerpc64 systems, the C compiler may still be generating
           # 32-bit code. And on powerpc-ibm-aix systems, the C compiler may
           # be generating 64-bit code.
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#if defined __powerpc64__ || defined _ARCH_PPC64
                   int ok;
                  #else
                   error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=no],
             [gl_cv_host_cpu_c_abi_32bit=yes])
           ;;

         rs6000 )
           gl_cv_host_cpu_c_abi_32bit=yes
           ;;

         riscv32 | riscv64 )
           # There are 6 ABIs: ilp32, ilp32f, ilp32d, lp64, lp64f, lp64d.
           # Size of 'long' and 'void *':
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#if defined __LP64__
                    int ok;
                  #else
                    error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=no],
             [gl_cv_host_cpu_c_abi_32bit=yes])
           ;;

         s390* )
           # On s390x, the C compiler may be generating 64-bit (= s390x) code
           # or 31-bit (= s390) code.
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#if defined __LP64__ || defined __s390x__
                    int ok;
                  #else
                    error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=no],
             [gl_cv_host_cpu_c_abi_32bit=yes])
           ;;

         sparc | sparc64 )
           # UltraSPARCs running Linux have `uname -m` = "sparc64", but the
           # C compiler still generates 32-bit code.
           AC_COMPILE_IFELSE(
             [AC_LANG_SOURCE(
                [[#if defined __sparcv9 || defined __arch64__
                   int ok;
                  #else
                   error fail
                  #endif
                ]])],
             [gl_cv_host_cpu_c_abi_32bit=no],
             [gl_cv_host_cpu_c_abi_32bit=yes])
           ;;

         *)
           gl_cv_host_cpu_c_abi_32bit=no
           ;;
       esac
     fi
    ])

  HOST_CPU_C_ABI_32BIT="$gl_cv_host_cpu_c_abi_32bit"
])
m4trace:config/iconv.m4:10: -1- AC_DEFUN([AM_ICONV_LINKFLAGS_BODY], [
  dnl Prerequisites of AC_LIB_LINKFLAGS_BODY.
  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])
  AC_REQUIRE([AC_LIB_RPATH])

  dnl Search for libiconv and define LIBICONV, LTLIBICONV and INCICONV
  dnl accordingly.
  AC_LIB_LINKFLAGS_BODY([iconv])
])
m4trace:config/iconv.m4:21: -1- AC_DEFUN([AM_ICONV_LINK], [
  dnl Some systems have iconv in libc, some have it in libiconv (OSF/1 and
  dnl those with the standalone portable GNU libiconv installed).
  AC_REQUIRE([AC_CANONICAL_HOST]) dnl for cross-compiles

  dnl Search for libiconv and define LIBICONV, LTLIBICONV and INCICONV
  dnl accordingly.
  AC_REQUIRE([AM_ICONV_LINKFLAGS_BODY])

  dnl Add $INCICONV to CPPFLAGS before performing the following checks,
  dnl so that if libiconv is installed, it will be used (unless disabled
  dnl via --without-libiconv-prefix).  The first AC_LINK_IFELSE will
  dnl then fail, the second AC_LINK_IFELSE will succeed.
  am_save_CPPFLAGS="$CPPFLAGS"
  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCICONV])

  AC_CACHE_CHECK([for iconv], [am_cv_func_iconv], [
    am_cv_func_iconv="no, consider installing GNU libiconv"
    am_cv_lib_iconv=no
    AC_LINK_IFELSE(
      [AC_LANG_PROGRAM(
         [[
#include <stdlib.h>
#include <iconv.h>
         ]],
         [[iconv_t cd = iconv_open("","");
           iconv(cd,NULL,NULL,NULL,NULL);
           iconv_close(cd);]])],
      [am_cv_func_iconv=yes])
    if test "$am_cv_func_iconv" != yes; then
      am_save_LIBS="$LIBS"
      LIBS="$LIBS $LIBICONV"
      AC_LINK_IFELSE(
        [AC_LANG_PROGRAM(
           [[
#include <stdlib.h>
#include <iconv.h>
           ]],
           [[iconv_t cd = iconv_open("","");
             iconv(cd,NULL,NULL,NULL,NULL);
             iconv_close(cd);]])],
        [am_cv_lib_iconv=yes]
        [am_cv_func_iconv=yes])
      LIBS="$am_save_LIBS"
    fi
  ])
  if test "$am_cv_func_iconv" = yes; then
    AC_CACHE_CHECK([for working iconv], [am_cv_func_iconv_works], [
      dnl This tests against bugs in AIX 5.1, AIX 6.1..7.1, HP-UX 11.11,
      dnl Solaris 10.
      am_save_LIBS="$LIBS"
      if test $am_cv_lib_iconv = yes; then
        LIBS="$LIBS $LIBICONV"
      fi
      am_cv_func_iconv_works=no
      for ac_iconv_const in '' 'const'; do
        AC_RUN_IFELSE(
          [AC_LANG_PROGRAM(
             [[
#include <iconv.h>
#include <string.h>

#ifndef ICONV_CONST
# define ICONV_CONST $ac_iconv_const
#endif
             ]],
             [[int result = 0;
  /* Test against AIX 5.1 bug: Failures are not distinguishable from successful
     returns.  */
  {
    iconv_t cd_utf8_to_88591 = iconv_open ("ISO8859-1", "UTF-8");
    if (cd_utf8_to_88591 != (iconv_t)(-1))
      {
        static ICONV_CONST char input[] = "\342\202\254"; /* EURO SIGN */
        char buf[10];
        ICONV_CONST char *inptr = input;
        size_t inbytesleft = strlen (input);
        char *outptr = buf;
        size_t outbytesleft = sizeof (buf);
        size_t res = iconv (cd_utf8_to_88591,
                            &inptr, &inbytesleft,
                            &outptr, &outbytesleft);
        if (res == 0)
          result |= 1;
        iconv_close (cd_utf8_to_88591);
      }
  }
  /* Test against Solaris 10 bug: Failures are not distinguishable from
     successful returns.  */
  {
    iconv_t cd_ascii_to_88591 = iconv_open ("ISO8859-1", "646");
    if (cd_ascii_to_88591 != (iconv_t)(-1))
      {
        static ICONV_CONST char input[] = "\263";
        char buf[10];
        ICONV_CONST char *inptr = input;
        size_t inbytesleft = strlen (input);
        char *outptr = buf;
        size_t outbytesleft = sizeof (buf);
        size_t res = iconv (cd_ascii_to_88591,
                            &inptr, &inbytesleft,
                            &outptr, &outbytesleft);
        if (res == 0)
          result |= 2;
        iconv_close (cd_ascii_to_88591);
      }
  }
  /* Test against AIX 6.1..7.1 bug: Buffer overrun.  */
  {
    iconv_t cd_88591_to_utf8 = iconv_open ("UTF-8", "ISO-8859-1");
    if (cd_88591_to_utf8 != (iconv_t)(-1))
      {
        static ICONV_CONST char input[] = "\304";
        static char buf[2] = { (char)0xDE, (char)0xAD };
        ICONV_CONST char *inptr = input;
        size_t inbytesleft = 1;
        char *outptr = buf;
        size_t outbytesleft = 1;
        size_t res = iconv (cd_88591_to_utf8,
                            &inptr, &inbytesleft,
                            &outptr, &outbytesleft);
        if (res != (size_t)(-1) || outptr - buf > 1 || buf[1] != (char)0xAD)
          result |= 4;
        iconv_close (cd_88591_to_utf8);
      }
  }
#if 0 /* This bug could be worked around by the caller.  */
  /* Test against HP-UX 11.11 bug: Positive return value instead of 0.  */
  {
    iconv_t cd_88591_to_utf8 = iconv_open ("utf8", "iso88591");
    if (cd_88591_to_utf8 != (iconv_t)(-1))
      {
        static ICONV_CONST char input[] = "\304rger mit b\366sen B\374bchen ohne Augenma\337";
        char buf[50];
        ICONV_CONST char *inptr = input;
        size_t inbytesleft = strlen (input);
        char *outptr = buf;
        size_t outbytesleft = sizeof (buf);
        size_t res = iconv (cd_88591_to_utf8,
                            &inptr, &inbytesleft,
                            &outptr, &outbytesleft);
        if ((int)res > 0)
          result |= 8;
        iconv_close (cd_88591_to_utf8);
      }
  }
#endif
  /* Test against HP-UX 11.11 bug: No converter from EUC-JP to UTF-8 is
     provided.  */
  {
    /* Try standardized names.  */
    iconv_t cd1 = iconv_open ("UTF-8", "EUC-JP");
    /* Try IRIX, OSF/1 names.  */
    iconv_t cd2 = iconv_open ("UTF-8", "eucJP");
    /* Try AIX names.  */
    iconv_t cd3 = iconv_open ("UTF-8", "IBM-eucJP");
    /* Try HP-UX names.  */
    iconv_t cd4 = iconv_open ("utf8", "eucJP");
    if (cd1 == (iconv_t)(-1) && cd2 == (iconv_t)(-1)
        && cd3 == (iconv_t)(-1) && cd4 == (iconv_t)(-1))
      result |= 16;
    if (cd1 != (iconv_t)(-1))
      iconv_close (cd1);
    if (cd2 != (iconv_t)(-1))
      iconv_close (cd2);
    if (cd3 != (iconv_t)(-1))
      iconv_close (cd3);
    if (cd4 != (iconv_t)(-1))
      iconv_close (cd4);
  }
  return result;
]])],
          [am_cv_func_iconv_works=yes], ,
          [case "$host_os" in
             aix* | hpux*) am_cv_func_iconv_works="guessing no" ;;
             *)            am_cv_func_iconv_works="guessing yes" ;;
           esac])
        test "$am_cv_func_iconv_works" = no || break
      done
      LIBS="$am_save_LIBS"
    ])
    case "$am_cv_func_iconv_works" in
      *no) am_func_iconv=no am_cv_lib_iconv=no ;;
      *)   am_func_iconv=yes ;;
    esac
  else
    am_func_iconv=no am_cv_lib_iconv=no
  fi
  if test "$am_func_iconv" = yes; then
    AC_DEFINE([HAVE_ICONV], [1],
      [Define if you have the iconv() function and it works.])
  fi
  if test "$am_cv_lib_iconv" = yes; then
    AC_MSG_CHECKING([how to link with libiconv])
    AC_MSG_RESULT([$LIBICONV])
  else
    dnl If $LIBICONV didn't lead to a usable library, we don't need $INCICONV
    dnl either.
    CPPFLAGS="$am_save_CPPFLAGS"
    LIBICONV=
    LTLIBICONV=
  fi
  AC_SUBST([LIBICONV])
  AC_SUBST([LTLIBICONV])
])
m4trace:config/iconv.m4:246: -1- AC_DEFUN_ONCE([AM_ICONV], [
  AM_ICONV_LINK
  if test "$am_cv_func_iconv" = yes; then
    AC_MSG_CHECKING([for iconv declaration])
    AC_CACHE_VAL([am_cv_proto_iconv], [
      AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM(
           [[
#include <stdlib.h>
#include <iconv.h>
extern
#ifdef __cplusplus
"C"
#endif
#if defined(__STDC__) || defined(_MSC_VER) || defined(__cplusplus)
size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);
#else
size_t iconv();
#endif
           ]],
           [[]])],
        [am_cv_proto_iconv_arg1=""],
        [am_cv_proto_iconv_arg1="const"])
      am_cv_proto_iconv="extern size_t iconv (iconv_t cd, $am_cv_proto_iconv_arg1 char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);"])
    am_cv_proto_iconv=`echo "[$]am_cv_proto_iconv" | tr -s ' ' | sed -e 's/( /(/'`
    AC_MSG_RESULT([$am_cv_proto_iconv])
  else
    dnl When compiling GNU libiconv on a system that does not have iconv yet,
    dnl pick the POSIX compliant declaration without 'const'.
    am_cv_proto_iconv_arg1=""
  fi
  AC_DEFINE_UNQUOTED([ICONV_CONST], [$am_cv_proto_iconv_arg1],
    [Define as const if the declaration of iconv() needs const.])
  dnl Also substitute ICONV_CONST in the gnulib generated <iconv.h>.
  m4_ifdef([gl_ICONV_H_DEFAULTS],
    [AC_REQUIRE([gl_ICONV_H_DEFAULTS])
     if test -n "$am_cv_proto_iconv_arg1"; then
       ICONV_CONST="const"
     fi
    ])
])
m4trace:config/intlmacosx.m4:18: -1- AC_DEFUN([gt_INTL_MACOSX], [
  dnl Check for API introduced in Mac OS X 10.4.
  AC_CACHE_CHECK([for CFPreferencesCopyAppValue],
    [gt_cv_func_CFPreferencesCopyAppValue],
    [gt_save_LIBS="$LIBS"
     LIBS="$LIBS -Wl,-framework -Wl,CoreFoundation"
     AC_LINK_IFELSE(
       [AC_LANG_PROGRAM(
          [[#include <CoreFoundation/CFPreferences.h>]],
          [[CFPreferencesCopyAppValue(NULL, NULL)]])],
       [gt_cv_func_CFPreferencesCopyAppValue=yes],
       [gt_cv_func_CFPreferencesCopyAppValue=no])
     LIBS="$gt_save_LIBS"])
  if test $gt_cv_func_CFPreferencesCopyAppValue = yes; then
    AC_DEFINE([HAVE_CFPREFERENCESCOPYAPPVALUE], [1],
      [Define to 1 if you have the Mac OS X function CFPreferencesCopyAppValue in the CoreFoundation framework.])
  fi
  dnl Check for API introduced in Mac OS X 10.5.
  AC_CACHE_CHECK([for CFLocaleCopyCurrent], [gt_cv_func_CFLocaleCopyCurrent],
    [gt_save_LIBS="$LIBS"
     LIBS="$LIBS -Wl,-framework -Wl,CoreFoundation"
     AC_LINK_IFELSE(
       [AC_LANG_PROGRAM(
          [[#include <CoreFoundation/CFLocale.h>]],
          [[CFLocaleCopyCurrent();]])],
       [gt_cv_func_CFLocaleCopyCurrent=yes],
       [gt_cv_func_CFLocaleCopyCurrent=no])
     LIBS="$gt_save_LIBS"])
  if test $gt_cv_func_CFLocaleCopyCurrent = yes; then
    AC_DEFINE([HAVE_CFLOCALECOPYCURRENT], [1],
      [Define to 1 if you have the Mac OS X function CFLocaleCopyCurrent in the CoreFoundation framework.])
  fi
  AC_CACHE_CHECK([for CFLocaleCopyPreferredLanguages], [gt_cv_func_CFLocaleCopyPreferredLanguages],
    [gt_save_LIBS="$LIBS"
     LIBS="$LIBS -Wl,-framework -Wl,CoreFoundation"
     AC_LINK_IFELSE(
       [AC_LANG_PROGRAM(
          [[#include <CoreFoundation/CFLocale.h>]],
          [[CFLocaleCopyPreferredLanguages();]])],
       [gt_cv_func_CFLocaleCopyPreferredLanguages=yes],
       [gt_cv_func_CFLocaleCopyPreferredLanguages=no])
     LIBS="$gt_save_LIBS"])
  if test $gt_cv_func_CFLocaleCopyPreferredLanguages = yes; then
    AC_DEFINE([HAVE_CFLOCALECOPYPREFERREDLANGUAGES], [1],
      [Define to 1 if you have the Mac OS X function CFLocaleCopyPreferredLanguages in the CoreFoundation framework.])
  fi
  INTL_MACOSX_LIBS=
  if test $gt_cv_func_CFPreferencesCopyAppValue = yes \
     || test $gt_cv_func_CFLocaleCopyCurrent = yes \
     || test $gt_cv_func_CFLocaleCopyPreferredLanguages = yes; then
    INTL_MACOSX_LIBS="-Wl,-framework -Wl,CoreFoundation"
  fi
  AC_SUBST([INTL_MACOSX_LIBS])
])
m4trace:config/kernel-access-ok-type.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_ACCESS_OK_TYPE], [
	ZFS_LINUX_TEST_SRC([access_ok_type], [
		#include <linux/uaccess.h>
	],[
		const void __user __attribute__((unused)) *addr =
		    (void *) 0xdeadbeef;
		unsigned long __attribute__((unused)) size = 1;
		int error __attribute__((unused)) = access_ok(0, addr, size);
	])
])
m4trace:config/kernel-access-ok-type.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_ACCESS_OK_TYPE], [
	AC_MSG_CHECKING([whether access_ok() has 'type' parameter])
	ZFS_LINUX_TEST_RESULT([access_ok_type], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ACCESS_OK_TYPE, 1,
		    [kernel has access_ok with 'type' parameter])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-acl.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_POSIX_ACL_RELEASE], [
	ZFS_LINUX_TEST_SRC([posix_acl_release], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		struct posix_acl *tmp = posix_acl_alloc(1, 0);
		posix_acl_release(tmp);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-acl.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_POSIX_ACL_RELEASE], [
	AC_MSG_CHECKING([whether posix_acl_release() is available])
	ZFS_LINUX_TEST_RESULT([posix_acl_release], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_RELEASE, 1,
		    [posix_acl_release() is available])

		AC_MSG_CHECKING([whether posix_acl_release() is GPL-only])
		ZFS_LINUX_TEST_RESULT([posix_acl_release_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_RELEASE_GPL_ONLY, 1,
			    [posix_acl_release() is GPL-only])
		])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-acl.m4:43: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SET_CACHED_ACL_USABLE], [
	ZFS_LINUX_TEST_SRC([set_cached_acl], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		struct inode *ip = NULL;
		struct posix_acl *acl = posix_acl_alloc(1, 0);
		set_cached_acl(ip, ACL_TYPE_ACCESS, acl);
		forget_cached_acl(ip, ACL_TYPE_ACCESS);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-acl.m4:56: -1- AC_DEFUN([ZFS_AC_KERNEL_SET_CACHED_ACL_USABLE], [
	AC_MSG_CHECKING([whether set_cached_acl() is usable])
	ZFS_LINUX_TEST_RESULT([set_cached_acl_license], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_CACHED_ACL_USABLE, 1,
		    [set_cached_acl() is usable])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-acl.m4:74: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_POSIX_ACL_CHMOD], [
	ZFS_LINUX_TEST_SRC([posix_acl_chmod], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	],[
		posix_acl_chmod(NULL, 0, 0)
	])

	ZFS_LINUX_TEST_SRC([__posix_acl_chmod], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	],[
		__posix_acl_chmod(NULL, 0, 0)
	])
])
m4trace:config/kernel-acl.m4:90: -1- AC_DEFUN([ZFS_AC_KERNEL_POSIX_ACL_CHMOD], [
	AC_MSG_CHECKING([whether __posix_acl_chmod exists])
	ZFS_LINUX_TEST_RESULT([__posix_acl_chmod], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE___POSIX_ACL_CHMOD, 1,
		    [__posix_acl_chmod() exists])
	],[
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether posix_acl_chmod exists])
		ZFS_LINUX_TEST_RESULT([posix_acl_chmod], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_CHMOD, 1,
			    [posix_acl_chmod() exists])
		],[
			ZFS_LINUX_TEST_ERROR([posix_acl_chmod()])
		])
	])
])
m4trace:config/kernel-acl.m4:114: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_POSIX_ACL_EQUIV_MODE_WANTS_UMODE_T], [
	ZFS_LINUX_TEST_SRC([posix_acl_equiv_mode], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	],[
		umode_t tmp;
		posix_acl_equiv_mode(NULL, &tmp);
	])
])
m4trace:config/kernel-acl.m4:124: -1- AC_DEFUN([ZFS_AC_KERNEL_POSIX_ACL_EQUIV_MODE_WANTS_UMODE_T], [
	AC_MSG_CHECKING([whether posix_acl_equiv_mode() wants umode_t])
	ZFS_LINUX_TEST_RESULT([posix_acl_equiv_mode], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([posix_acl_equiv_mode()])
	])
])
m4trace:config/kernel-acl.m4:137: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_POSIX_ACL_VALID_WITH_NS], [
	ZFS_LINUX_TEST_SRC([posix_acl_valid_with_ns], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	],[
		struct user_namespace *user_ns = NULL;
		const struct posix_acl *acl = NULL;
		int error;

		error = posix_acl_valid(user_ns, acl);
	])
])
m4trace:config/kernel-acl.m4:150: -1- AC_DEFUN([ZFS_AC_KERNEL_POSIX_ACL_VALID_WITH_NS], [
	AC_MSG_CHECKING([whether posix_acl_valid() wants user namespace])
	ZFS_LINUX_TEST_RESULT([posix_acl_valid_with_ns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_VALID_WITH_NS, 1,
		    [posix_acl_valid() wants user namespace])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-acl.m4:171: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_OPERATIONS_GET_ACL], [
	ZFS_LINUX_TEST_SRC([inode_operations_get_acl], [
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type)
		    { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	],[])

	ZFS_LINUX_TEST_SRC([inode_operations_get_acl_rcu], [
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	],[])

	ZFS_LINUX_TEST_SRC([inode_operations_get_inode_acl], [
		#include <linux/fs.h>

		struct posix_acl *get_inode_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_inode_acl = get_inode_acl_fn,
		};
	],[])
])
m4trace:config/kernel-acl.m4:209: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_OPERATIONS_GET_ACL], [
	AC_MSG_CHECKING([whether iops->get_acl() exists])
	ZFS_LINUX_TEST_RESULT([inode_operations_get_acl], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GET_ACL, 1, [iops->get_acl() exists])
	],[
		ZFS_LINUX_TEST_RESULT([inode_operations_get_acl_rcu], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_ACL_RCU, 1, [iops->get_acl() takes rcu])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_get_inode_acl], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_GET_INODE_ACL, 1, [has iops->get_inode_acl()])
			],[
				ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
			])
		])
	])
])
m4trace:config/kernel-acl.m4:242: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_OPERATIONS_SET_ACL], [
	ZFS_LINUX_TEST_SRC([inode_operations_set_acl_mnt_idmap_dentry], [
		#include <linux/fs.h>

		int set_acl_fn(struct mnt_idmap *idmap,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	],[])
	ZFS_LINUX_TEST_SRC([inode_operations_set_acl_userns_dentry], [
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	],[])
	ZFS_LINUX_TEST_SRC([inode_operations_set_acl_userns], [
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	],[])
	ZFS_LINUX_TEST_SRC([inode_operations_set_acl], [
		#include <linux/fs.h>

		int set_acl_fn(struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	],[])
])
m4trace:config/kernel-acl.m4:292: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_OPERATIONS_SET_ACL], [
	AC_MSG_CHECKING([whether iops->set_acl() exists])
	ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
		AC_DEFINE(HAVE_SET_ACL_USERNS, 1, [iops->set_acl() takes 4 args])
	],[
		ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_mnt_idmap_dentry], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
			AC_DEFINE(HAVE_SET_ACL_IDMAP_DENTRY, 1,
			    [iops->set_acl() takes 4 args, arg1 is struct mnt_idmap *])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
				AC_DEFINE(HAVE_SET_ACL_USERNS_DENTRY_ARG2, 1,
				    [iops->set_acl() takes 4 args, arg2 is struct dentry *])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
			])
		])
	])
])
m4trace:config/kernel-acl.m4:328: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GET_ACL_HANDLE_CACHE], [
	ZFS_LINUX_TEST_SRC([get_acl_handle_cache], [
		#include <linux/fs.h>
	],[
		void *sentinel __attribute__ ((unused)) =
		    uncached_acl_sentinel(NULL);
	])
])
m4trace:config/kernel-acl.m4:337: -1- AC_DEFUN([ZFS_AC_KERNEL_GET_ACL_HANDLE_CACHE], [
	AC_MSG_CHECKING([whether uncached_acl_sentinel() exists])
	ZFS_LINUX_TEST_RESULT([get_acl_handle_cache], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_GET_ACL_HANDLE_CACHE, 1,
		    [uncached_acl_sentinel() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-acl.m4:352: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_ACL_HAS_REFCOUNT], [
	ZFS_LINUX_TEST_SRC([acl_refcount], [
		#include <linux/backing-dev.h>
		#include <linux/refcount.h>
		#include <linux/posix_acl.h>
	],[
		struct posix_acl acl;
		refcount_t *r __attribute__ ((unused)) = &acl.a_refcount;
	])
])
m4trace:config/kernel-acl.m4:363: -1- AC_DEFUN([ZFS_AC_KERNEL_ACL_HAS_REFCOUNT], [
	AC_MSG_CHECKING([whether posix_acl has refcount_t])
	ZFS_LINUX_TEST_RESULT([acl_refcount], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ACL_REFCOUNT, 1, [posix_acl has refcount_t])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-acl.m4:373: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_ACL], [
	ZFS_AC_KERNEL_SRC_POSIX_ACL_RELEASE
	ZFS_AC_KERNEL_SRC_SET_CACHED_ACL_USABLE
	ZFS_AC_KERNEL_SRC_POSIX_ACL_CHMOD
	ZFS_AC_KERNEL_SRC_POSIX_ACL_EQUIV_MODE_WANTS_UMODE_T
	ZFS_AC_KERNEL_SRC_POSIX_ACL_VALID_WITH_NS
	ZFS_AC_KERNEL_SRC_INODE_OPERATIONS_GET_ACL
	ZFS_AC_KERNEL_SRC_INODE_OPERATIONS_SET_ACL
	ZFS_AC_KERNEL_SRC_GET_ACL_HANDLE_CACHE
	ZFS_AC_KERNEL_SRC_ACL_HAS_REFCOUNT
])
m4trace:config/kernel-acl.m4:385: -1- AC_DEFUN([ZFS_AC_KERNEL_ACL], [
	ZFS_AC_KERNEL_POSIX_ACL_RELEASE
	ZFS_AC_KERNEL_SET_CACHED_ACL_USABLE
	ZFS_AC_KERNEL_POSIX_ACL_CHMOD
	ZFS_AC_KERNEL_POSIX_ACL_EQUIV_MODE_WANTS_UMODE_T
	ZFS_AC_KERNEL_POSIX_ACL_VALID_WITH_NS
	ZFS_AC_KERNEL_INODE_OPERATIONS_GET_ACL
	ZFS_AC_KERNEL_INODE_OPERATIONS_SET_ACL
	ZFS_AC_KERNEL_GET_ACL_HANDLE_CACHE
	ZFS_AC_KERNEL_ACL_HAS_REFCOUNT
])
m4trace:config/kernel-add-disk.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_ADD_DISK], [
	ZFS_LINUX_TEST_SRC([add_disk_ret], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		int error __attribute__ ((unused)) = add_disk(disk);
	])
])
m4trace:config/kernel-add-disk.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_ADD_DISK], [
	AC_MSG_CHECKING([whether add_disk() returns int])
	ZFS_LINUX_TEST_RESULT([add_disk_ret],
	[
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ADD_DISK_RET, 1,
		    [add_disk() returns int])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-aio-fsync.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_AIO_FSYNC], [
	ZFS_LINUX_TEST_SRC([aio_fsync], [
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.aio_fsync = NULL,
		};
	],[])
])
m4trace:config/kernel-aio-fsync.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_AIO_FSYNC], [
	AC_MSG_CHECKING([whether fops->aio_fsync() exists])
	ZFS_LINUX_TEST_RESULT([aio_fsync], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_AIO_FSYNC, 1, [fops->aio_fsync() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-automount.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_AUTOMOUNT], [
	ZFS_LINUX_TEST_SRC([dentry_operations_d_automount], [
		#include <linux/dcache.h>
		struct vfsmount *d_automount(struct path *p) { return NULL; }
		struct dentry_operations dops __attribute__ ((unused)) = {
			.d_automount = d_automount,
		};
	])
])
m4trace:config/kernel-automount.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_AUTOMOUNT], [
	AC_MSG_CHECKING([whether dops->d_automount() exists])
	ZFS_LINUX_TEST_RESULT([dentry_operations_d_automount], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([dops->d_automount()])
	])
])
m4trace:config/kernel-bdi.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BDI], [
	ZFS_LINUX_TEST_SRC([super_setup_bdi_name], [
		#include <linux/fs.h>
		struct super_block sb;
	], [
		char *name = "bdi";
		atomic_long_t zfs_bdi_seq;
		int error __attribute__((unused));
		atomic_long_set(&zfs_bdi_seq, 0);
		error =
		    super_setup_bdi_name(&sb, "%.28s-%ld", name,
		    atomic_long_inc_return(&zfs_bdi_seq));
	])

	ZFS_LINUX_TEST_SRC([bdi_setup_and_register], [
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	], [
		char *name = "bdi";
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name);
	])

	ZFS_LINUX_TEST_SRC([bdi_setup_and_register_3args], [
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	], [
		char *name = "bdi";
		unsigned int cap = BDI_CAP_MAP_COPY;
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name, cap);
	])
])
m4trace:config/kernel-bdi.m4:38: -1- AC_DEFUN([ZFS_AC_KERNEL_BDI], [
	dnl #
	dnl # 4.12, super_setup_bdi_name() introduced.
	dnl #
	AC_MSG_CHECKING([whether super_setup_bdi_name() exists])
	ZFS_LINUX_TEST_RESULT_SYMBOL([super_setup_bdi_name],
	    [super_setup_bdi_name], [fs/super.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SUPER_SETUP_BDI_NAME, 1,
                    [super_setup_bdi_name() exits])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 4.0 - 4.11, bdi_setup_and_register() takes 2 arguments.
		dnl #
		AC_MSG_CHECKING(
		    [whether bdi_setup_and_register() wants 2 args])
		ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register],
		    [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
	])
])
m4trace:config/kernel-bio.m4:10: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_REQ], [
	ZFS_LINUX_TEST_SRC([req_failfast_mask], [
		#include <linux/bio.h>
	],[
		int flags __attribute__ ((unused));
		flags = REQ_FAILFAST_MASK;
	])

	ZFS_LINUX_TEST_SRC([req_discard], [
		#include <linux/bio.h>
	],[
		int flags __attribute__ ((unused));
		flags = REQ_DISCARD;
	])

	ZFS_LINUX_TEST_SRC([req_flush], [
		#include <linux/bio.h>
	],[
		int flags __attribute__ ((unused));
		flags = REQ_FLUSH;
	])

	ZFS_LINUX_TEST_SRC([req_preflush], [
		#include <linux/bio.h>
	],[
		int flags __attribute__ ((unused));
		flags = REQ_PREFLUSH;
	])
])
m4trace:config/kernel-bio.m4:40: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_REQ_FAILFAST_MASK], [
	AC_MSG_CHECKING([whether REQ_FAILFAST_MASK is defined])
	ZFS_LINUX_TEST_RESULT([req_failfast_mask], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([REQ_FAILFAST_MASK])
	])
])
m4trace:config/kernel-bio.m4:49: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_REQ_DISCARD], [
	AC_MSG_CHECKING([whether REQ_DISCARD is defined])
	ZFS_LINUX_TEST_RESULT([req_discard], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_DISCARD, 1, [REQ_DISCARD is defined])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:59: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_REQ_FLUSH], [
	AC_MSG_CHECKING([whether REQ_FLUSH is defined])
	ZFS_LINUX_TEST_RESULT([req_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_FLUSH, 1, [REQ_FLUSH is defined])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:69: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_REQ_PREFLUSH], [
	AC_MSG_CHECKING([whether REQ_PREFLUSH is defined])
	ZFS_LINUX_TEST_RESULT([req_preflush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_PREFLUSH, 1, [REQ_PREFLUSH is defined])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:86: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_OPS], [
	ZFS_LINUX_TEST_SRC([req_op_discard], [
		#include <linux/blk_types.h>
	],[
		int op __attribute__ ((unused)) = REQ_OP_DISCARD;
	])

	ZFS_LINUX_TEST_SRC([req_op_secure_erase], [
		#include <linux/blk_types.h>
	],[
		int op __attribute__ ((unused)) = REQ_OP_SECURE_ERASE;
	])

	ZFS_LINUX_TEST_SRC([req_op_flush], [
		#include <linux/blk_types.h>
	],[
		int op __attribute__ ((unused)) = REQ_OP_FLUSH;
	])

	ZFS_LINUX_TEST_SRC([bio_bi_opf], [
		#include <linux/bio.h>
	],[
		struct bio bio __attribute__ ((unused));
		bio.bi_opf = 0;
	])

	ZFS_LINUX_TEST_SRC([bio_set_op_attrs], [
		#include <linux/bio.h>
	],[
		struct bio *bio __attribute__ ((unused)) = NULL;
		bio_set_op_attrs(bio, 0, 0);
	])
])
m4trace:config/kernel-bio.m4:120: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_REQ_OP_DISCARD], [
	AC_MSG_CHECKING([whether REQ_OP_DISCARD is defined])
	ZFS_LINUX_TEST_RESULT([req_op_discard], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_DISCARD, 1, [REQ_OP_DISCARD is defined])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:130: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_REQ_OP_SECURE_ERASE], [
	AC_MSG_CHECKING([whether REQ_OP_SECURE_ERASE is defined])
	ZFS_LINUX_TEST_RESULT([req_op_secure_erase], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_SECURE_ERASE, 1,
		    [REQ_OP_SECURE_ERASE is defined])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:141: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_REQ_OP_FLUSH], [
	AC_MSG_CHECKING([whether REQ_OP_FLUSH is defined])
	ZFS_LINUX_TEST_RESULT([req_op_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_FLUSH, 1, [REQ_OP_FLUSH is defined])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:151: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_BI_OPF], [
	AC_MSG_CHECKING([whether bio->bi_opf is defined])
	ZFS_LINUX_TEST_RESULT([bio_bi_opf], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BI_OPF, 1, [bio->bi_opf is defined])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:161: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_SET_OP_ATTRS], [
	AC_MSG_CHECKING([whether bio_set_op_attrs is available])
	ZFS_LINUX_TEST_RESULT([bio_set_op_attrs], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_SET_OP_ATTRS, 1,
		    [bio_set_op_attrs is available])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:183: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_SET_DEV], [
	ZFS_LINUX_TEST_SRC([bio_set_dev], [
		#include <linux/bio.h>
		#include <linux/fs.h>
	],[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		bio_set_dev(bio, bdev);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-bio.m4:201: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_SET_DEV_MACRO], [
	ZFS_LINUX_TEST_SRC([bio_set_dev_macro], [
		#include <linux/bio.h>
		#include <linux/fs.h>
	],[
		#ifndef bio_set_dev
		#error Not a macro
		#endif
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-bio.m4:212: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_SET_DEV], [
	AC_MSG_CHECKING([whether bio_set_dev() is available])
	ZFS_LINUX_TEST_RESULT([bio_set_dev], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_SET_DEV, 1, [bio_set_dev() is available])

		AC_MSG_CHECKING([whether bio_set_dev() is GPL-only])
		ZFS_LINUX_TEST_RESULT([bio_set_dev_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_GPL_ONLY, 1,
			    [bio_set_dev() GPL-only])
		])

		AC_MSG_CHECKING([whether bio_set_dev() is a macro])
		ZFS_LINUX_TEST_RESULT([bio_set_dev_macro], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_MACRO, 1,
			    [bio_set_dev() is a macro])
		],[
			AC_MSG_RESULT(no)
		])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:247: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_END_IO_T_ARGS], [
	ZFS_LINUX_TEST_SRC([bio_end_io_t_args], [
		#include <linux/bio.h>
		void wanted_end_io(struct bio *bio) { return; }
		bio_end_io_t *end_io __attribute__ ((unused)) = wanted_end_io;
	], [])
])
m4trace:config/kernel-bio.m4:255: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_END_IO_T_ARGS], [
	AC_MSG_CHECKING([whether bio_end_io_t wants 1 arg])
	ZFS_LINUX_TEST_RESULT([bio_end_io_t_args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_1ARG_BIO_END_IO_T, 1,
		    [bio_end_io_t wants 1 arg])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:271: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_BI_STATUS], [
	ZFS_LINUX_TEST_SRC([bio_bi_status], [
		#include <linux/bio.h>
	], [
		struct bio bio __attribute__ ((unused));
		blk_status_t status __attribute__ ((unused)) = BLK_STS_OK;
		bio.bi_status = status;
	])
])
m4trace:config/kernel-bio.m4:281: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_BI_STATUS], [
	AC_MSG_CHECKING([whether bio->bi_status exists])
	ZFS_LINUX_TEST_RESULT([bio_bi_status], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BI_STATUS, 1, [bio->bi_status exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:296: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_BVEC_ITER], [
	ZFS_LINUX_TEST_SRC([bio_bvec_iter], [
		#include <linux/bio.h>
	],[
		struct bio bio;
		bio.bi_iter.bi_sector = 0;
	])
])
m4trace:config/kernel-bio.m4:305: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_BVEC_ITER], [
	AC_MSG_CHECKING([whether bio has bi_iter])
	ZFS_LINUX_TEST_RESULT([bio_bvec_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BVEC_ITER, 1, [bio has bi_iter])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:320: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_SUBMIT_BIO], [
	ZFS_LINUX_TEST_SRC([submit_bio], [
		#include <linux/bio.h>
	],[
		struct bio *bio = NULL;
		(void) submit_bio(bio);
	])
])
m4trace:config/kernel-bio.m4:329: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_SUBMIT_BIO], [
	AC_MSG_CHECKING([whether submit_bio() wants 1 arg])
	ZFS_LINUX_TEST_RESULT([submit_bio], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_1ARG_SUBMIT_BIO, 1, [submit_bio() wants 1 arg])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:343: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_CURRENT_BIO_LIST], [
	ZFS_LINUX_TEST_SRC([current_bio_list], [
		#include <linux/sched.h>
	], [
		current->bio_list = (struct bio_list *) NULL;
	])
])
m4trace:config/kernel-bio.m4:351: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_CURRENT_BIO_LIST], [
	AC_MSG_CHECKING([whether current->bio_list exists])
	ZFS_LINUX_TEST_RESULT([current_bio_list], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([bio_list])
	])
])
m4trace:config/kernel-bio.m4:367: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKG_TRYGET], [
	ZFS_LINUX_TEST_SRC([blkg_tryget], [
		#include <linux/blk-cgroup.h>
		#include <linux/bio.h>
		#include <linux/fs.h>
	],[
		struct blkcg_gq blkg __attribute__ ((unused)) = {};
		bool rc __attribute__ ((unused));
		rc = blkg_tryget(&blkg);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-bio.m4:379: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKG_TRYGET], [
	AC_MSG_CHECKING([whether blkg_tryget() is available])
	ZFS_LINUX_TEST_RESULT([blkg_tryget], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKG_TRYGET, 1, [blkg_tryget() is available])

		AC_MSG_CHECKING([whether blkg_tryget() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blkg_tryget_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKG_TRYGET_GPL_ONLY, 1,
			    [blkg_tryget() GPL-only])
		])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:404: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_BDEV_DISK], [
	ZFS_LINUX_TEST_SRC([bio_bdev_disk], [
		#include <linux/blk_types.h>
		#include <linux/blkdev.h>
	],[
		struct bio *b = NULL;
		struct gendisk *d = b->bi_bdev->bd_disk;
		blk_register_queue(d);
	])
])
m4trace:config/kernel-bio.m4:415: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_BDEV_DISK], [
	AC_MSG_CHECKING([whether bio->bi_bdev->bd_disk exists])
	ZFS_LINUX_TEST_RESULT([bio_bdev_disk], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BDEV_DISK, 1, [bio->bi_bdev->bd_disk exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:431: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BDEV_SUBMIT_BIO_RETURNS_VOID], [
	ZFS_LINUX_TEST_SRC([bio_bdev_submit_bio_void], [
		#include <linux/blkdev.h>
	],[
		struct block_device_operations *bdev = NULL;
		__attribute__((unused)) void(*f)(struct bio *) = bdev->submit_bio;
	])
])
m4trace:config/kernel-bio.m4:440: -1- AC_DEFUN([ZFS_AC_KERNEL_BDEV_SUBMIT_BIO_RETURNS_VOID], [
	AC_MSG_CHECKING(
		[whether block_device_operations->submit_bio() returns void])
	ZFS_LINUX_TEST_RESULT([bio_bdev_submit_bio_void], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_SUBMIT_BIO_RETURNS_VOID, 1,
			[block_device_operations->submit_bio() returns void])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:460: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_CGROUP_HEADER], [
	ZFS_LINUX_TEST_SRC([blk_cgroup_header], [
		#include <linux/blk-cgroup.h>
	], [])
])
m4trace:config/kernel-bio.m4:466: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_CGROUP_HEADER], [
	AC_MSG_CHECKING([whether linux/blk-cgroup.h exists])
	ZFS_LINUX_TEST_RESULT([blk_cgroup_header],[
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_LINUX_BLK_CGROUP_HEADER, 1,
			[linux/blk-cgroup.h exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:489: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_ALLOC_4ARG], [
	ZFS_LINUX_TEST_SRC([bio_alloc_4arg], [
		#include <linux/bio.h>
	],[
		gfp_t gfp_mask = 0;
		unsigned short nr_iovecs = 0;
		struct block_device *bdev = NULL;
		unsigned int opf = 0;

		struct bio *__attribute__((unused)) allocated = bio_alloc(bdev, nr_iovecs, opf, gfp_mask);
	])
])
m4trace:config/kernel-bio.m4:502: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_ALLOC_4ARG], [
	AC_MSG_CHECKING([whether bio_alloc() wants 4 args])
	ZFS_LINUX_TEST_RESULT([bio_alloc_4arg],[
		AC_MSG_RESULT(yes)
		AC_DEFINE([HAVE_BIO_ALLOC_4ARG], 1, [bio_alloc() takes 4 arguments])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-bio.m4:512: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO], [
	ZFS_AC_KERNEL_SRC_REQ
	ZFS_AC_KERNEL_SRC_BIO_OPS
	ZFS_AC_KERNEL_SRC_BIO_SET_DEV
	ZFS_AC_KERNEL_SRC_BIO_END_IO_T_ARGS
	ZFS_AC_KERNEL_SRC_BIO_BI_STATUS
	ZFS_AC_KERNEL_SRC_BIO_BVEC_ITER
	ZFS_AC_KERNEL_SRC_BIO_SUBMIT_BIO
	ZFS_AC_KERNEL_SRC_BIO_CURRENT_BIO_LIST
	ZFS_AC_KERNEL_SRC_BLKG_TRYGET
	ZFS_AC_KERNEL_SRC_BIO_BDEV_DISK
	ZFS_AC_KERNEL_SRC_BDEV_SUBMIT_BIO_RETURNS_VOID
	ZFS_AC_KERNEL_SRC_BIO_SET_DEV_MACRO
	ZFS_AC_KERNEL_SRC_BLK_CGROUP_HEADER
	ZFS_AC_KERNEL_SRC_BIO_ALLOC_4ARG
])
m4trace:config/kernel-bio.m4:529: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO], [
	ZFS_AC_KERNEL_BIO_REQ_FAILFAST_MASK
	ZFS_AC_KERNEL_BIO_REQ_DISCARD
	ZFS_AC_KERNEL_BIO_REQ_FLUSH
	ZFS_AC_KERNEL_BIO_REQ_PREFLUSH

	ZFS_AC_KERNEL_BIO_REQ_OP_DISCARD
	ZFS_AC_KERNEL_BIO_REQ_OP_SECURE_ERASE
	ZFS_AC_KERNEL_BIO_REQ_OP_FLUSH
	ZFS_AC_KERNEL_BIO_BI_OPF
	ZFS_AC_KERNEL_BIO_SET_OP_ATTRS

	ZFS_AC_KERNEL_BIO_SET_DEV
	ZFS_AC_KERNEL_BIO_END_IO_T_ARGS
	ZFS_AC_KERNEL_BIO_BI_STATUS
	ZFS_AC_KERNEL_BIO_BVEC_ITER
	ZFS_AC_KERNEL_BIO_SUBMIT_BIO
	ZFS_AC_KERNEL_BIO_CURRENT_BIO_LIST
	ZFS_AC_KERNEL_BLKG_TRYGET
	ZFS_AC_KERNEL_BIO_BDEV_DISK
	ZFS_AC_KERNEL_BDEV_SUBMIT_BIO_RETURNS_VOID
	ZFS_AC_KERNEL_BLK_CGROUP_HEADER
	ZFS_AC_KERNEL_BIO_ALLOC_4ARG
])
m4trace:config/kernel-bio_max_segs.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BIO_MAX_SEGS], [
	ZFS_LINUX_TEST_SRC([bio_max_segs], [
		#include <linux/bio.h>
	],[
		bio_max_segs(1);
	])
])
m4trace:config/kernel-bio_max_segs.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_BIO_MAX_SEGS], [
	AC_MSG_CHECKING([whether bio_max_segs() exists])
	ZFS_LINUX_TEST_RESULT([bio_max_segs], [
		AC_MSG_RESULT(yes)

		AC_DEFINE([HAVE_BIO_MAX_SEGS], 1, [bio_max_segs() is implemented])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blk-queue.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_PLUG], [
	ZFS_LINUX_TEST_SRC([blk_plug], [
		#include <linux/blkdev.h>
	],[
		struct blk_plug plug __attribute__ ((unused));

		blk_start_plug(&plug);
		blk_finish_plug(&plug);
	])
])
m4trace:config/kernel-blk-queue.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_PLUG], [
	AC_MSG_CHECKING([whether struct blk_plug is available])
	ZFS_LINUX_TEST_RESULT([blk_plug], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([blk_plug])
	])
])
m4trace:config/kernel-blk-queue.m4:29: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_BDI], [
	ZFS_LINUX_TEST_SRC([blk_queue_bdi], [
		#include <linux/blkdev.h>
	],[
		struct request_queue q;
		struct backing_dev_info bdi;
		q.backing_dev_info = &bdi;
	])
])
m4trace:config/kernel-blk-queue.m4:39: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_BDI], [
	AC_MSG_CHECKING([whether blk_queue bdi is dynamic])
	ZFS_LINUX_TEST_RESULT([blk_queue_bdi], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_BDI_DYNAMIC, 1,
		    [blk queue backing_dev_info is dynamic])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blk-queue.m4:54: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_UPDATE_READAHEAD], [
	ZFS_LINUX_TEST_SRC([blk_queue_update_readahead], [
		#include <linux/blkdev.h>
	],[
		struct request_queue q;
		blk_queue_update_readahead(&q);
	])

	ZFS_LINUX_TEST_SRC([disk_update_readahead], [
		#include <linux/blkdev.h>
	],[
		struct gendisk disk;
		disk_update_readahead(&disk);
	])
])
m4trace:config/kernel-blk-queue.m4:70: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_UPDATE_READAHEAD], [
	AC_MSG_CHECKING([whether blk_queue_update_readahead() exists])
	ZFS_LINUX_TEST_RESULT([blk_queue_update_readahead], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_UPDATE_READAHEAD, 1,
		    [blk_queue_update_readahead() exists])
	],[
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether disk_update_readahead() exists])
		ZFS_LINUX_TEST_RESULT([disk_update_readahead], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_DISK_UPDATE_READAHEAD, 1,
			    [disk_update_readahead() exists])
		],[
			AC_MSG_RESULT(no)
		])
	])
])
m4trace:config/kernel-blk-queue.m4:94: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_DISCARD], [
	ZFS_LINUX_TEST_SRC([bdev_max_discard_sectors], [
		#include <linux/blkdev.h>
	],[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_discard_sectors(bdev);
	])

	ZFS_LINUX_TEST_SRC([blk_queue_discard], [
		#include <linux/blkdev.h>
	],[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_discard(q);
	],[-Wframe-larger-than=8192])
])
m4trace:config/kernel-blk-queue.m4:115: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_DISCARD], [
	AC_MSG_CHECKING([whether bdev_max_discard_sectors() is available])
	ZFS_LINUX_TEST_RESULT([bdev_max_discard_sectors], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_MAX_DISCARD_SECTORS, 1,
		    [bdev_max_discard_sectors() is available])
	],[
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blk_queue_discard() is available])
		ZFS_LINUX_TEST_RESULT([blk_queue_discard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_DISCARD, 1,
			    [blk_queue_discard() is available])
		],[
			ZFS_LINUX_TEST_ERROR([blk_queue_discard])
		])
	])
])
m4trace:config/kernel-blk-queue.m4:140: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_SECURE_ERASE], [
	ZFS_LINUX_TEST_SRC([bdev_max_secure_erase_sectors], [
		#include <linux/blkdev.h>
	],[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_secure_erase_sectors(bdev);
	])

	ZFS_LINUX_TEST_SRC([blk_queue_secure_erase], [
		#include <linux/blkdev.h>
	],[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secure_erase(q);
	],[-Wframe-larger-than=8192])

	ZFS_LINUX_TEST_SRC([blk_queue_secdiscard], [
		#include <linux/blkdev.h>
	],[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secdiscard(q);
	])
])
m4trace:config/kernel-blk-queue.m4:171: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_SECURE_ERASE], [
	AC_MSG_CHECKING([whether bdev_max_secure_erase_sectors() is available])
	ZFS_LINUX_TEST_RESULT([bdev_max_secure_erase_sectors], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_MAX_SECURE_ERASE_SECTORS, 1,
		    [bdev_max_secure_erase_sectors() is available])
	],[
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blk_queue_secure_erase() is available])
		ZFS_LINUX_TEST_RESULT([blk_queue_secure_erase], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECURE_ERASE, 1,
			    [blk_queue_secure_erase() is available])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether blk_queue_secdiscard() is available])
			ZFS_LINUX_TEST_RESULT([blk_queue_secdiscard], [
				AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECDISCARD, 1,
				    [blk_queue_secdiscard() is available])
			],[
				ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
			])
		])
	])
])
m4trace:config/kernel-blk-queue.m4:204: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLAG_SET], [
	ZFS_LINUX_TEST_SRC([blk_queue_flag_set], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	],[
		struct request_queue *q = NULL;
		blk_queue_flag_set(0, q);
	])
])
m4trace:config/kernel-blk-queue.m4:214: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_FLAG_SET], [
	AC_MSG_CHECKING([whether blk_queue_flag_set() exists])
	ZFS_LINUX_TEST_RESULT([blk_queue_flag_set], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLAG_SET, 1,
		    [blk_queue_flag_set() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blk-queue.m4:225: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLAG_CLEAR], [
	ZFS_LINUX_TEST_SRC([blk_queue_flag_clear], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	],[
		struct request_queue *q = NULL;
		blk_queue_flag_clear(0, q);
	])
])
m4trace:config/kernel-blk-queue.m4:235: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_FLAG_CLEAR], [
	AC_MSG_CHECKING([whether blk_queue_flag_clear() exists])
	ZFS_LINUX_TEST_RESULT([blk_queue_flag_clear], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLAG_CLEAR, 1,
		    [blk_queue_flag_clear() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blk-queue.m4:258: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLUSH], [
	ZFS_LINUX_TEST_SRC([blk_queue_flush], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_flush(q, REQ_FLUSH);
	], [], [ZFS_META_LICENSE])

	ZFS_LINUX_TEST_SRC([blk_queue_write_cache], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		blk_queue_write_cache(q, true, true);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-blk-queue.m4:275: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_FLUSH], [
	AC_MSG_CHECKING([whether blk_queue_flush() is available])
	ZFS_LINUX_TEST_RESULT([blk_queue_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLUSH, 1,
		    [blk_queue_flush() is available])

		AC_MSG_CHECKING([whether blk_queue_flush() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blk_queue_flush_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_FLUSH_GPL_ONLY, 1,
			    [blk_queue_flush() is GPL-only])
		])
	],[
		AC_MSG_RESULT(no)
	])

	dnl #
	dnl # 4.7 API change
	dnl # Replace blk_queue_flush with blk_queue_write_cache
	dnl #
	AC_MSG_CHECKING([whether blk_queue_write_cache() exists])
	ZFS_LINUX_TEST_RESULT([blk_queue_write_cache], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_WRITE_CACHE, 1,
		    [blk_queue_write_cache() exists])

		AC_MSG_CHECKING([whether blk_queue_write_cache() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blk_queue_write_cache_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_WRITE_CACHE_GPL_ONLY, 1,
			    [blk_queue_write_cache() is GPL-only])
		])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blk-queue.m4:321: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_MAX_HW_SECTORS], [
	ZFS_LINUX_TEST_SRC([blk_queue_max_hw_sectors], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_hw_sectors(q, BLK_SAFE_MAX_SECTORS);
	], [])
])
m4trace:config/kernel-blk-queue.m4:330: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_MAX_HW_SECTORS], [
	AC_MSG_CHECKING([whether blk_queue_max_hw_sectors() is available])
	ZFS_LINUX_TEST_RESULT([blk_queue_max_hw_sectors], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([blk_queue_max_hw_sectors])
	])
])
m4trace:config/kernel-blk-queue.m4:344: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE_MAX_SEGMENTS], [
	ZFS_LINUX_TEST_SRC([blk_queue_max_segments], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_segments(q, BLK_MAX_SEGMENTS);
	], [])
])
m4trace:config/kernel-blk-queue.m4:353: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE_MAX_SEGMENTS], [
	AC_MSG_CHECKING([whether blk_queue_max_segments() is available])
	ZFS_LINUX_TEST_RESULT([blk_queue_max_segments], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blk_queue_max_segments])
	])
])
m4trace:config/kernel-blk-queue.m4:372: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_MQ], [
	ZFS_LINUX_TEST_SRC([blk_mq], [
		#include <linux/blk-mq.h>
	], [
		struct blk_mq_tag_set tag_set __attribute__ ((unused)) = {0};
		(void) blk_mq_alloc_tag_set(&tag_set);
		return BLK_STS_OK;
	], [])
])
m4trace:config/kernel-blk-queue.m4:382: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_MQ], [
	AC_MSG_CHECKING([whether block multiqueue with blk_status_t is available])
	ZFS_LINUX_TEST_RESULT([blk_mq], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_MQ, 1, [block multiqueue is available])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blk-queue.m4:392: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLK_QUEUE], [
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_PLUG
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_BDI
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_UPDATE_READAHEAD
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_DISCARD
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_SECURE_ERASE
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLAG_SET
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLAG_CLEAR
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLUSH
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_MAX_HW_SECTORS
	ZFS_AC_KERNEL_SRC_BLK_QUEUE_MAX_SEGMENTS
	ZFS_AC_KERNEL_SRC_BLK_MQ
])
m4trace:config/kernel-blk-queue.m4:406: -1- AC_DEFUN([ZFS_AC_KERNEL_BLK_QUEUE], [
	ZFS_AC_KERNEL_BLK_QUEUE_PLUG
	ZFS_AC_KERNEL_BLK_QUEUE_BDI
	ZFS_AC_KERNEL_BLK_QUEUE_UPDATE_READAHEAD
	ZFS_AC_KERNEL_BLK_QUEUE_DISCARD
	ZFS_AC_KERNEL_BLK_QUEUE_SECURE_ERASE
	ZFS_AC_KERNEL_BLK_QUEUE_FLAG_SET
	ZFS_AC_KERNEL_BLK_QUEUE_FLAG_CLEAR
	ZFS_AC_KERNEL_BLK_QUEUE_FLUSH
	ZFS_AC_KERNEL_BLK_QUEUE_MAX_HW_SECTORS
	ZFS_AC_KERNEL_BLK_QUEUE_MAX_SEGMENTS
	ZFS_AC_KERNEL_BLK_MQ
])
m4trace:config/kernel-blkdev.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_GET_BY_PATH], [
	ZFS_LINUX_TEST_SRC([blkdev_get_by_path], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		const char *path = "path";
		fmode_t mode = 0;
		void *holder = NULL;

		bdev = blkdev_get_by_path(path, mode, holder);
	])
])
m4trace:config/kernel-blkdev.m4:19: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_GET_BY_PATH], [
	AC_MSG_CHECKING([whether blkdev_get_by_path() exists])
	ZFS_LINUX_TEST_RESULT([blkdev_get_by_path], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blkdev_get_by_path()])
	])
])
m4trace:config/kernel-blkdev.m4:32: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_PUT], [
	ZFS_LINUX_TEST_SRC([blkdev_put], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		fmode_t mode = 0;

		blkdev_put(bdev, mode);
	])
])
m4trace:config/kernel-blkdev.m4:44: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_PUT], [
	AC_MSG_CHECKING([whether blkdev_put() exists])
	ZFS_LINUX_TEST_RESULT([blkdev_put], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blkdev_put()])
	])
])
m4trace:config/kernel-blkdev.m4:57: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_REREAD_PART], [
	ZFS_LINUX_TEST_SRC([blkdev_reread_part], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		int error;

		error = blkdev_reread_part(bdev);
	])
])
m4trace:config/kernel-blkdev.m4:69: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_REREAD_PART], [
	AC_MSG_CHECKING([whether blkdev_reread_part() exists])
	ZFS_LINUX_TEST_RESULT([blkdev_reread_part], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKDEV_REREAD_PART, 1,
		    [blkdev_reread_part() exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blkdev.m4:83: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_CHECK_DISK_CHANGE], [
	ZFS_LINUX_TEST_SRC([check_disk_change], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		bool error;

		error = check_disk_change(bdev);
	])
])
m4trace:config/kernel-blkdev.m4:95: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_CHECK_DISK_CHANGE], [
	AC_MSG_CHECKING([whether check_disk_change() exists])
	ZFS_LINUX_TEST_RESULT([check_disk_change], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CHECK_DISK_CHANGE, 1,
		    [check_disk_change() exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blkdev.m4:109: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_KOBJ], [
	ZFS_LINUX_TEST_SRC([bdev_kobj], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
		#include <linux/kobject.h>
	], [
		struct block_device *bdev = NULL;
		struct kobject *disk_kobj;
		disk_kobj = bdev_kobj(bdev);
	])
])
m4trace:config/kernel-blkdev.m4:121: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_BDEV_KOBJ], [
	AC_MSG_CHECKING([whether bdev_kobj() exists])
	ZFS_LINUX_TEST_RESULT([bdev_kobj], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_KOBJ, 1,
		    [bdev_kobj() exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blkdev.m4:135: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_PART_TO_DEV], [
	ZFS_LINUX_TEST_SRC([part_to_dev], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct hd_struct *p = NULL;
		struct device *pdev;
		pdev = part_to_dev(p);
	])
])
m4trace:config/kernel-blkdev.m4:146: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_PART_TO_DEV], [
	AC_MSG_CHECKING([whether part_to_dev() exists])
	ZFS_LINUX_TEST_RESULT([part_to_dev], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PART_TO_DEV, 1,
		    [part_to_dev() exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blkdev.m4:161: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_CHECK_MEDIA_CHANGE], [
	ZFS_LINUX_TEST_SRC([bdev_check_media_change], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		int error;

		error = bdev_check_media_change(bdev);
	])
])
m4trace:config/kernel-blkdev.m4:173: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_BDEV_CHECK_MEDIA_CHANGE], [
	AC_MSG_CHECKING([whether bdev_check_media_change() exists])
	ZFS_LINUX_TEST_RESULT([bdev_check_media_change], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_CHECK_MEDIA_CHANGE, 1,
		    [bdev_check_media_change() exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blkdev.m4:188: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_INVALIDATE_BDEV], [
	ZFS_LINUX_TEST_SRC([invalidate_bdev], [
		#include <linux/buffer_head.h>
		#include <linux/blkdev.h>
	],[
		struct block_device *bdev = NULL;
		invalidate_bdev(bdev);
	])
])
m4trace:config/kernel-blkdev.m4:198: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_INVALIDATE_BDEV], [
	AC_MSG_CHECKING([whether invalidate_bdev() exists])
	ZFS_LINUX_TEST_RESULT([invalidate_bdev], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([invalidate_bdev()])
	])
])
m4trace:config/kernel-blkdev.m4:212: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_LOOKUP_BDEV], [
	ZFS_LINUX_TEST_SRC([lookup_bdev_devt], [
		#include <linux/blkdev.h>
	], [
		int error __attribute__ ((unused));
		const char path[] = "/example/path";
		dev_t dev;

		error = lookup_bdev(path, &dev);
	])

	ZFS_LINUX_TEST_SRC([lookup_bdev_1arg], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path);
	])

	ZFS_LINUX_TEST_SRC([lookup_bdev_mode], [
		#include <linux/fs.h>
	], [
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path, FMODE_READ);
	])
])
m4trace:config/kernel-blkdev.m4:243: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_LOOKUP_BDEV], [
	AC_MSG_CHECKING([whether lookup_bdev() wants dev_t arg])
	ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_devt],
	    [lookup_bdev], [fs/block_dev.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DEVT_LOOKUP_BDEV, 1,
		    [lookup_bdev() wants dev_t arg])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether lookup_bdev() wants 1 arg])
		ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg],
		    [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
	])
])
m4trace:config/kernel-blkdev.m4:285: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_PHYSICAL_BLOCK_SIZE], [
	ZFS_LINUX_TEST_SRC([bdev_physical_block_size], [
		#include <linux/blkdev.h>
	],[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_physical_block_size(bdev);
	])
])
m4trace:config/kernel-blkdev.m4:294: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_BDEV_PHYSICAL_BLOCK_SIZE], [
	AC_MSG_CHECKING([whether bdev_physical_block_size() is available])
	ZFS_LINUX_TEST_RESULT([bdev_physical_block_size], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([bdev_physical_block_size()])
	])
])
m4trace:config/kernel-blkdev.m4:307: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_LOGICAL_BLOCK_SIZE], [
	ZFS_LINUX_TEST_SRC([bdev_logical_block_size], [
		#include <linux/blkdev.h>
	],[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_logical_block_size(bdev);
	])
])
m4trace:config/kernel-blkdev.m4:316: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_BDEV_LOGICAL_BLOCK_SIZE], [
	AC_MSG_CHECKING([whether bdev_logical_block_size() is available])
	ZFS_LINUX_TEST_RESULT([bdev_logical_block_size], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([bdev_logical_block_size()])
	])
])
m4trace:config/kernel-blkdev.m4:329: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_WHOLE], [
	ZFS_LINUX_TEST_SRC([bdev_whole], [
		#include <linux/blkdev.h>
	],[
		struct block_device *bdev = NULL;
		bdev = bdev_whole(bdev);
	])
])
m4trace:config/kernel-blkdev.m4:338: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_BDEV_WHOLE], [
	AC_MSG_CHECKING([whether bdev_whole() is available])
	ZFS_LINUX_TEST_RESULT([bdev_whole], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_WHOLE, 1, [bdev_whole() is available])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blkdev.m4:352: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_BDEVNAME], [
	ZFS_LINUX_TEST_SRC([bdevname], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		char path[BDEVNAME_SIZE];

		(void) bdevname(bdev, path);
	])
])
m4trace:config/kernel-blkdev.m4:364: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_BDEVNAME], [
	AC_MSG_CHECKING([whether bdevname() exists])
	ZFS_LINUX_TEST_RESULT([bdevname], [
		AC_DEFINE(HAVE_BDEVNAME, 1, [bdevname() is available])
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blkdev.m4:378: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV_ISSUE_SECURE_ERASE], [
	ZFS_LINUX_TEST_SRC([blkdev_issue_secure_erase], [
		#include <linux/blkdev.h>
	],[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_secure_erase(bdev,
		    sector, nr_sects, GFP_KERNEL);
	])

	ZFS_LINUX_TEST_SRC([blkdev_issue_discard_flags], [
		#include <linux/blkdev.h>
	],[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		unsigned long flags = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_discard(bdev,
		    sector, nr_sects, GFP_KERNEL, flags);
	])
])
m4trace:config/kernel-blkdev.m4:405: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_ISSUE_SECURE_ERASE], [
	AC_MSG_CHECKING([whether blkdev_issue_secure_erase() is available])
	ZFS_LINUX_TEST_RESULT([blkdev_issue_secure_erase], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKDEV_ISSUE_SECURE_ERASE, 1,
		    [blkdev_issue_secure_erase() is available])
	],[
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blkdev_issue_discard() is available])
		ZFS_LINUX_TEST_RESULT([blkdev_issue_discard_flags], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKDEV_ISSUE_DISCARD, 1,
			    [blkdev_issue_discard() is available])
		],[
			ZFS_LINUX_TEST_ERROR([blkdev_issue_discard()])
		])
	])
])
m4trace:config/kernel-blkdev.m4:433: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV_GET_ERESTARTSYS], [
	AC_MSG_CHECKING([whether blkdev_get_by_path() handles ERESTARTSYS])
	AS_VERSION_COMPARE([$LINUX_VERSION], [5.13.0], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKDEV_GET_ERESTARTSYS, 1,
			[blkdev_get_by_path() handles ERESTARTSYS])
	],[
		AC_MSG_RESULT(no)
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-blkdev.m4:446: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLKDEV], [
	ZFS_AC_KERNEL_SRC_BLKDEV_GET_BY_PATH
	ZFS_AC_KERNEL_SRC_BLKDEV_PUT
	ZFS_AC_KERNEL_SRC_BLKDEV_REREAD_PART
	ZFS_AC_KERNEL_SRC_BLKDEV_INVALIDATE_BDEV
	ZFS_AC_KERNEL_SRC_BLKDEV_LOOKUP_BDEV
	ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_LOGICAL_BLOCK_SIZE
	ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_PHYSICAL_BLOCK_SIZE
	ZFS_AC_KERNEL_SRC_BLKDEV_CHECK_DISK_CHANGE
	ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_CHECK_MEDIA_CHANGE
	ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_WHOLE
	ZFS_AC_KERNEL_SRC_BLKDEV_BDEVNAME
	ZFS_AC_KERNEL_SRC_BLKDEV_ISSUE_SECURE_ERASE
	ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_KOBJ
	ZFS_AC_KERNEL_SRC_BLKDEV_PART_TO_DEV
])
m4trace:config/kernel-blkdev.m4:463: -1- AC_DEFUN([ZFS_AC_KERNEL_BLKDEV], [
	ZFS_AC_KERNEL_BLKDEV_GET_BY_PATH
	ZFS_AC_KERNEL_BLKDEV_PUT
	ZFS_AC_KERNEL_BLKDEV_REREAD_PART
	ZFS_AC_KERNEL_BLKDEV_INVALIDATE_BDEV
	ZFS_AC_KERNEL_BLKDEV_LOOKUP_BDEV
	ZFS_AC_KERNEL_BLKDEV_BDEV_LOGICAL_BLOCK_SIZE
	ZFS_AC_KERNEL_BLKDEV_BDEV_PHYSICAL_BLOCK_SIZE
	ZFS_AC_KERNEL_BLKDEV_CHECK_DISK_CHANGE
	ZFS_AC_KERNEL_BLKDEV_BDEV_CHECK_MEDIA_CHANGE
	ZFS_AC_KERNEL_BLKDEV_BDEV_WHOLE
	ZFS_AC_KERNEL_BLKDEV_BDEVNAME
	ZFS_AC_KERNEL_BLKDEV_GET_ERESTARTSYS
	ZFS_AC_KERNEL_BLKDEV_ISSUE_SECURE_ERASE
	ZFS_AC_KERNEL_BLKDEV_BDEV_KOBJ
	ZFS_AC_KERNEL_BLKDEV_PART_TO_DEV
])
m4trace:config/kernel-block-device-operations.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_CHECK_EVENTS], [
	ZFS_LINUX_TEST_SRC([block_device_operations_check_events], [
		#include <linux/blkdev.h>

		unsigned int blk_check_events(struct gendisk *disk,
		    unsigned int clearing) {
			(void) disk, (void) clearing;
			return (0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.check_events	= blk_check_events,
		};
	], [], [])
])
m4trace:config/kernel-block-device-operations.m4:21: -1- AC_DEFUN([ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_CHECK_EVENTS], [
	AC_MSG_CHECKING([whether bops->check_events() exists])
	ZFS_LINUX_TEST_RESULT([block_device_operations_check_events], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([bops->check_events()])
	])
])
m4trace:config/kernel-block-device-operations.m4:33: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_RELEASE_VOID], [
	ZFS_LINUX_TEST_SRC([block_device_operations_release_void], [
		#include <linux/blkdev.h>

		void blk_release(struct gendisk *g, fmode_t mode) {
			(void) g, (void) mode;
			return;
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.open		= NULL,
			.release	= blk_release,
			.ioctl		= NULL,
			.compat_ioctl	= NULL,
		};
	], [], [])
])
m4trace:config/kernel-block-device-operations.m4:52: -1- AC_DEFUN([ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_RELEASE_VOID], [
	AC_MSG_CHECKING([whether bops->release() is void])
	ZFS_LINUX_TEST_RESULT([block_device_operations_release_void], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([bops->release()])
	])
])
m4trace:config/kernel-block-device-operations.m4:65: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK], [
	ZFS_LINUX_TEST_SRC([block_device_operations_revalidate_disk], [
		#include <linux/blkdev.h>

		int blk_revalidate_disk(struct gendisk *disk) {
			(void) disk;
			return(0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.revalidate_disk	= blk_revalidate_disk,
		};
	], [], [])
])
m4trace:config/kernel-block-device-operations.m4:81: -1- AC_DEFUN([ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK], [
	AC_MSG_CHECKING([whether bops->revalidate_disk() exists])
	ZFS_LINUX_TEST_RESULT([block_device_operations_revalidate_disk], [
		AC_DEFINE([HAVE_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK], [1],
			[Define if revalidate_disk() in block_device_operations])
		AC_MSG_RESULT(yes)
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-block-device-operations.m4:92: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS], [
	ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_CHECK_EVENTS
	ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_RELEASE_VOID
	ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK
])
m4trace:config/kernel-block-device-operations.m4:98: -1- AC_DEFUN([ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS], [
	ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_CHECK_EVENTS
	ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_RELEASE_VOID
	ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK
])
m4trace:config/kernel-clear-inode.m4:22: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CLEAR_INODE], [
	ZFS_LINUX_TEST_SRC([clear_inode], [
		#include <linux/fs.h>
	], [
		clear_inode(NULL);
	])
])
m4trace:config/kernel-clear-inode.m4:30: -1- AC_DEFUN([ZFS_AC_KERNEL_CLEAR_INODE], [
	AC_MSG_CHECKING([whether clear_inode() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([clear_inode],
	    [clear_inode], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CLEAR_INODE, 1, [clear_inode() is available])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-commit-metadata.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_COMMIT_METADATA], [
	ZFS_LINUX_TEST_SRC([export_operations_commit_metadata], [
		#include <linux/exportfs.h>
		int commit_metadata(struct inode *inode) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.commit_metadata = commit_metadata,
		};
	],[])
])
m4trace:config/kernel-commit-metadata.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_COMMIT_METADATA], [
	AC_MSG_CHECKING([whether eops->commit_metadata() exists])
	ZFS_LINUX_TEST_RESULT([export_operations_commit_metadata], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([eops->commit_metadata()])
	])
])
m4trace:config/kernel-config-defined.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_CONFIG_DEFINED], [
	AS_IF([test "x$cross_compiling" != xyes], [
		AC_RUN_IFELSE([
			AC_LANG_PROGRAM([
				#include "$LINUX/include/linux/license.h"
			], [
				return !license_is_gpl_compatible(
				    "$ZFS_META_LICENSE");
			])
		], [
			AC_DEFINE([ZFS_IS_GPL_COMPATIBLE], [1],
			    [Define to 1 if GPL-only symbols can be used])
		], [
		])
	])

	ZFS_AC_KERNEL_SRC_CONFIG_MODULES
	ZFS_AC_KERNEL_SRC_CONFIG_BLOCK
	ZFS_AC_KERNEL_SRC_CONFIG_DEBUG_LOCK_ALLOC
	ZFS_AC_KERNEL_SRC_CONFIG_TRIM_UNUSED_KSYMS
	ZFS_AC_KERNEL_SRC_CONFIG_ZLIB_DEFLATE
	ZFS_AC_KERNEL_SRC_CONFIG_ZLIB_INFLATE

	AC_MSG_CHECKING([for kernel config option compatibility])
	ZFS_LINUX_TEST_COMPILE_ALL([config])
	AC_MSG_RESULT([done])

	ZFS_AC_KERNEL_CONFIG_MODULES
	ZFS_AC_KERNEL_CONFIG_BLOCK
	ZFS_AC_KERNEL_CONFIG_DEBUG_LOCK_ALLOC
	ZFS_AC_KERNEL_CONFIG_TRIM_UNUSED_KSYMS
	ZFS_AC_KERNEL_CONFIG_ZLIB_DEFLATE
	ZFS_AC_KERNEL_CONFIG_ZLIB_INFLATE
])
m4trace:config/kernel-config-defined.m4:46: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CONFIG_BLOCK], [
	ZFS_LINUX_TEST_SRC([config_block], [
		#if !defined(CONFIG_BLOCK)
		#error CONFIG_BLOCK not defined
		#endif
	],[])
])
m4trace:config/kernel-config-defined.m4:54: -1- AC_DEFUN([ZFS_AC_KERNEL_CONFIG_BLOCK], [
	AC_MSG_CHECKING([whether CONFIG_BLOCK is defined])
	ZFS_LINUX_TEST_RESULT([config_block], [
		AC_MSG_RESULT([yes])
	],[
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required block device support.
	*** Rebuild the kernel with CONFIG_BLOCK=y set.])
	])
])
m4trace:config/kernel-config-defined.m4:78: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CONFIG_DEBUG_LOCK_ALLOC], [
	ZFS_LINUX_TEST_SRC([config_debug_lock_alloc], [
		#include <linux/mutex.h>
	],[
		struct mutex lock;

		mutex_init(&lock);
		mutex_lock(&lock);
		mutex_unlock(&lock);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-config-defined.m4:90: -1- AC_DEFUN([ZFS_AC_KERNEL_CONFIG_DEBUG_LOCK_ALLOC], [
	AC_MSG_CHECKING([whether mutex_lock() is GPL-only])
	ZFS_LINUX_TEST_RESULT([config_debug_lock_alloc_license], [
		AC_MSG_RESULT(no)
	],[
		AC_MSG_RESULT(yes)
		AC_MSG_ERROR([
	*** Kernel built with CONFIG_DEBUG_LOCK_ALLOC which is incompatible
	*** with the CDDL license and will prevent the module linking stage
	*** from succeeding.  You must rebuild your kernel without this
	*** option enabled.])
	])
])
m4trace:config/kernel-config-defined.m4:109: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CONFIG_MODULES], [
	ZFS_LINUX_TEST_SRC([config_modules], [
		#if !defined(CONFIG_MODULES)
		#error CONFIG_MODULES not defined
		#endif
	],[])
])
m4trace:config/kernel-config-defined.m4:117: -1- AC_DEFUN([ZFS_AC_KERNEL_CONFIG_MODULES], [
	AC_MSG_CHECKING([whether CONFIG_MODULES is defined])
	AS_IF([test "x$enable_linux_builtin" != xyes], [
		ZFS_LINUX_TEST_RESULT([config_modules], [
			AC_MSG_RESULT([yes])
		],[
			AC_MSG_RESULT([no])
			AC_MSG_ERROR([
		*** This kernel does not include the required loadable module
		*** support!
		***
		*** To build OpenZFS as a loadable Linux kernel module
		*** enable loadable module support by setting
		*** `CONFIG_MODULES=y` in the kernel configuration and run
		*** `make modules_prepare` in the Linux source tree.
		***
		*** If you don't intend to enable loadable kernel module
		*** support, please compile OpenZFS as a Linux kernel built-in.
		***
		*** Prepare the Linux source tree by running `make prepare`,
		*** use the OpenZFS `--enable-linux-builtin` configure option,
		*** copy the OpenZFS sources into the Linux source tree using
		*** `./copy-builtin <linux source directory>`,
		*** set `CONFIG_ZFS=y` in the kernel configuration and compile
		*** kernel as usual.
			])
		])
	], [
		ZFS_LINUX_TRY_COMPILE([], [], [
			AC_MSG_RESULT([not needed])
		],[
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		])
	])
])
m4trace:config/kernel-config-defined.m4:164: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CONFIG_TRIM_UNUSED_KSYMS], [
	ZFS_LINUX_TEST_SRC([config_trim_unusued_ksyms], [
		#if defined(CONFIG_TRIM_UNUSED_KSYMS)
		#error CONFIG_TRIM_UNUSED_KSYMS not defined
		#endif
	],[])
])
m4trace:config/kernel-config-defined.m4:172: -1- AC_DEFUN([ZFS_AC_KERNEL_CONFIG_TRIM_UNUSED_KSYMS], [
	AC_MSG_CHECKING([whether CONFIG_TRIM_UNUSED_KSYM is disabled])
	ZFS_LINUX_TEST_RESULT([config_trim_unusued_ksyms], [
		AC_MSG_RESULT([yes])
	],[
		AC_MSG_RESULT([no])
		AS_IF([test "x$enable_linux_builtin" != xyes], [
			AC_MSG_ERROR([
	*** This kernel has unused symbols trimming enabled, please disable.
	*** Rebuild the kernel with CONFIG_TRIM_UNUSED_KSYMS=n set.])
		])
	])
])
m4trace:config/kernel-config-defined.m4:191: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CONFIG_ZLIB_INFLATE], [
	ZFS_LINUX_TEST_SRC([config_zlib_inflate], [
		#if !defined(CONFIG_ZLIB_INFLATE) && \
		    !defined(CONFIG_ZLIB_INFLATE_MODULE)
		#error CONFIG_ZLIB_INFLATE not defined
		#endif
	],[])
])
m4trace:config/kernel-config-defined.m4:200: -1- AC_DEFUN([ZFS_AC_KERNEL_CONFIG_ZLIB_INFLATE], [
	AC_MSG_CHECKING([whether CONFIG_ZLIB_INFLATE is defined])
	ZFS_LINUX_TEST_RESULT([config_zlib_inflate], [
		AC_MSG_RESULT([yes])
	],[
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required zlib inflate support.
	*** Rebuild the kernel with CONFIG_ZLIB_INFLATE=y|m set.])
	])
])
m4trace:config/kernel-config-defined.m4:217: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CONFIG_ZLIB_DEFLATE], [
	ZFS_LINUX_TEST_SRC([config_zlib_deflate], [
		#if !defined(CONFIG_ZLIB_DEFLATE) && \
		    !defined(CONFIG_ZLIB_DEFLATE_MODULE)
		#error CONFIG_ZLIB_DEFLATE not defined
		#endif
	],[])
])
m4trace:config/kernel-config-defined.m4:226: -1- AC_DEFUN([ZFS_AC_KERNEL_CONFIG_ZLIB_DEFLATE], [
	AC_MSG_CHECKING([whether CONFIG_ZLIB_DEFLATE is defined])
	ZFS_LINUX_TEST_RESULT([config_zlib_deflate], [
		AC_MSG_RESULT([yes])
	],[
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required zlib deflate support.
	*** Rebuild the kernel with CONFIG_ZLIB_DEFLATE=y|m set.])
	])
])
m4trace:config/kernel-copy-from-user-inatomic.m4:9: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC___COPY_FROM_USER_INATOMIC], [
	ZFS_LINUX_TEST_SRC([__copy_from_user_inatomic], [
		#include <linux/uaccess.h>
	], [
		int result __attribute__ ((unused)) = __copy_from_user_inatomic(NULL, NULL, 0);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-copy-from-user-inatomic.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL___COPY_FROM_USER_INATOMIC], [
	AC_MSG_CHECKING([whether __copy_from_user_inatomic is available])
	ZFS_LINUX_TEST_RESULT([__copy_from_user_inatomic_license], [
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
		AC_MSG_ERROR([
	*** The `__copy_from_user_inatomic()` Linux kernel function is
	*** incompatible with the CDDL license and will prevent the module
	*** linking stage from succeeding.  OpenZFS cannot be compiled.
		])
	])
])
m4trace:config/kernel-cpu_has_feature.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CPU_HAS_FEATURE], [
	ZFS_LINUX_TEST_SRC([cpu_has_feature], [
		#include <linux/version.h>
		#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 7, 0)
		#include <asm/cpu_has_feature.h>
		#else
		#include <asm/cputable.h>
		#endif
	], [
		return cpu_has_feature(CPU_FTR_ALTIVEC) ? 0 : 1;
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-cpu_has_feature.m4:20: -1- AC_DEFUN([ZFS_AC_KERNEL_CPU_HAS_FEATURE], [
	AC_MSG_CHECKING([whether cpu_has_feature() is GPL-only])
	ZFS_LINUX_TEST_RESULT([cpu_has_feature_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CPU_HAS_FEATURE_GPL_ONLY, 1,
		    [cpu_has_feature() is GPL-only])
	])
])
m4trace:config/kernel-current-time.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CURRENT_TIME], [
	ZFS_LINUX_TEST_SRC([current_time], [
		#include <linux/fs.h>
	], [
		struct inode ip __attribute__ ((unused));
		ip.i_atime = current_time(&ip);
	])
])
m4trace:config/kernel-current-time.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_CURRENT_TIME], [
	AC_MSG_CHECKING([whether current_time() exists])
	ZFS_LINUX_TEST_RESULT_SYMBOL([current_time],
	    [current_time], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CURRENT_TIME, 1, [current_time() exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-declare-event-class.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_DECLARE_EVENT_CLASS], [
	AC_MSG_CHECKING([whether DECLARE_EVENT_CLASS() is available])
	ZFS_LINUX_TRY_COMPILE_HEADER([
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	],[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	],[
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	],[
		AC_MSG_RESULT(no)
	],[
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	])
])
m4trace:config/kernel-dentry-alias.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_DENTRY_ALIAS_D_U], [
	ZFS_LINUX_TEST_SRC([dentry_alias_d_u], [
		#include <linux/fs.h>
		#include <linux/dcache.h>
		#include <linux/list.h>
	], [
		struct inode *inode __attribute__ ((unused)) = NULL;
		struct dentry *dentry __attribute__ ((unused)) = NULL;
		hlist_for_each_entry(dentry, &inode->i_dentry,
		    d_u.d_alias) {
			d_drop(dentry);
		}
	])
])
m4trace:config/kernel-dentry-alias.m4:20: -1- AC_DEFUN([ZFS_AC_KERNEL_DENTRY_ALIAS_D_U], [
	AC_MSG_CHECKING([whether dentry aliases are in d_u member])
	ZFS_LINUX_TEST_RESULT([dentry_alias_d_u], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DENTRY_D_U_ALIASES, 1,
		    [dentry aliases are in d_u member])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-dentry-operations.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_D_MAKE_ROOT], [
	ZFS_LINUX_TEST_SRC([d_make_root], [
		#include <linux/dcache.h>
	], [
		d_make_root(NULL);
	])
])
m4trace:config/kernel-dentry-operations.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_D_MAKE_ROOT], [
	AC_MSG_CHECKING([whether d_make_root() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([d_make_root],
	    [d_make_root], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_MAKE_ROOT, 1, [d_make_root() is available])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-dentry-operations.m4:28: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_D_OBTAIN_ALIAS], [
	ZFS_LINUX_TEST_SRC([d_obtain_alias], [
		#include <linux/dcache.h>
	], [
		d_obtain_alias(NULL);
	])
])
m4trace:config/kernel-dentry-operations.m4:36: -1- AC_DEFUN([ZFS_AC_KERNEL_D_OBTAIN_ALIAS], [
	AC_MSG_CHECKING([whether d_obtain_alias() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([d_obtain_alias],
	    [d_obtain_alias], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
	])
])
m4trace:config/kernel-dentry-operations.m4:50: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_D_PRUNE_ALIASES], [
	ZFS_LINUX_TEST_SRC([d_prune_aliases], [
		#include <linux/dcache.h>
	], [
		struct inode *ip = NULL;
		d_prune_aliases(ip);
	])
])
m4trace:config/kernel-dentry-operations.m4:59: -1- AC_DEFUN([ZFS_AC_KERNEL_D_PRUNE_ALIASES], [
	AC_MSG_CHECKING([whether d_prune_aliases() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([d_prune_aliases],
	    [d_prune_aliases], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_PRUNE_ALIASES, 1,
		    [d_prune_aliases() is available])
	], [
		ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
	])
])
m4trace:config/kernel-dentry-operations.m4:75: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_D_SET_D_OP], [
	ZFS_LINUX_TEST_SRC([d_set_d_op], [
		#include <linux/dcache.h>
	], [
		d_set_d_op(NULL, NULL);
	])
])
m4trace:config/kernel-dentry-operations.m4:83: -1- AC_DEFUN([ZFS_AC_KERNEL_D_SET_D_OP], [
	AC_MSG_CHECKING([whether d_set_d_op() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([d_set_d_op],
	    [d_set_d_op], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_set_d_op])
	])
])
m4trace:config/kernel-dentry-operations.m4:96: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_D_REVALIDATE_NAMEIDATA], [
	ZFS_LINUX_TEST_SRC([dentry_operations_revalidate], [
		#include <linux/dcache.h>
		#include <linux/sched.h>

		int revalidate (struct dentry *dentry,
		    struct nameidata *nidata) { return 0; }

		static const struct dentry_operations
		    dops __attribute__ ((unused)) = {
			.d_revalidate	= revalidate,
		};
	],[])
])
m4trace:config/kernel-dentry-operations.m4:111: -1- AC_DEFUN([ZFS_AC_KERNEL_D_REVALIDATE_NAMEIDATA], [
	AC_MSG_CHECKING([whether dops->d_revalidate() takes struct nameidata])
	ZFS_LINUX_TEST_RESULT([dentry_operations_revalidate], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_REVALIDATE_NAMEIDATA, 1,
		    [dops->d_revalidate() operation takes nameidata])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-dentry-operations.m4:126: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CONST_DENTRY_OPERATIONS], [
	ZFS_LINUX_TEST_SRC([dentry_operations_const], [
		#include <linux/dcache.h>

		const struct dentry_operations test_d_op = {
			.d_revalidate = NULL,
		};
	],[
		struct dentry d __attribute__ ((unused));
		d.d_op = &test_d_op;
	])
])
m4trace:config/kernel-dentry-operations.m4:139: -1- AC_DEFUN([ZFS_AC_KERNEL_CONST_DENTRY_OPERATIONS], [
	AC_MSG_CHECKING([whether dentry uses const struct dentry_operations])
	ZFS_LINUX_TEST_RESULT([dentry_operations_const], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CONST_DENTRY_OPERATIONS, 1,
		    [dentry uses const struct dentry_operations])
	],[
		ZFS_LINUX_TEST_ERROR([const dentry_operations])
	])
])
m4trace:config/kernel-dentry-operations.m4:154: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_S_D_OP], [
	ZFS_LINUX_TEST_SRC([super_block_s_d_op], [
		#include <linux/fs.h>
	],[
		struct super_block sb __attribute__ ((unused));
		sb.s_d_op = NULL;
	])
])
m4trace:config/kernel-dentry-operations.m4:163: -1- AC_DEFUN([ZFS_AC_KERNEL_S_D_OP], [
	AC_MSG_CHECKING([whether super_block has s_d_op])
	ZFS_LINUX_TEST_RESULT([super_block_s_d_op], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([super_block s_d_op])
	])
])
m4trace:config/kernel-dentry-operations.m4:172: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_DENTRY], [
        ZFS_AC_KERNEL_SRC_D_MAKE_ROOT
        ZFS_AC_KERNEL_SRC_D_OBTAIN_ALIAS
        ZFS_AC_KERNEL_SRC_D_PRUNE_ALIASES
        ZFS_AC_KERNEL_SRC_D_SET_D_OP
        ZFS_AC_KERNEL_SRC_D_REVALIDATE_NAMEIDATA
        ZFS_AC_KERNEL_SRC_CONST_DENTRY_OPERATIONS
        ZFS_AC_KERNEL_SRC_S_D_OP
])
m4trace:config/kernel-dentry-operations.m4:182: -1- AC_DEFUN([ZFS_AC_KERNEL_DENTRY], [
        ZFS_AC_KERNEL_D_MAKE_ROOT
        ZFS_AC_KERNEL_D_OBTAIN_ALIAS
        ZFS_AC_KERNEL_D_PRUNE_ALIASES
        ZFS_AC_KERNEL_D_SET_D_OP
        ZFS_AC_KERNEL_D_REVALIDATE_NAMEIDATA
        ZFS_AC_KERNEL_CONST_DENTRY_OPERATIONS
        ZFS_AC_KERNEL_S_D_OP
])
m4trace:config/kernel-dirty-inode.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_DIRTY_INODE], [
	ZFS_LINUX_TEST_SRC([dirty_inode_with_flags], [
		#include <linux/fs.h>

		void dirty_inode(struct inode *a, int b) { return; }

		static const struct super_operations
		    sops __attribute__ ((unused)) = {
			.dirty_inode = dirty_inode,
		};
	],[])
])
m4trace:config/kernel-dirty-inode.m4:20: -1- AC_DEFUN([ZFS_AC_KERNEL_DIRTY_INODE], [
	AC_MSG_CHECKING([whether sops->dirty_inode() wants flags])
	ZFS_LINUX_TEST_RESULT([dirty_inode_with_flags], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_DIRTY_INODE_WITH_FLAGS, 1,
		    [sops->dirty_inode() wants flags])
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-discard-granularity.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_DISCARD_GRANULARITY], [
	ZFS_LINUX_TEST_SRC([discard_granularity], [
		#include <linux/blkdev.h>
	],[
		struct queue_limits ql __attribute__ ((unused));
		ql.discard_granularity = 0;
	])
])
m4trace:config/kernel-discard-granularity.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_DISCARD_GRANULARITY], [
	AC_MSG_CHECKING([whether ql->discard_granularity is available])
	ZFS_LINUX_TEST_RESULT([discard_granularity], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([ql->discard_granularity])
	])
])
m4trace:config/kernel-encode-fh-inode.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_ENCODE_FH_WITH_INODE], [
	ZFS_LINUX_TEST_SRC([export_operations_encode_fh], [
		#include <linux/exportfs.h>
		int encode_fh(struct inode *inode, __u32 *fh, int *max_len,
		              struct inode *parent) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.encode_fh = encode_fh,
		};
	],[])
])
m4trace:config/kernel-encode-fh-inode.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_ENCODE_FH_WITH_INODE], [
	AC_MSG_CHECKING([whether eops->encode_fh() wants inode])
	ZFS_LINUX_TEST_RESULT([export_operations_encode_fh], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ENCODE_FH_WITH_INODE, 1,
		    [eops->encode_fh() wants child and parent inodes])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-evict-inode.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_EVICT_INODE], [
	ZFS_LINUX_TEST_SRC([evict_inode], [
		#include <linux/fs.h>
		void evict_inode (struct inode * t) { return; }
		static struct super_operations sops __attribute__ ((unused)) = {
			.evict_inode = evict_inode,
		};
	],[])
])
m4trace:config/kernel-evict-inode.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_EVICT_INODE], [
	AC_MSG_CHECKING([whether sops->evict_inode() exists])
	ZFS_LINUX_TEST_RESULT([evict_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_EVICT_INODE, 1, [sops->evict_inode() exists])
	],[
		ZFS_LINUX_TEST_ERROR([evict_inode])
	])
])
m4trace:config/kernel-fadvise.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FADVISE], [
	ZFS_LINUX_TEST_SRC([file_fadvise], [
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fadvise = NULL,
		};
	],[])
])
m4trace:config/kernel-fadvise.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_FADVISE], [
	AC_MSG_CHECKING([whether fops->fadvise() exists])
	ZFS_LINUX_TEST_RESULT([file_fadvise], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_FADVISE, 1, [fops->fadvise() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-fallocate.m4:10: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FALLOCATE], [
	ZFS_LINUX_TEST_SRC([file_fallocate], [
		#include <linux/fs.h>

		long test_fallocate(struct file *file, int mode,
		    loff_t offset, loff_t len) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fallocate = test_fallocate,
		};
	], [])
	ZFS_LINUX_TEST_SRC([falloc_fl_zero_range], [
		#include <linux/falloc.h>
	],[
		int flags __attribute__ ((unused));
		flags = FALLOC_FL_ZERO_RANGE;
	])
])
m4trace:config/kernel-fallocate.m4:30: -1- AC_DEFUN([ZFS_AC_KERNEL_FALLOCATE], [
	AC_MSG_CHECKING([whether fops->fallocate() exists])
	ZFS_LINUX_TEST_RESULT([file_fallocate], [
		AC_MSG_RESULT(yes)
		AC_MSG_CHECKING([whether FALLOC_FL_ZERO_RANGE exists])
		ZFS_LINUX_TEST_RESULT([falloc_fl_zero_range], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FALLOC_FL_ZERO_RANGE, 1, [FALLOC_FL_ZERO_RANGE is defined])
		],[
			AC_MSG_RESULT(no)
		])
	],[
		ZFS_LINUX_TEST_ERROR([file_fallocate])
	])
])
m4trace:config/kernel-file-dentry.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FILE_DENTRY], [
	ZFS_LINUX_TEST_SRC([file_dentry], [
		#include <linux/fs.h>
	],[
		struct file *f = NULL;
		file_dentry(f);
	])
])
m4trace:config/kernel-file-dentry.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_FILE_DENTRY], [
	AC_MSG_CHECKING([whether file_dentry() is available])
	ZFS_LINUX_TEST_RESULT([file_dentry], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_DENTRY, 1, [file_dentry() is available])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-file-inode.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FILE_INODE], [
	ZFS_LINUX_TEST_SRC([file_inode], [
		#include <linux/fs.h>
	],[
		struct file *f = NULL;
		file_inode(f);
	])
])
m4trace:config/kernel-file-inode.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_FILE_INODE], [
	AC_MSG_CHECKING([whether file_inode() is available])
	ZFS_LINUX_TEST_RESULT([file_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_INODE, 1, [file_inode() is available])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-filemap.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FILEMAP], [
	ZFS_LINUX_TEST_SRC([filemap_range_has_page], [
		#include <linux/fs.h>
	],[
		struct address_space *mapping = NULL;
		loff_t lstart = 0;
		loff_t lend = 0;
		bool ret __attribute__ ((unused));

		ret = filemap_range_has_page(mapping, lstart, lend);
	])
])
m4trace:config/kernel-filemap.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_FILEMAP], [
	AC_MSG_CHECKING([whether filemap_range_has_page() is available])
	ZFS_LINUX_TEST_RESULT([filemap_range_has_page], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILEMAP_RANGE_HAS_PAGE, 1,
		[filemap_range_has_page() is available])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-flush_dcache_page.m4:10: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FLUSH_DCACHE_PAGE], [
	ZFS_LINUX_TEST_SRC([flush_dcache_page], [
		#include <asm/cacheflush.h>
	], [
		flush_dcache_page(0);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-flush_dcache_page.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_FLUSH_DCACHE_PAGE], [
	AC_MSG_CHECKING([whether flush_dcache_page() is GPL-only])
	ZFS_LINUX_TEST_RESULT([flush_dcache_page_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FLUSH_DCACHE_PAGE_GPL_ONLY, 1,
		    [flush_dcache_page() is GPL-only])
	])
])
m4trace:config/kernel-fmode-t.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FMODE_T], [
	ZFS_LINUX_TEST_SRC([type_fmode_t], [
		#include <linux/types.h>
	],[
		fmode_t *ptr __attribute__ ((unused));
	])
])
m4trace:config/kernel-fmode-t.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_FMODE_T], [
	AC_MSG_CHECKING([whether kernel defines fmode_t])
	ZFS_LINUX_TEST_RESULT([type_fmode_t], [
		AC_MSG_RESULT([yes])
	],[
		ZFS_LINUX_TEST_ERROR([type_fmode_t])
	])
])
m4trace:config/kernel-follow-down-one.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FOLLOW_DOWN_ONE], [
	ZFS_LINUX_TEST_SRC([follow_down_one], [
		#include <linux/namei.h>
	],[
		struct path *p = NULL;
		follow_down_one(p);
	])
])
m4trace:config/kernel-follow-down-one.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_FOLLOW_DOWN_ONE], [
	AC_MSG_CHECKING([whether follow_down_one() is available])
	ZFS_LINUX_TEST_RESULT([follow_down_one], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([follow_down_one()])
	])
])
m4trace:config/kernel-fpu.m4:24: -1- AC_DEFUN([ZFS_AC_KERNEL_FPU_HEADER], [
	AC_MSG_CHECKING([whether fpu headers are available])
	ZFS_LINUX_TRY_COMPILE([
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	],[
	],[
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	],[
		AC_MSG_RESULT([i387.h])
	])

])
m4trace:config/kernel-fpu.m4:51: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FPU], [
	ZFS_LINUX_TEST_SRC([kernel_fpu], [
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	], [
		kernel_fpu_begin();
		kernel_fpu_end();
	], [], [ZFS_META_LICENSE])

	ZFS_LINUX_TEST_SRC([__kernel_fpu], [
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	], [
		__kernel_fpu_begin();
		__kernel_fpu_end();
	], [], [ZFS_META_LICENSE])

])
m4trace:config/kernel-fpu.m4:84: -1- AC_DEFUN([ZFS_AC_KERNEL_FPU], [
	dnl #
	dnl # Legacy kernel
	dnl #
	AC_MSG_CHECKING([whether kernel fpu is available])
	ZFS_LINUX_TEST_RESULT([kernel_fpu_license], [
		AC_MSG_RESULT(kernel_fpu_*)
		AC_DEFINE(HAVE_KERNEL_FPU, 1,
		    [kernel has kernel_fpu_* functions])
		AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
		    [kernel exports FPU functions])
	],[
		dnl #
		dnl # Linux 4.2 kernel
		dnl #
		ZFS_LINUX_TEST_RESULT_SYMBOL([__kernel_fpu_license],
		    [__kernel_fpu_begin],
		    [arch/x86/kernel/fpu/core.c arch/x86/kernel/i387.c], [
			AC_MSG_RESULT(__kernel_fpu_*)
			AC_DEFINE(HAVE_UNDERSCORE_KERNEL_FPU, 1,
			    [kernel has __kernel_fpu_* functions])
			AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
			    [kernel exports FPU functions])
		],[
			AC_MSG_RESULT(internal)
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL, 1,
			    [kernel fpu internal])
		])
	])
])
m4trace:config/kernel-fst-mount.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FST_MOUNT], [
        ZFS_LINUX_TEST_SRC([file_system_type_mount], [
                #include <linux/fs.h>

                static struct dentry *
                mount(struct file_system_type *fs_type, int flags,
                    const char *osname, void *data) {
                        struct dentry *d = NULL;
                        return (d);
                }

                static struct file_system_type fst __attribute__ ((unused)) = {
                        .mount = mount,
                };
        ],[])
])
m4trace:config/kernel-fst-mount.m4:23: -1- AC_DEFUN([ZFS_AC_KERNEL_FST_MOUNT], [
        AC_MSG_CHECKING([whether fst->mount() exists])
        ZFS_LINUX_TEST_RESULT([file_system_type_mount], [
                AC_MSG_RESULT(yes)
        ],[
		ZFS_LINUX_TEST_ERROR([fst->mount()])
        ])
])
m4trace:config/kernel-fsync.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_FSYNC], [
	ZFS_LINUX_TEST_SRC([fsync_without_dentry], [
		#include <linux/fs.h>

		int test_fsync(struct file *f, int x) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	],[])

	ZFS_LINUX_TEST_SRC([fsync_range], [
		#include <linux/fs.h>

		int test_fsync(struct file *f, loff_t a, loff_t b, int c)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	],[])
])
m4trace:config/kernel-fsync.m4:29: -1- AC_DEFUN([ZFS_AC_KERNEL_FSYNC], [
	dnl #
	dnl # Linux 2.6.35 - Linux 3.0 API
	dnl #
	AC_MSG_CHECKING([whether fops->fsync() wants no dentry])
	ZFS_LINUX_TEST_RESULT([fsync_without_dentry], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_FSYNC_WITHOUT_DENTRY, 1,
		    [fops->fsync() without dentry])
	],[
		AC_MSG_RESULT([no])

		dnl #
		dnl # Linux 3.1 - 3.x API
		dnl #
		AC_MSG_CHECKING([whether fops->fsync() wants range])
		ZFS_LINUX_TEST_RESULT([fsync_range], [
			AC_MSG_RESULT([range])
			AC_DEFINE(HAVE_FSYNC_RANGE, 1,
			    [fops->fsync() with range])
		],[
			ZFS_LINUX_TEST_ERROR([fops->fsync])
		])
	])
])
m4trace:config/kernel-generic_fadvise.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_FADVISE], [
	ZFS_LINUX_TEST_SRC([generic_fadvise], [
		#include <linux/fs.h>
	], [
		struct file *fp __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t len __attribute__ ((unused)) = 0;
		int advise __attribute__ ((unused)) = 0;
		generic_fadvise(fp, offset, len, advise);
	])
])
m4trace:config/kernel-generic_fadvise.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_GENERIC_FADVISE], [
	AC_MSG_CHECKING([whether generic_fadvise() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([generic_fadvise],
	[generic_fadvise], [mm/fadvise.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_FADVISE, 1, [yes])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-generic_fillattr.m4:10: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_FILLATTR], [
	ZFS_LINUX_TEST_SRC([generic_fillattr_userns], [
		#include <linux/fs.h>
	],[
		struct user_namespace *userns = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(userns, in, k);
	])

	ZFS_LINUX_TEST_SRC([generic_fillattr_mnt_idmap], [
		#include <linux/fs.h>
	],[
		struct mnt_idmap *idmap = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(idmap, in, k);
	])
])
m4trace:config/kernel-generic_fillattr.m4:30: -1- AC_DEFUN([ZFS_AC_KERNEL_GENERIC_FILLATTR], [
	AC_MSG_CHECKING([whether generic_fillattr requires struct mnt_idmap*])
	ZFS_LINUX_TEST_RESULT([generic_fillattr_mnt_idmap], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_GENERIC_FILLATTR_IDMAP, 1,
		    [generic_fillattr requires struct mnt_idmap*])
	],[
		AC_MSG_CHECKING([whether generic_fillattr requires struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([generic_fillattr_userns], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_GENERIC_FILLATTR_USERNS, 1,
			    [generic_fillattr requires struct user_namespace*])
		],[
			AC_MSG_RESULT([no])
		])
	])
])
m4trace:config/kernel-generic_io_acct.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT], [
	ZFS_LINUX_TEST_SRC([bdev_io_acct_63], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_op(bio),
		    passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), bio_sectors(bio), start_time);
	])

	ZFS_LINUX_TEST_SRC([bdev_io_acct_old], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_sectors(bio),
		    bio_op(bio), passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), start_time);
	])

	ZFS_LINUX_TEST_SRC([disk_io_acct], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio));
		disk_end_io_acct(disk, bio_op(bio), start_time);
	])

	ZFS_LINUX_TEST_SRC([bio_io_acct], [
		#include <linux/blkdev.h>
	], [
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = bio_start_io_acct(bio);
		bio_end_io_acct(bio, start_time);
	])

	ZFS_LINUX_TEST_SRC([generic_acct_3args], [
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(int, unsigned long,
		    struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(int, struct hd_struct *,
		    unsigned long) = &generic_end_io_acct;
	], [
		generic_start_io_acct(0, 0, NULL);
		generic_end_io_acct(0, NULL, 0);
	])

	ZFS_LINUX_TEST_SRC([generic_acct_4args], [
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(struct request_queue *, int,
		    unsigned long, struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(struct request_queue *, int,
		    struct hd_struct *, unsigned long) = &generic_end_io_acct;
	], [
		generic_start_io_acct(NULL, 0, 0, NULL);
		generic_end_io_acct(NULL, 0, NULL, 0);
	])
])
m4trace:config/kernel-generic_io_acct.m4:77: -1- AC_DEFUN([ZFS_AC_KERNEL_GENERIC_IO_ACCT], [
	dnl #
	dnl # Linux 6.3, and then backports thereof, changed
	dnl # the signatures on bdev_start_io_acct/bdev_end_io_acct
	dnl #
	AC_MSG_CHECKING([whether 6.3+ bdev_*_io_acct() are available])
	ZFS_LINUX_TEST_RESULT([bdev_io_acct_63], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_IO_ACCT_63, 1, [bdev_*_io_acct() available])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 5.19 API,
		dnl #
		dnl # disk_start_io_acct() and disk_end_io_acct() have been replaced by
		dnl # bdev_start_io_acct() and bdev_end_io_acct().
		dnl #
		AC_MSG_CHECKING([whether pre-6.3 bdev_*_io_acct() are available])
		ZFS_LINUX_TEST_RESULT([bdev_io_acct_old], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BDEV_IO_ACCT_OLD, 1, [bdev_*_io_acct() available])
		], [
			AC_MSG_RESULT(no)
			dnl #
			dnl # 5.12 API,
			dnl #
			dnl # bio_start_io_acct() and bio_end_io_acct() became GPL-exported
			dnl # so use disk_start_io_acct() and disk_end_io_acct() instead
			dnl #
			AC_MSG_CHECKING([whether generic disk_*_io_acct() are available])
			ZFS_LINUX_TEST_RESULT([disk_io_acct], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 5.7 API,
				dnl #
				dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
				dnl #
				AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
				ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
			])
		])
	])
])
m4trace:config/kernel-generic_readlink.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_READLINK_GLOBAL], [
	ZFS_LINUX_TEST_SRC([generic_readlink_global], [
		#include <linux/fs.h>
	],[
		int i __attribute__ ((unused));
		i = generic_readlink(NULL, NULL, 0);
	])
])
m4trace:config/kernel-generic_readlink.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_GENERIC_READLINK_GLOBAL], [
	AC_MSG_CHECKING([whether generic_readlink is global])
	ZFS_LINUX_TEST_RESULT([generic_readlink_global], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_GENERIC_READLINK, 1,
		    [generic_readlink is global])
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-genhd-flags.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GENHD_FLAGS], [

	ZFS_LINUX_TEST_SRC([genhd_fl_ext_devt], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_EXT_DEVT;
	])

	ZFS_LINUX_TEST_SRC([genhd_fl_no_part], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART;
	])

	ZFS_LINUX_TEST_SRC([genhd_fl_no_part_scan], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART_SCAN;
	])
])
m4trace:config/kernel-genhd-flags.m4:28: -1- AC_DEFUN([ZFS_AC_KERNEL_GENHD_FLAGS], [

	AC_MSG_CHECKING([whether GENHD_FL_EXT_DEVT flag is available])
	ZFS_LINUX_TEST_RESULT([genhd_fl_ext_devt], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GENHD_FL_EXT_DEVT, GENHD_FL_EXT_DEVT,
		    [GENHD_FL_EXT_DEVT flag is available])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(ZFS_GENHD_FL_EXT_DEVT, 0,
		    [GENHD_FL_EXT_DEVT flag is not available])
	])

	AC_MSG_CHECKING([whether GENHD_FL_NO_PART flag is available])
	ZFS_LINUX_TEST_RESULT([genhd_fl_no_part], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GENHD_FL_NO_PART, GENHD_FL_NO_PART,
		    [GENHD_FL_NO_PART flag is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether GENHD_FL_NO_PART_SCAN flag is available])
		ZFS_LINUX_TEST_RESULT([genhd_fl_no_part_scan], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(ZFS_GENHD_FL_NO_PART, GENHD_FL_NO_PART_SCAN,
			    [GENHD_FL_NO_PART_SCAN flag is available])
		], [
			ZFS_LINUX_TEST_ERROR([GENHD_FL_NO_PART|GENHD_FL_NO_PART_SCAN])
		])
	])
])
m4trace:config/kernel-get-disk-ro.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GET_DISK_RO], [
	ZFS_LINUX_TEST_SRC([get_disk_ro], [
		#include <linux/blkdev.h>
	],[
		struct gendisk *disk __attribute__ ((unused)) = NULL;
		(void) get_disk_ro(disk);
	], [])
])
m4trace:config/kernel-get-disk-ro.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_GET_DISK_RO], [
	AC_MSG_CHECKING([whether get_disk_ro() is available])
	ZFS_LINUX_TEST_RESULT([get_disk_ro], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([get_disk_ro()])
	])
])
m4trace:config/kernel-get-link.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GET_LINK], [
	ZFS_LINUX_TEST_SRC([inode_operations_get_link], [
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct inode *ip,
		    struct delayed_call *done) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	],[])

	ZFS_LINUX_TEST_SRC([inode_operations_get_link_cookie], [
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct
		    inode *ip, void **cookie) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	],[])

	ZFS_LINUX_TEST_SRC([inode_operations_follow_link], [
		#include <linux/fs.h>
		const char *follow_link(struct dentry *de,
		    void **cookie) { return "symlink"; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	],[])

	ZFS_LINUX_TEST_SRC([inode_operations_follow_link_nameidata], [
		#include <linux/fs.h>
		void *follow_link(struct dentry *de, struct
		    nameidata *nd) { return (void *)NULL; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	],[])
])
m4trace:config/kernel-get-link.m4:47: -1- AC_DEFUN([ZFS_AC_KERNEL_GET_LINK], [
	dnl #
	dnl # 4.5 API change
	dnl # The get_link interface has added a delayed done call and
	dnl # used it to retire the put_link() interface.
	dnl #
	AC_MSG_CHECKING([whether iops->get_link() passes delayed])
	ZFS_LINUX_TEST_RESULT([inode_operations_get_link], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GET_LINK_DELAYED, 1, [iops->get_link() delayed])
	],[
		AC_MSG_RESULT(no)

		dnl #
		dnl # 4.5 API change
		dnl # The follow_link() interface has been replaced by
		dnl # get_link() which behaves the same as before except:
		dnl # - An inode is passed as a separate argument
		dnl # - When called in RCU mode a NULL dentry is passed.
		dnl #
		AC_MSG_CHECKING([whether iops->get_link() passes cookie])
		ZFS_LINUX_TEST_RESULT([inode_operations_get_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_LINK_COOKIE, 1,
			    [iops->get_link() cookie])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 4.2 API change
			dnl # This kernel retired the nameidata structure.
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->follow_link() passes cookie])
			ZFS_LINUX_TEST_RESULT([inode_operations_follow_link], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_FOLLOW_LINK_COOKIE, 1,
				    [iops->follow_link() cookie])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # 2.6.32 API
				dnl #
				AC_MSG_CHECKING(
				[whether iops->follow_link() passes nameidata])
				ZFS_LINUX_TEST_RESULT(
				    [inode_operations_follow_link_nameidata],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				],[
					ZFS_LINUX_TEST_ERROR([get_link])
				])
			])
		])
	])
])
m4trace:config/kernel-global_page_state.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GLOBAL_NODE_PAGE_STATE], [
	ZFS_LINUX_TEST_SRC([global_node_page_state], [
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	],[
		(void) global_node_page_state(0);
	])
])
m4trace:config/kernel-global_page_state.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_GLOBAL_NODE_PAGE_STATE], [
	AC_MSG_CHECKING([whether global_node_page_state() exists])
	ZFS_LINUX_TEST_RESULT([global_node_page_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GLOBAL_NODE_PAGE_STATE, 1,
		    [global_node_page_state() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-global_page_state.m4:32: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GLOBAL_ZONE_PAGE_STATE], [
	ZFS_LINUX_TEST_SRC([global_zone_page_state], [
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	],[
		(void) global_zone_page_state(0);
	])
])
m4trace:config/kernel-global_page_state.m4:41: -1- AC_DEFUN([ZFS_AC_KERNEL_GLOBAL_ZONE_PAGE_STATE], [
	AC_MSG_CHECKING([whether global_zone_page_state() exists])
	ZFS_LINUX_TEST_RESULT([global_zone_page_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GLOBAL_ZONE_PAGE_STATE, 1,
		    [global_zone_page_state() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-global_page_state.m4:55: -1- AC_DEFUN([ZFS_AC_KERNEL_ENUM_MEMBER], [
	AC_MSG_CHECKING([whether enum $2 contains $1])
	AS_IF([AC_TRY_COMMAND(
	    "${srcdir}/scripts/enum-extract.pl" "$2" "$3" | grep -Eqx $1)],[
		AC_MSG_RESULT([yes])
		AC_DEFINE(m4_join([_], [ZFS_ENUM], m4_toupper($2), $1), 1,
		    [enum $2 contains $1])
		m4_join([_], [ZFS_ENUM], m4_toupper($2), $1)=1
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-global_page_state.m4:71: -1- AC_DEFUN([ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR], [
	AC_MSG_RESULT(no)
	AC_MSG_RESULT([$1 in either node_stat_item or zone_stat_item: $2])
	ZFS_LINUX_TEST_ERROR([global page state])
])
m4trace:config/kernel-global_page_state.m4:77: -1- AC_DEFUN([ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK], [
	enum_check_a="m4_join([_], [$ZFS_ENUM_NODE_STAT_ITEM], $1)"
	enum_check_b="m4_join([_], [$ZFS_ENUM_ZONE_STAT_ITEM], $1)"
	AS_IF([test -n "$enum_check_a" -a -n "$enum_check_b"],[
		ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([$1], [DUPLICATE])
	])
	AS_IF([test -z "$enum_check_a" -a -z "$enum_check_b"],[
		ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([$1], [NOT FOUND])
	])
])
m4trace:config/kernel-global_page_state.m4:91: -1- AC_DEFUN([ZFS_AC_KERNEL_GLOBAL_ZONE_PAGE_STATE_SANITY], [
	AC_MSG_CHECKING([whether global_page_state enums are sane])

	ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_FILE_PAGES])
	ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_INACTIVE_ANON])
	ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_INACTIVE_FILE])

	AC_MSG_RESULT(yes)
])
m4trace:config/kernel-global_page_state.m4:101: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GLOBAL_PAGE_STATE], [
	ZFS_AC_KERNEL_SRC_GLOBAL_NODE_PAGE_STATE
	ZFS_AC_KERNEL_SRC_GLOBAL_ZONE_PAGE_STATE
])
m4trace:config/kernel-global_page_state.m4:109: -1- AC_DEFUN([ZFS_AC_KERNEL_GLOBAL_PAGE_STATE], [
	ZFS_AC_KERNEL_GLOBAL_NODE_PAGE_STATE
	ZFS_AC_KERNEL_GLOBAL_ZONE_PAGE_STATE

	ZFS_AC_KERNEL_ENUM_MEMBER([NR_FILE_PAGES],
	    [node_stat_item], [$LINUX/include/linux/mmzone.h])
	ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_ANON],
	    [node_stat_item], [$LINUX/include/linux/mmzone.h])
	ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_FILE],
	    [node_stat_item], [$LINUX/include/linux/mmzone.h])

	ZFS_AC_KERNEL_ENUM_MEMBER([NR_FILE_PAGES],
	    [zone_stat_item], [$LINUX/include/linux/mmzone.h])
	ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_ANON],
	    [zone_stat_item], [$LINUX/include/linux/mmzone.h])
	ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_FILE],
	    [zone_stat_item], [$LINUX/include/linux/mmzone.h])

	ZFS_AC_KERNEL_GLOBAL_ZONE_PAGE_STATE_SANITY
])
m4trace:config/kernel-group-info.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GROUP_INFO_GID], [
	ZFS_LINUX_TEST_SRC([group_info_gid], [
		#include <linux/cred.h>
	],[
		struct group_info gi __attribute__ ((unused)) = {};
		gi.gid[0] = KGIDT_INIT(0);
	])
])
m4trace:config/kernel-group-info.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_GROUP_INFO_GID], [
	AC_MSG_CHECKING([whether group_info->gid exists])
	ZFS_LINUX_TEST_RESULT([group_info_gid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GROUP_INFO_GID, 1, [group_info->gid exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-hotplug.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CPU_HOTPLUG], [
	ZFS_LINUX_TEST_SRC([cpu_hotplug], [
		#include <linux/cpuhotplug.h>
	],[
		enum cpuhp_state state = CPUHP_ONLINE;
		int (*fp)(unsigned int, struct hlist_node *) = NULL;
		cpuhp_state_add_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_state_remove_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_setup_state_multi(state, "", fp, fp);
		cpuhp_remove_multi_state(0);
	])
])
m4trace:config/kernel-hotplug.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_CPU_HOTPLUG], [
	AC_MSG_CHECKING([whether CPU hotplug APIs exist])
	ZFS_LINUX_TEST_RESULT([cpu_hotplug], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CPU_HOTPLUG, 1, [yes])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-iattr-vfsid.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_IATTR_VFSID], [
	ZFS_LINUX_TEST_SRC([iattr_vfsid], [
		#include <linux/fs.h>
	], [
		struct iattr ia;
		ia.ia_vfsuid = (vfsuid_t){0};
		ia.ia_vfsgid = (vfsgid_t){0};
	])
])
m4trace:config/kernel-iattr-vfsid.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_IATTR_VFSID], [
	AC_MSG_CHECKING([whether iattr->ia_vfsuid and iattr->ia_vfsgid exist])
	ZFS_LINUX_TEST_RESULT([iattr_vfsid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IATTR_VFSID, 1,
		    [iattr->ia_vfsuid and iattr->ia_vfsgid exist])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-idmap_mnt_api.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_IDMAP_MNT_API], [
        ZFS_LINUX_TEST_SRC([idmap_mnt_api], [
                #include <linux/fs.h>
        ],[
		int fs_flags = 0;
		fs_flags |= FS_ALLOW_IDMAP;
        ])
])
m4trace:config/kernel-idmap_mnt_api.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_IDMAP_MNT_API], [
        AC_MSG_CHECKING([whether APIs for idmapped mount are present])
        ZFS_LINUX_TEST_RESULT([idmap_mnt_api], [
                AC_MSG_RESULT([yes])
                AC_DEFINE(HAVE_IDMAP_MNT_API, 1,
                    [APIs for idmapped mount are present])
        ],[
                AC_MSG_RESULT([no])
        ])
])
m4trace:config/kernel-in-compat-syscall.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_IN_COMPAT_SYSCALL], [
	ZFS_LINUX_TEST_SRC([in_compat_syscall], [
		#include <linux/compat.h>
	],[
		in_compat_syscall();
	])
])
m4trace:config/kernel-in-compat-syscall.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_IN_COMPAT_SYSCALL], [
	AC_MSG_CHECKING([whether in_compat_syscall() is available])
	ZFS_LINUX_TEST_RESULT([in_compat_syscall], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IN_COMPAT_SYSCALL, 1,
		    [in_compat_syscall() is available])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-inode-create.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CREATE], [
	dnl #
	dnl # 6.3 API change
	dnl # The first arg is changed to struct mnt_idmap *
	dnl #
	ZFS_LINUX_TEST_SRC([create_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create         = inode_create,
		};
	],[])

	dnl #
	dnl # 5.12 API change that added the struct user_namespace* arg
	dnl # to the front of this function type's arg list.
	dnl #
	ZFS_LINUX_TEST_SRC([create_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	],[])

	dnl #
	dnl # 3.6 API change
	dnl #
	ZFS_LINUX_TEST_SRC([create_flags], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	],[])
])
m4trace:config/kernel-inode-create.m4:55: -1- AC_DEFUN([ZFS_AC_KERNEL_CREATE], [
	AC_MSG_CHECKING([whether iops->create() takes struct mnt_idmap*])
	ZFS_LINUX_TEST_RESULT([create_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_CREATE_IDMAP, 1,
		   [iops->create() takes struct mnt_idmap*])
	],[
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether iops->create() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([create_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_CREATE_USERNS, 1,
			   [iops->create() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->create() passes flags])
			ZFS_LINUX_TEST_RESULT([create_flags], [
				AC_MSG_RESULT(yes)
			],[
				ZFS_LINUX_TEST_ERROR([iops->create()])
			])
		])
	])
])
m4trace:config/kernel-inode-getattr.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_GETATTR], [
	dnl #
	dnl # Linux 6.3 API
	dnl # The first arg of getattr I/O operations handler type
	dnl # is changed to struct mnt_idmap*
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_getattr_mnt_idmap], [
		#include <linux/fs.h>

		int test_getattr(
		    struct mnt_idmap *idmap,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	],[])

	dnl #
	dnl # Linux 5.12 API
	dnl # The getattr I/O operations handler type was extended to require
	dnl # a struct user_namespace* as its first arg, to support idmapped
	dnl # mounts.
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_getattr_userns], [
		#include <linux/fs.h>

		int test_getattr(
			struct user_namespace *userns,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	],[])

	dnl #
	dnl # Linux 4.11 API
	dnl # See torvalds/linux@a528d35
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_getattr_path], [
		#include <linux/fs.h>

		int test_getattr(
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	],[])

	ZFS_LINUX_TEST_SRC([inode_operations_getattr_vfsmount], [
		#include <linux/fs.h>

		int test_getattr(
		    struct vfsmount *mnt, struct dentry *d,
		    struct kstat *k)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	],[])
])
m4trace:config/kernel-inode-getattr.m4:76: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_GETATTR], [
	dnl #
	dnl # Kernel 6.3 test
	dnl #
	AC_MSG_CHECKING([whether iops->getattr() takes mnt_idmap])
	ZFS_LINUX_TEST_RESULT([inode_operations_getattr_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IDMAP_IOPS_GETATTR, 1,
		    [iops->getattr() takes struct mnt_idmap*])
	],[
		AC_MSG_RESULT(no)
		dnl #
		dnl # Kernel 5.12 test
		dnl #
		AC_MSG_CHECKING([whether iops->getattr() takes user_namespace])
		ZFS_LINUX_TEST_RESULT([inode_operations_getattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_GETATTR, 1,
			    [iops->getattr() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # Kernel 4.11 test
			dnl #
			AC_MSG_CHECKING([whether iops->getattr() takes a path])
			ZFS_LINUX_TEST_RESULT([inode_operations_getattr_path], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PATH_IOPS_GETATTR, 1,
					[iops->getattr() takes a path])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Kernel < 4.11 test
				dnl #
				AC_MSG_CHECKING([whether iops->getattr() takes a vfsmount])
				ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				],[
					AC_MSG_RESULT(no)
				])
			])
		])
	])
])
m4trace:config/kernel-inode-lock.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_LOCK], [
	ZFS_LINUX_TEST_SRC([inode_lock], [
		#include <linux/fs.h>
	],[
		struct inode *inode = NULL;
		inode_lock_shared(inode);
	])
])
m4trace:config/kernel-inode-lock.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_LOCK], [
	AC_MSG_CHECKING([whether inode_lock_shared() exists])
	ZFS_LINUX_TEST_RESULT([inode_lock], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_LOCK_SHARED, 1, [yes])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-inode-lookup.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_LOOKUP_FLAGS], [
	ZFS_LINUX_TEST_SRC([lookup_flags], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		struct dentry *inode_lookup(struct inode *inode,
		    struct dentry *dentry, unsigned int flags) { return NULL; }

		static const struct inode_operations iops
		    __attribute__ ((unused)) = {
			.lookup	= inode_lookup,
		};
	],[])
])
m4trace:config/kernel-inode-lookup.m4:19: -1- AC_DEFUN([ZFS_AC_KERNEL_LOOKUP_FLAGS], [
	AC_MSG_CHECKING([whether iops->lookup() passes flags])
	ZFS_LINUX_TEST_RESULT([lookup_flags], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([iops->lookup()])
	])
])
m4trace:config/kernel-inode-permission.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PERMISSION], [
	dnl #
	dnl # 6.3 API change
	dnl # iops->permission() now takes struct mnt_idmap*
	dnl # as its first arg
	dnl #
	ZFS_LINUX_TEST_SRC([permission_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct mnt_idmap *idmap,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission             = inode_permission,
		};
	],[])

	dnl #
	dnl # 5.12 API change that added the struct user_namespace* arg
	dnl # to the front of this function type's arg list.
	dnl #
	ZFS_LINUX_TEST_SRC([permission_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct user_namespace *userns,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission		= inode_permission,
		};
	],[])
])
m4trace:config/kernel-inode-permission.m4:38: -1- AC_DEFUN([ZFS_AC_KERNEL_PERMISSION], [
	AC_MSG_CHECKING([whether iops->permission() takes struct mnt_idmap*])
	ZFS_LINUX_TEST_RESULT([permission_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_PERMISSION_IDMAP, 1,
		   [iops->permission() takes struct mnt_idmap*])
	],[
		AC_MSG_CHECKING([whether iops->permission() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([permission_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_PERMISSION_USERNS, 1,
			   [iops->permission() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
])
m4trace:config/kernel-inode-set-flags.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_SET_FLAGS], [
	ZFS_LINUX_TEST_SRC([inode_set_flags], [
		#include <linux/fs.h>
	],[
		struct inode inode;
		inode_set_flags(&inode, S_IMMUTABLE, S_IMMUTABLE);
	])
])
m4trace:config/kernel-inode-set-flags.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_SET_FLAGS], [
	AC_MSG_CHECKING([whether inode_set_flags() exists])
	ZFS_LINUX_TEST_RESULT([inode_set_flags], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_SET_FLAGS, 1, [inode_set_flags() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-inode-set-iversion.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_SET_IVERSION], [
	ZFS_LINUX_TEST_SRC([inode_set_iversion], [
		#include <linux/iversion.h>
	],[
		struct inode inode;
		inode_set_iversion(&inode, 1);
	])
])
m4trace:config/kernel-inode-set-iversion.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_SET_IVERSION], [
	AC_MSG_CHECKING([whether inode_set_iversion() exists])
	ZFS_LINUX_TEST_RESULT([inode_set_iversion], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_SET_IVERSION, 1,
		    [inode_set_iversion() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-inode-setattr.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_SETATTR], [
	dnl #
	dnl # Linux 6.3 API
	dnl # The first arg of setattr I/O operations handler type
	dnl # is changed to struct mnt_idmap*
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_setattr_mnt_idmap], [
		#include <linux/fs.h>

		int test_setattr(
		    struct mnt_idmap *idmap,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	],[])

	dnl #
	dnl # Linux 5.12 API
	dnl # The setattr I/O operations handler type was extended to require
	dnl # a struct user_namespace* as its first arg, to support idmapped
	dnl # mounts.
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_setattr_userns], [
		#include <linux/fs.h>

		int test_setattr(
		    struct user_namespace *userns,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	],[])

	ZFS_LINUX_TEST_SRC([inode_operations_setattr], [
		#include <linux/fs.h>

		int test_setattr(
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	],[])
])
m4trace:config/kernel-inode-setattr.m4:55: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_SETATTR], [
	dnl #
	dnl # Kernel 6.3 test
	dnl #
	AC_MSG_CHECKING([whether iops->setattr() takes mnt_idmap])
	ZFS_LINUX_TEST_RESULT([inode_operations_setattr_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IDMAP_IOPS_SETATTR, 1,
		    [iops->setattr() takes struct mnt_idmap*])
	],[
		AC_MSG_RESULT(no)
		dnl #
		dnl # Kernel 5.12 test
		dnl #
		AC_MSG_CHECKING([whether iops->setattr() takes user_namespace])
		ZFS_LINUX_TEST_RESULT([inode_operations_setattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_SETATTR, 1,
			    [iops->setattr() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->setattr() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_setattr], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_IOPS_SETATTR, 1,
					[iops->setattr() exists])
			],[
				AC_MSG_RESULT(no)
			])
		])
	])
])
m4trace:config/kernel-inode-times.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_TIMES], [

	dnl #
	dnl # 5.6 API change
	dnl # timespec64_trunc() replaced by timestamp_truncate() interface.
	dnl #
	ZFS_LINUX_TEST_SRC([timestamp_truncate], [
		#include <linux/fs.h>
	],[
		struct timespec64 ts;
		struct inode ip;

		memset(&ts, 0, sizeof(ts));
		ts = timestamp_truncate(ts, &ip);
	])

	dnl #
	dnl # 4.18 API change
	dnl # i_atime, i_mtime, and i_ctime changed from timespec to timespec64.
	dnl #
	ZFS_LINUX_TEST_SRC([inode_times], [
		#include <linux/fs.h>
	],[
		struct inode ip;
		struct timespec ts;

		memset(&ip, 0, sizeof(ip));
		ts = ip.i_mtime;
	])
])
m4trace:config/kernel-inode-times.m4:32: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_TIMES], [
	AC_MSG_CHECKING([whether timestamp_truncate() exists])
	ZFS_LINUX_TEST_RESULT([timestamp_truncate], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_TIMESTAMP_TRUNCATE, 1,
		    [timestamp_truncate() exists])
	],[
		AC_MSG_RESULT(no)
	])

	AC_MSG_CHECKING([whether inode->i_*time's are timespec64])
	ZFS_LINUX_TEST_RESULT([inode_times], [
		AC_MSG_RESULT(no)
	],[
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_TIMESPEC64_TIMES, 1,
		    [inode->i_*time's are timespec64])
	])
])
m4trace:config/kernel-insert-inode-locked.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INSERT_INODE_LOCKED], [
	ZFS_LINUX_TEST_SRC([insert_inode_locked], [
		#include <linux/fs.h>
	], [
		insert_inode_locked(NULL);
	])
])
m4trace:config/kernel-insert-inode-locked.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_INSERT_INODE_LOCKED], [
	AC_MSG_CHECKING([whether insert_inode_locked() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([insert_inode_locked],
	    [insert_inode_locked], [fs/inode.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
	])
])
m4trace:config/kernel-is_owner_or_cap.m4:11: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_INODE_OWNER_OR_CAPABLE], [
	ZFS_LINUX_TEST_SRC([inode_owner_or_capable], [
		#include <linux/fs.h>
	],[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(ip);
	])

	ZFS_LINUX_TEST_SRC([inode_owner_or_capable_userns], [
		#include <linux/fs.h>
	],[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&init_user_ns, ip);
	])

	ZFS_LINUX_TEST_SRC([inode_owner_or_capable_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/mnt_idmapping.h>
	],[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&nop_mnt_idmap, ip);
	])
])
m4trace:config/kernel-is_owner_or_cap.m4:35: -1- AC_DEFUN([ZFS_AC_KERNEL_INODE_OWNER_OR_CAPABLE], [
	AC_MSG_CHECKING([whether inode_owner_or_capable() exists])
	ZFS_LINUX_TEST_RESULT([inode_owner_or_capable], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE, 1,
		    [inode_owner_or_capable() exists])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING(
		    [whether inode_owner_or_capable() takes user_ns])
		ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_USERNS, 1,
			    [inode_owner_or_capable() takes user_ns])
		],[
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether inode_owner_or_capable() takes mnt_idmap])
			ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_mnt_idmap], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_IDMAP, 1,
				    [inode_owner_or_capable() takes mnt_idmap])
			], [
				ZFS_LINUX_TEST_ERROR([capability])
			])
		])
	])
])
m4trace:config/kernel-kmap-atomic-args.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KMAP_ATOMIC_ARGS], [
	ZFS_LINUX_TEST_SRC([kmap_atomic], [
		#include <linux/pagemap.h>
	],[
		struct page page;
		kmap_atomic(&page);
	])
])
m4trace:config/kernel-kmap-atomic-args.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_KMAP_ATOMIC_ARGS], [
	AC_MSG_CHECKING([whether kmap_atomic wants 1 args])
	ZFS_LINUX_TEST_RESULT([kmap_atomic], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([kmap_atomic()])
	])
])
m4trace:config/kernel-kmem-cache.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KMEM_CACHE_CREATE_USERCOPY], [
	ZFS_LINUX_TEST_SRC([kmem_cache_create_usercopy], [
		#include <linux/slab.h>
		static void ctor(void *foo) { /* fake ctor */ }
	],[
		struct kmem_cache *skc_linux_cache;
		const char *name = "test";
		size_t size = 4096;
		size_t align = 8;
		unsigned long flags = 0;
		size_t useroffset = 0;
		size_t usersize = size - useroffset;

		skc_linux_cache = kmem_cache_create_usercopy(
		    name, size, align, flags, useroffset, usersize, ctor);
	])
])
m4trace:config/kernel-kmem-cache.m4:24: -1- AC_DEFUN([ZFS_AC_KERNEL_KMEM_CACHE_CREATE_USERCOPY], [
	AC_MSG_CHECKING([whether kmem_cache_create_usercopy() exists])
	ZFS_LINUX_TEST_RESULT([kmem_cache_create_usercopy], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KMEM_CACHE_CREATE_USERCOPY, 1,
		    [kmem_cache_create_usercopy() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-kmem-cache.m4:35: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KMEM_CACHE], [
	ZFS_AC_KERNEL_SRC_KMEM_CACHE_CREATE_USERCOPY
])
m4trace:config/kernel-kmem-cache.m4:39: -1- AC_DEFUN([ZFS_AC_KERNEL_KMEM_CACHE], [
	ZFS_AC_KERNEL_KMEM_CACHE_CREATE_USERCOPY
])
m4trace:config/kernel-kmem.m4:7: -1- AC_DEFUN([SPL_AC_DEBUG_KMEM], [
	AC_ARG_ENABLE([debug-kmem],
		[AS_HELP_STRING([--enable-debug-kmem],
		[Enable basic kmem accounting @<:@default=no@:>@])],
		[],
		[enable_debug_kmem=no])

	AS_IF([test "x$enable_debug_kmem" = xyes],
	[
		KERNELCPPFLAGS="${KERNELCPPFLAGS} -DDEBUG_KMEM"
		DEBUG_KMEM="_with_debug_kmem"
		AC_DEFINE([DEBUG_KMEM], [1],
		[Define to 1 to enable basic kmem accounting])
	], [
		DEBUG_KMEM="_without_debug_kmem"
	])

	AC_SUBST(DEBUG_KMEM)
	AC_MSG_CHECKING([whether basic kmem accounting is enabled])
	AC_MSG_RESULT([$enable_debug_kmem])
])
m4trace:config/kernel-kmem.m4:38: -1- AC_DEFUN([SPL_AC_DEBUG_KMEM_TRACKING], [
	AC_ARG_ENABLE([debug-kmem-tracking],
		[AS_HELP_STRING([--enable-debug-kmem-tracking],
		[Enable detailed kmem tracking  @<:@default=no@:>@])],
		[],
		[enable_debug_kmem_tracking=no])

	AS_IF([test "x$enable_debug_kmem_tracking" = xyes],
	[
		KERNELCPPFLAGS="${KERNELCPPFLAGS} -DDEBUG_KMEM_TRACKING"
		DEBUG_KMEM_TRACKING="_with_debug_kmem_tracking"
		AC_DEFINE([DEBUG_KMEM_TRACKING], [1],
		[Define to 1 to enable detailed kmem tracking])
	], [
		DEBUG_KMEM_TRACKING="_without_debug_kmem_tracking"
	])

	AC_SUBST(DEBUG_KMEM_TRACKING)
	AC_MSG_CHECKING([whether detailed kmem tracking is enabled])
	AC_MSG_RESULT([$enable_debug_kmem_tracking])
])
m4trace:config/kernel-kmem.m4:64: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KVMALLOC], [
	ZFS_LINUX_TEST_SRC([kvmalloc], [
		#include <linux/mm.h>
		#include <linux/slab.h>
	],[
		void *p __attribute__ ((unused));

		p = kvmalloc(0, GFP_KERNEL);
	])
])
m4trace:config/kernel-kmem.m4:75: -1- AC_DEFUN([ZFS_AC_KERNEL_KVMALLOC], [
	AC_MSG_CHECKING([whether kvmalloc(ptr, flags) is available])
	ZFS_LINUX_TEST_RESULT([kvmalloc], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KVMALLOC, 1, [kvmalloc exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-kmem.m4:89: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VMALLOC_PAGE_KERNEL], [
	ZFS_LINUX_TEST_SRC([__vmalloc], [
		#include <linux/mm.h>
		#include <linux/vmalloc.h>
	],[
		void *p __attribute__ ((unused));

		p = __vmalloc(0, GFP_KERNEL, PAGE_KERNEL);
	])
])
m4trace:config/kernel-kmem.m4:100: -1- AC_DEFUN([ZFS_AC_KERNEL_VMALLOC_PAGE_KERNEL], [
	AC_MSG_CHECKING([whether __vmalloc(ptr, flags, pageflags) is available])
	ZFS_LINUX_TEST_RESULT([__vmalloc], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VMALLOC_PAGE_KERNEL, 1, [__vmalloc page flags exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-kstrtoul.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KSTRTOUL], [
	ZFS_LINUX_TEST_SRC([kstrtoul], [
		#include <linux/kernel.h>
	],[
		int ret __attribute__ ((unused)) = kstrtoul(NULL, 10, NULL);
	])
])
m4trace:config/kernel-kstrtoul.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_KSTRTOUL], [
	AC_MSG_CHECKING([whether kstrtoul() exists])
	ZFS_LINUX_TEST_RESULT([kstrtoul], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KSTRTOUL, 1, [kstrtoul() exists])
	],[
		ZFS_LINUX_TEST_ERROR([kstrtoul()])
	])
])
m4trace:config/kernel-kthread.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_KTHREAD_COMPLETE_AND_EXIT], [
	dnl #
	dnl # 5.17 API,
	dnl # cead18552660702a4a46f58e65188fe5f36e9dfe ("exit: Rename complete_and_exit to kthread_complete_and_exit")
	dnl #
	dnl # Also moves the definition from include/linux/kernel.h to include/linux/kthread.h
	dnl #
	AC_MSG_CHECKING([whether kthread_complete_and_exit() is available])
	ZFS_LINUX_TEST_RESULT([kthread_complete_and_exit], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SPL_KTHREAD_COMPLETE_AND_EXIT, kthread_complete_and_exit, [kthread_complete_and_exit() available])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(SPL_KTHREAD_COMPLETE_AND_EXIT, complete_and_exit, [using complete_and_exit() instead])
	])
])
m4trace:config/kernel-kthread.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_KTHREAD_DEQUEUE_SIGNAL_4ARG], [
	dnl #
	dnl # 5.17 API: enum pid_type * as new 4th dequeue_signal() argument,
	dnl # 5768d8906bc23d512b1a736c1e198aa833a6daa4 ("signal: Requeue signals in the appropriate queue")
	dnl #
	dnl # int dequeue_signal(struct task_struct *task, sigset_t *mask, kernel_siginfo_t *info);
	dnl # int dequeue_signal(struct task_struct *task, sigset_t *mask, kernel_siginfo_t *info, enum pid_type *type);
	dnl #
	AC_MSG_CHECKING([whether dequeue_signal() takes 4 arguments])
	ZFS_LINUX_TEST_RESULT([kthread_dequeue_signal], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DEQUEUE_SIGNAL_4ARG, 1, [dequeue_signal() takes 4 arguments])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-kthread.m4:35: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KTHREAD_COMPLETE_AND_EXIT], [
	ZFS_LINUX_TEST_SRC([kthread_complete_and_exit], [
		#include <linux/kthread.h>
	], [
		struct completion *completion = NULL;
		long code = 0;

		kthread_complete_and_exit(completion, code);
	])
])
m4trace:config/kernel-kthread.m4:46: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KTHREAD_DEQUEUE_SIGNAL_4ARG], [
	ZFS_LINUX_TEST_SRC([kthread_dequeue_signal], [
		#include <linux/sched/signal.h>
	], [
		struct task_struct *task = NULL;
		sigset_t *mask = NULL;
		kernel_siginfo_t *info = NULL;
		enum pid_type *type = NULL;
		int error __attribute__ ((unused));

		error = dequeue_signal(task, mask, info, type);
	])
])
m4trace:config/kernel-kthread.m4:60: -1- AC_DEFUN([ZFS_AC_KERNEL_KTHREAD], [
	ZFS_AC_KERNEL_KTHREAD_COMPLETE_AND_EXIT
	ZFS_AC_KERNEL_KTHREAD_DEQUEUE_SIGNAL_4ARG
])
m4trace:config/kernel-kthread.m4:65: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KTHREAD], [
	ZFS_AC_KERNEL_SRC_KTHREAD_COMPLETE_AND_EXIT
	ZFS_AC_KERNEL_SRC_KTHREAD_DEQUEUE_SIGNAL_4ARG
])
m4trace:config/kernel-ktime.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KTIME_GET_COARSE_REAL_TS64], [
	ZFS_LINUX_TEST_SRC([ktime_get_coarse_real_ts64], [
		#include <linux/mm.h>
	], [
		struct timespec64 ts;
		ktime_get_coarse_real_ts64(&ts);
	])
])
m4trace:config/kernel-ktime.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_KTIME_GET_COARSE_REAL_TS64], [
	AC_MSG_CHECKING([whether ktime_get_coarse_real_ts64() exists])
	ZFS_LINUX_TEST_RESULT([ktime_get_coarse_real_ts64], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KTIME_GET_COARSE_REAL_TS64, 1,
		    [ktime_get_coarse_real_ts64() exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-ktime.m4:27: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KTIME_GET_RAW_TS64], [
	ZFS_LINUX_TEST_SRC([ktime_get_raw_ts64], [
		#include <linux/mm.h>
	], [
		struct timespec64 ts;
		ktime_get_raw_ts64(&ts);
	])
])
m4trace:config/kernel-ktime.m4:36: -1- AC_DEFUN([ZFS_AC_KERNEL_KTIME_GET_RAW_TS64], [
	AC_MSG_CHECKING([whether ktime_get_raw_ts64() exists])
	ZFS_LINUX_TEST_RESULT([ktime_get_raw_ts64], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KTIME_GET_RAW_TS64, 1,
		    [ktime_get_raw_ts64() exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-ktime.m4:47: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KTIME], [
	ZFS_AC_KERNEL_SRC_KTIME_GET_COARSE_REAL_TS64
	ZFS_AC_KERNEL_SRC_KTIME_GET_RAW_TS64
])
m4trace:config/kernel-ktime.m4:52: -1- AC_DEFUN([ZFS_AC_KERNEL_KTIME], [
	ZFS_AC_KERNEL_KTIME_GET_COARSE_REAL_TS64
	ZFS_AC_KERNEL_KTIME_GET_RAW_TS64
])
m4trace:config/kernel-kuid-helpers.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KUID_HELPERS], [
	ZFS_LINUX_TEST_SRC([i_uid_read], [
		#include <linux/fs.h>
	],[
		struct inode *ip = NULL;
		(void) i_uid_read(ip);
	])
])
m4trace:config/kernel-kuid-helpers.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_KUID_HELPERS], [
	AC_MSG_CHECKING([whether i_(uid|gid)_(read|write) exist])
	ZFS_LINUX_TEST_RESULT([i_uid_read], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([i_uid_read])
	])
])
m4trace:config/kernel-kuidgid.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KUIDGID_T], [
	ZFS_LINUX_TEST_SRC([kuidgid_t], [
		#include <linux/uidgid.h>
	], [
		kuid_t userid __attribute__ ((unused)) = KUIDT_INIT(0);
		kgid_t groupid __attribute__ ((unused)) = KGIDT_INIT(0);
	])
])
m4trace:config/kernel-kuidgid.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_KUIDGID_T], [
	AC_MSG_CHECKING([whether kuid_t/kgid_t is available])
	ZFS_LINUX_TEST_RESULT([kuidgid_t], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([kuid_t/kgid_t])
	])
])
m4trace:config/kernel-lseek-execute.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_LSEEK_EXECUTE], [
	ZFS_LINUX_TEST_SRC([lseek_execute], [
		#include <linux/fs.h>
	], [
		struct file *fp __attribute__ ((unused)) = NULL;
		struct inode *ip __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t maxsize __attribute__ ((unused)) = 0;

		lseek_execute(fp, ip, offset, maxsize);
	])
])
m4trace:config/kernel-lseek-execute.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_LSEEK_EXECUTE], [
	AC_MSG_CHECKING([whether lseek_execute() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([lseek_execute],
	    [lseek_exclusive], [fs/read_write.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_LSEEK_EXECUTE, 1, [lseek_execute() is available])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-make-request-fn.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_MAKE_REQUEST_FN], [
	ZFS_LINUX_TEST_SRC([make_request_fn_void], [
		#include <linux/blkdev.h>
		void make_request(struct request_queue *q,
		    struct bio *bio) { return; }
	],[
		blk_queue_make_request(NULL, &make_request);
	])

	ZFS_LINUX_TEST_SRC([make_request_fn_blk_qc_t], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	],[
		blk_queue_make_request(NULL, &make_request);
	])

	ZFS_LINUX_TEST_SRC([blk_alloc_queue_request_fn], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	],[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue(make_request, NUMA_NO_NODE);
	])

	ZFS_LINUX_TEST_SRC([blk_alloc_queue_request_fn_rh], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	],[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue_rh(make_request, NUMA_NO_NODE);
	])

	ZFS_LINUX_TEST_SRC([block_device_operations_submit_bio], [
		#include <linux/blkdev.h>
	],[
		struct block_device_operations o;
		o.submit_bio = NULL;
	])

	ZFS_LINUX_TEST_SRC([blk_alloc_disk], [
		#include <linux/blkdev.h>
	],[
		struct gendisk *disk  __attribute__ ((unused));
		disk = blk_alloc_disk(NUMA_NO_NODE);
	])

	ZFS_LINUX_TEST_SRC([blk_cleanup_disk], [
		#include <linux/blkdev.h>
	],[
		struct gendisk *disk  __attribute__ ((unused));
		blk_cleanup_disk(disk);
	])
])
m4trace:config/kernel-make-request-fn.m4:61: -1- AC_DEFUN([ZFS_AC_KERNEL_MAKE_REQUEST_FN], [
	dnl # Checked as part of the blk_alloc_queue_request_fn test
	dnl #
	dnl # Linux 5.9 API Change
	dnl # make_request_fn was moved into block_device_operations->submit_bio
	dnl #
	AC_MSG_CHECKING([whether submit_bio is member of struct block_device_operations])
	ZFS_LINUX_TEST_RESULT([block_device_operations_submit_bio], [
		AC_MSG_RESULT(yes)

		AC_DEFINE(HAVE_SUBMIT_BIO_IN_BLOCK_DEVICE_OPERATIONS, 1,
		    [submit_bio is member of struct block_device_operations])

		dnl #
		dnl # Linux 5.14 API Change:
		dnl # blk_alloc_queue() + alloc_disk() combo replaced by
		dnl # a single call to blk_alloc_disk().
		dnl #
		AC_MSG_CHECKING([whether blk_alloc_disk() exists])
		ZFS_LINUX_TEST_RESULT([blk_alloc_disk], [
			AC_MSG_RESULT(yes)
			AC_DEFINE([HAVE_BLK_ALLOC_DISK], 1, [blk_alloc_disk() exists])

			dnl #
			dnl # 5.20 API change,
			dnl # Removed blk_cleanup_disk(), put_disk() should be used.
			dnl #
			AC_MSG_CHECKING([whether blk_cleanup_disk() exists])
			ZFS_LINUX_TEST_RESULT([blk_cleanup_disk], [
				AC_MSG_RESULT(yes)
				AC_DEFINE([HAVE_BLK_CLEANUP_DISK], 1,
				    [blk_cleanup_disk() exists])
			], [
				AC_MSG_RESULT(no)
			])
		], [
			AC_MSG_RESULT(no)
		])
	],[
		AC_MSG_RESULT(no)

		dnl # Checked as part of the blk_alloc_queue_request_fn test
		dnl #
		dnl # Linux 5.7 API Change
		dnl # blk_alloc_queue() expects request function.
		dnl #
		AC_MSG_CHECKING([whether blk_alloc_queue() expects request function])
		ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn], [
			AC_MSG_RESULT(yes)

			dnl # This is currently always the case.
			AC_MSG_CHECKING([whether make_request_fn() returns blk_qc_t])
			AC_MSG_RESULT(yes)

			AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN, 1,
			    [blk_alloc_queue() expects request function])
			AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
			    [make_request_fn() return type])
			AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
			    [Noting that make_request_fn() returns blk_qc_t])
		],[
			dnl #
			dnl # CentOS Stream 4.18.0-257 API Change
			dnl # The Linux 5.7 blk_alloc_queue() change was back-
			dnl # ported and the symbol renamed blk_alloc_queue_rh().
			dnl # As of this kernel version they're not providing
			dnl # any compatibility code in the kernel for this.
			dnl #
			ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn_rh], [
				AC_MSG_RESULT(yes)

				dnl # This is currently always the case.
				AC_MSG_CHECKING([whether make_request_fn_rh() returns blk_qc_t])
				AC_MSG_RESULT(yes)

				AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH, 1,
				    [blk_alloc_queue_rh() expects request function])
				AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
				    [make_request_fn() return type])
				AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
				    [Noting that make_request_fn() returns blk_qc_t])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Linux 3.2 API Change
				dnl # make_request_fn returns void.
				dnl #
				AC_MSG_CHECKING(
				    [whether make_request_fn() returns void])
				ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				],[
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
			])
		])
	])
])
m4trace:config/kernel-misc-minor.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_MISC_MINOR], [
	AC_MSG_CHECKING([whether /dev/zfs minor is available])

	for i in $(seq 249 -1 200); do
		if ! grep -q "^#define\s\+.*_MINOR\s\+.*$i" \
		    ${LINUX}/include/linux/miscdevice.h; then
			ZFS_DEVICE_MINOR="$i"
			AC_MSG_RESULT($ZFS_DEVICE_MINOR)
			AC_DEFINE_UNQUOTED([ZFS_DEVICE_MINOR],
			    [$ZFS_DEVICE_MINOR], [/dev/zfs minor])
			break
		fi
	done

	AS_IF([ test -z "$ZFS_DEVICE_MINOR"], [
		AC_MSG_ERROR([
	*** No available misc minor numbers available for use.])
	])
])
m4trace:config/kernel-mkdir.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_MKDIR], [
	dnl #
	dnl # 6.3 API change
	dnl # mkdir() takes struct mnt_idmap * as the first arg
	dnl #
	ZFS_LINUX_TEST_SRC([mkdir_mnt_idmap], [
		#include <linux/fs.h>

		int mkdir(struct mnt_idmap *idmap,
			struct inode *inode, struct dentry *dentry,
			umode_t umode) { return 0; }
		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	],[])

	dnl #
	dnl # 5.12 API change
	dnl # The struct user_namespace arg was added as the first argument to
	dnl # mkdir()
	dnl #
	ZFS_LINUX_TEST_SRC([mkdir_user_namespace], [
		#include <linux/fs.h>

		int mkdir(struct user_namespace *userns,
			struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	],[])

	dnl #
	dnl # 3.3 API change
	dnl # The VFS .create, .mkdir and .mknod callbacks were updated to take a
	dnl # umode_t type rather than an int.  The expectation is that any backport
	dnl # would also change all three prototypes.  However, if it turns out that
	dnl # some distribution doesn't backport the whole thing this could be
	dnl # broken apart into three separate checks.
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_mkdir], [
		#include <linux/fs.h>

		int mkdir(struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	],[])
])
m4trace:config/kernel-mkdir.m4:60: -1- AC_DEFUN([ZFS_AC_KERNEL_MKDIR], [
	dnl #
	dnl # 6.3 API change
	dnl # mkdir() takes struct mnt_idmap * as the first arg
	dnl #
	AC_MSG_CHECKING([whether iops->mkdir() takes struct mnt_idmap*])
	ZFS_LINUX_TEST_RESULT([mkdir_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_MKDIR_IDMAP, 1,
		    [iops->mkdir() takes struct mnt_idmap*])
	],[
		dnl #
		dnl # 5.12 API change
		dnl # The struct user_namespace arg was added as the first argument to
		dnl # mkdir() of the iops structure.
		dnl #
		AC_MSG_CHECKING([whether iops->mkdir() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([mkdir_user_namespace], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKDIR_USERNS, 1,
			    [iops->mkdir() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->mkdir() takes umode_t])
			ZFS_LINUX_TEST_RESULT([inode_operations_mkdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MKDIR_UMODE_T, 1,
				    [iops->mkdir() takes umode_t])
			],[
				ZFS_LINUX_TEST_ERROR([mkdir()])
			])
		])
	])
])
m4trace:config/kernel-mknod.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_MKNOD], [
	dnl #
	dnl # 6.3 API change
	dnl # The first arg is now struct mnt_idmap*
	dnl #
	ZFS_LINUX_TEST_SRC([mknod_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod          = tmp_mknod,
		};
	],[])

	dnl #
	dnl # 5.12 API change that added the struct user_namespace* arg
	dnl # to the front of this function type's arg list.
	dnl #
	ZFS_LINUX_TEST_SRC([mknod_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod		= tmp_mknod,
		};
	],[])
])
m4trace:config/kernel-mknod.m4:39: -1- AC_DEFUN([ZFS_AC_KERNEL_MKNOD], [
	AC_MSG_CHECKING([whether iops->mknod() takes struct mnt_idmap*])
	ZFS_LINUX_TEST_RESULT([mknod_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_MKNOD_IDMAP, 1,
		    [iops->mknod() takes struct mnt_idmap*])
	],[
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING([whether iops->mknod() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([mknod_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKNOD_USERNS, 1,
			    [iops->mknod() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
])
m4trace:config/kernel-objtool.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_OBJTOOL_HEADER], [
	AC_MSG_CHECKING([whether objtool header is available])
	ZFS_LINUX_TRY_COMPILE([
		#include <linux/objtool.h>
	],[
	],[
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	],[
		AC_MSG_RESULT(linux/frame.h)
	])
])
m4trace:config/kernel-objtool.m4:25: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_OBJTOOL], [

	dnl # 4.6 API for compile-time stack validation
	ZFS_LINUX_TEST_SRC([objtool], [
		#undef __ASSEMBLY__
		#include <asm/ptrace.h>
		#include <asm/frame.h>
	],[
		#if !defined(FRAME_BEGIN)
		#error "FRAME_BEGIN is not defined"
		#endif
	])

	dnl # 4.6 API added STACK_FRAME_NON_STANDARD macro
	ZFS_LINUX_TEST_SRC([stack_frame_non_standard], [
		#ifdef HAVE_KERNEL_OBJTOOL_HEADER
		#include <linux/objtool.h>
		#else
		#include <linux/frame.h>
		#endif
	],[
		#if !defined(STACK_FRAME_NON_STANDARD)
		#error "STACK_FRAME_NON_STANDARD is not defined."
		#endif
	])
])
m4trace:config/kernel-objtool.m4:52: -1- AC_DEFUN([ZFS_AC_KERNEL_OBJTOOL], [
	AC_MSG_CHECKING(
	    [whether compile-time stack validation (objtool) is available])
	ZFS_LINUX_TEST_RESULT([objtool], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_OBJTOOL, 1,
		    [kernel does stack verification])

		AC_MSG_CHECKING([whether STACK_FRAME_NON_STANDARD is defined])
		ZFS_LINUX_TEST_RESULT([stack_frame_non_standard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STACK_FRAME_NON_STANDARD, 1,
			   [STACK_FRAME_NON_STANDARD is defined])
		],[
			AC_MSG_RESULT(no)
		])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-pagemap-folio_wait_bit.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PAGEMAP_FOLIO_WAIT_BIT], [
	ZFS_LINUX_TEST_SRC([pagemap_has_folio_wait_bit], [
		#include <linux/pagemap.h>
	],[
		static struct folio *f = NULL;

		folio_wait_bit(f, PG_writeback);
	])
])
m4trace:config/kernel-pagemap-folio_wait_bit.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_PAGEMAP_FOLIO_WAIT_BIT], [
	AC_MSG_CHECKING([whether folio_wait_bit() exists])
	ZFS_LINUX_TEST_RESULT([pagemap_has_folio_wait_bit], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_PAGEMAP_FOLIO_WAIT_BIT, 1,
			[folio_wait_bit() exists])
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-pde-data.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PDE_DATA], [
	ZFS_LINUX_TEST_SRC([pde_data], [
		#include <linux/proc_fs.h>
	], [
		pde_data(NULL);
	])
])
m4trace:config/kernel-pde-data.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_PDE_DATA], [
	AC_MSG_CHECKING([whether pde_data() is lowercase])
	ZFS_LINUX_TEST_RESULT([pde_data], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SPL_PDE_DATA, pde_data, [pde_data() is pde_data()])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(SPL_PDE_DATA, PDE_DATA, [pde_data() is PDE_DATA()])
	])
])
m4trace:config/kernel-percpu.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PERCPU_COUNTER_INIT], [
	ZFS_LINUX_TEST_SRC([percpu_counter_init_with_gfp], [
		#include <linux/gfp.h>
		#include <linux/percpu_counter.h>
	],[
		struct percpu_counter counter;
		int error;

		error = percpu_counter_init(&counter, 0, GFP_KERNEL);
	])
])
m4trace:config/kernel-percpu.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_PERCPU_COUNTER_INIT], [
	AC_MSG_CHECKING([whether percpu_counter_init() wants gfp_t])
	ZFS_LINUX_TEST_RESULT([percpu_counter_init_with_gfp], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PERCPU_COUNTER_INIT_WITH_GFP, 1,
		    [percpu_counter_init() wants gfp_t])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-percpu.m4:32: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PERCPU_COUNTER_ADD_BATCH], [
	ZFS_LINUX_TEST_SRC([percpu_counter_add_batch], [
		#include <linux/percpu_counter.h>
	],[
		struct percpu_counter counter;

		percpu_counter_add_batch(&counter, 1, 1);
	])
])
m4trace:config/kernel-percpu.m4:42: -1- AC_DEFUN([ZFS_AC_KERNEL_PERCPU_COUNTER_ADD_BATCH], [
	AC_MSG_CHECKING([whether percpu_counter_add_batch() is defined])
	ZFS_LINUX_TEST_RESULT([percpu_counter_add_batch], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PERCPU_COUNTER_ADD_BATCH, 1,
		    [percpu_counter_add_batch() is defined])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-percpu.m4:57: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PERCPU_REF_COUNT_IN_DATA], [
	ZFS_LINUX_TEST_SRC([percpu_ref_count_in_data], [
		#include <linux/percpu-refcount.h>
	],[
		struct percpu_ref_data d;

		atomic_long_set(&d.count, 1L);
	])
])
m4trace:config/kernel-percpu.m4:67: -1- AC_DEFUN([ZFS_AC_KERNEL_PERCPU_REF_COUNT_IN_DATA], [
	AC_MSG_CHECKING([whether is inside percpu_ref.data])
	ZFS_LINUX_TEST_RESULT([percpu_ref_count_in_data], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_PERCPU_REF_COUNT_IN_DATA, 1,
		    [count is located in percpu_ref.data])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-percpu.m4:77: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PERCPU], [
	ZFS_AC_KERNEL_SRC_PERCPU_COUNTER_INIT
	ZFS_AC_KERNEL_SRC_PERCPU_COUNTER_ADD_BATCH
	ZFS_AC_KERNEL_SRC_PERCPU_REF_COUNT_IN_DATA
])
m4trace:config/kernel-percpu.m4:83: -1- AC_DEFUN([ZFS_AC_KERNEL_PERCPU], [
	ZFS_AC_KERNEL_PERCPU_COUNTER_INIT
	ZFS_AC_KERNEL_PERCPU_COUNTER_ADD_BATCH
	ZFS_AC_KERNEL_PERCPU_REF_COUNT_IN_DATA
])
m4trace:config/kernel-proc-operations.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PROC_OPERATIONS], [
	ZFS_LINUX_TEST_SRC([proc_ops_struct], [
		#include <linux/proc_fs.h>

		int test_open(struct inode *ip, struct file *fp) { return 0; }
		ssize_t test_read(struct file *fp, char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		ssize_t test_write(struct file *fp, const char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		loff_t test_lseek(struct file *fp, loff_t off, int flag)
		    { return 0; }
		int test_release(struct inode *ip, struct file *fp)
		    { return 0; }

		const struct proc_ops test_ops __attribute__ ((unused)) = {
			.proc_open      = test_open,
			.proc_read      = test_read,
			.proc_write	= test_write,
			.proc_lseek     = test_lseek,
			.proc_release   = test_release,
		};
	], [
		struct proc_dir_entry *entry __attribute__ ((unused)) =
		    proc_create_data("test", 0444, NULL, &test_ops, NULL);
	])
])
m4trace:config/kernel-proc-operations.m4:33: -1- AC_DEFUN([ZFS_AC_KERNEL_PROC_OPERATIONS], [
	AC_MSG_CHECKING([whether proc_ops structure exists])
	ZFS_LINUX_TEST_RESULT([proc_ops_struct], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PROC_OPS_STRUCT, 1, [proc_ops structure exists])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-put-link.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_PUT_LINK], [
	ZFS_LINUX_TEST_SRC([put_link_cookie], [
		#include <linux/fs.h>
		void put_link(struct inode *ip, void *cookie)
		    { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	],[])

	ZFS_LINUX_TEST_SRC([put_link_nameidata], [
		#include <linux/fs.h>
		void put_link(struct dentry *de, struct
		    nameidata *nd, void *ptr) { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	],[])
])
m4trace:config/kernel-put-link.m4:26: -1- AC_DEFUN([ZFS_AC_KERNEL_PUT_LINK], [
	dnl #
	dnl # 4.5 API change
	dnl # get_link() uses delayed done, there is no put_link() interface.
	dnl # This check initially uses the inode_operations_get_link result
	dnl #
	ZFS_LINUX_TEST_RESULT([inode_operations_get_link], [
		AC_DEFINE(HAVE_PUT_LINK_DELAYED, 1, [iops->put_link() delayed])
	],[
		dnl #
		dnl # 4.2 API change
		dnl # This kernel retired the nameidata structure.
		dnl #
		AC_MSG_CHECKING([whether iops->put_link() passes cookie])
		ZFS_LINUX_TEST_RESULT([put_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_PUT_LINK_COOKIE, 1,
			    [iops->put_link() cookie])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.32 API
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->put_link() passes nameidata])
			ZFS_LINUX_TEST_RESULT([put_link_nameidata], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PUT_LINK_NAMEIDATA, 1,
				    [iops->put_link() nameidata])
			],[
				ZFS_LINUX_TEST_ERROR([put_link])
			])
		])
	])
])
m4trace:config/kernel-readpages.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_READPAGES], [
	ZFS_LINUX_TEST_SRC([vfs_has_readpages], [
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.readpages = NULL,
		};
	],[])
])
m4trace:config/kernel-readpages.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_READPAGES], [
	AC_MSG_CHECKING([whether aops->readpages exists])
	ZFS_LINUX_TEST_RESULT([vfs_has_readpages], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_READPAGES, 1,
			[address_space_operations->readpages exists])
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-rename.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_RENAME], [
	dnl #
	dnl # 3.9 (to 4.9) API change,
	dnl #
	dnl # A new version of iops->rename() was added (rename2) that takes a flag
	dnl # argument (to support renameat2). However this separate function was
	dnl # merged back into iops->rename() in Linux 4.9.
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_rename2], [
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	],[])

	dnl #
	dnl # 4.9 API change,
	dnl #
	dnl # iops->rename2() merged into iops->rename(), and iops->rename() now
	dnl # wants flags.
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_rename_flags], [
		#include <linux/fs.h>
		int rename_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	],[])

	dnl #
	dnl # EL7 compatibility
	dnl #
	dnl # EL7 has backported renameat2 support, but it's done by defining a
	dnl # separate iops wrapper structure that takes the .renameat2 function.
	dnl #
	ZFS_LINUX_TEST_SRC([dir_inode_operations_wrapper_rename2], [
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations_wrapper
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	],[])

	dnl #
	dnl # 5.12 API change,
	dnl #
	dnl # Linux 5.12 introduced passing struct user_namespace* as the first
	dnl # argument of the rename() and other inode_operations members.
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_rename_userns], [
		#include <linux/fs.h>
		int rename_fn(struct user_namespace *user_ns, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	],[])

	dnl #
	dnl # 6.3 API change - the first arg is now struct mnt_idmap*
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_rename_mnt_idmap], [
		#include <linux/fs.h>
		int rename_fn(struct mnt_idmap *idmap, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	],[])
])
m4trace:config/kernel-rename.m4:91: -1- AC_DEFUN([ZFS_AC_KERNEL_RENAME], [
	AC_MSG_CHECKING([whether iops->rename() takes struct mnt_idmap*])
	ZFS_LINUX_TEST_RESULT([inode_operations_rename_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_RENAME_IDMAP, 1,
		    [iops->rename() takes struct mnt_idmap*])
	],[
		AC_MSG_CHECKING([whether iops->rename() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([inode_operations_rename_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_RENAME_USERNS, 1,
			    [iops->rename() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->rename2() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_rename2], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_RENAME2, 1, [iops->rename2() exists])
			],[
				AC_MSG_RESULT(no)

				AC_MSG_CHECKING([whether iops->rename() wants flags])
				ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				],[
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
			])
		])
	])
])
m4trace:config/kernel-revalidate-disk-size.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_REVALIDATE_DISK], [

	ZFS_LINUX_TEST_SRC([revalidate_disk_size], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		(void) revalidate_disk_size(disk, false);
	])

	ZFS_LINUX_TEST_SRC([revalidate_disk], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		(void) revalidate_disk(disk);
	])
])
m4trace:config/kernel-revalidate-disk-size.m4:25: -1- AC_DEFUN([ZFS_AC_KERNEL_REVALIDATE_DISK], [

	AC_MSG_CHECKING([whether revalidate_disk_size() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk_size],
		[revalidate_disk_size], [block/genhd.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REVALIDATE_DISK_SIZE, 1,
		    [revalidate_disk_size() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether revalidate_disk() is available])
		ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk],
		    [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
	])
])
m4trace:config/kernel-rw.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_WRITE], [
	ZFS_LINUX_TEST_SRC([kernel_write], [
		#include <linux/fs.h>
	],[
		struct file *file = NULL;
		const void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_write(file, buf, count, pos);
	])
])
m4trace:config/kernel-rw.m4:20: -1- AC_DEFUN([ZFS_AC_KERNEL_WRITE], [
	AC_MSG_CHECKING([whether kernel_write() takes loff_t pointer])
	ZFS_LINUX_TEST_RESULT([kernel_write], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_WRITE_PPOS, 1,
		    [kernel_write() take loff_t pointer])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-rw.m4:36: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_READ], [
	ZFS_LINUX_TEST_SRC([kernel_read], [
		#include <linux/fs.h>
	],[
		struct file *file = NULL;
		void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_read(file, buf, count, pos);
	])
])
m4trace:config/kernel-rw.m4:50: -1- AC_DEFUN([ZFS_AC_KERNEL_READ], [
	AC_MSG_CHECKING([whether kernel_read() takes loff_t pointer])
	ZFS_LINUX_TEST_RESULT([kernel_read], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_READ_PPOS, 1,
		    [kernel_read() take loff_t pointer])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-rw.m4:61: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_RW], [
	ZFS_AC_KERNEL_SRC_WRITE
	ZFS_AC_KERNEL_SRC_READ
])
m4trace:config/kernel-rw.m4:66: -1- AC_DEFUN([ZFS_AC_KERNEL_RW], [
	ZFS_AC_KERNEL_WRITE
	ZFS_AC_KERNEL_READ
])
m4trace:config/kernel-rwsem.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_RWSEM_ACTIVITY], [
	ZFS_LINUX_TEST_SRC([rwsem_activity], [
		#include <linux/rwsem.h>
	],[
		struct rw_semaphore dummy_semaphore __attribute__ ((unused));
		dummy_semaphore.activity = 0;
	])
])
m4trace:config/kernel-rwsem.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_RWSEM_ACTIVITY], [
	AC_MSG_CHECKING([whether struct rw_semaphore has member activity])
	ZFS_LINUX_TEST_RESULT([rwsem_activity], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_RWSEM_ACTIVITY, 1,
		    [struct rw_semaphore has member activity])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-rwsem.m4:31: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_RWSEM_ATOMIC_LONG_COUNT], [
	ZFS_LINUX_TEST_SRC([rwsem_atomic_long_count], [
		#include <linux/rwsem.h>
	],[
		DECLARE_RWSEM(dummy_semaphore);
		(void) atomic_long_read(&dummy_semaphore.count);
	])
])
m4trace:config/kernel-rwsem.m4:40: -1- AC_DEFUN([ZFS_AC_KERNEL_RWSEM_ATOMIC_LONG_COUNT], [
	AC_MSG_CHECKING(
	    [whether struct rw_semaphore has atomic_long_t member count])
	ZFS_LINUX_TEST_RESULT([rwsem_atomic_long_count], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_RWSEM_ATOMIC_LONG_COUNT, 1,
		    [struct rw_semaphore has atomic_long_t member count])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-rwsem.m4:52: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_RWSEM], [
	ZFS_AC_KERNEL_SRC_RWSEM_ACTIVITY
	ZFS_AC_KERNEL_SRC_RWSEM_ATOMIC_LONG_COUNT
])
m4trace:config/kernel-rwsem.m4:57: -1- AC_DEFUN([ZFS_AC_KERNEL_RWSEM], [
	ZFS_AC_KERNEL_RWSEM_ACTIVITY
	ZFS_AC_KERNEL_RWSEM_ATOMIC_LONG_COUNT
])
m4trace:config/kernel-sched.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SCHED_RT_HEADER], [
	ZFS_LINUX_TEST_SRC([sched_rt_header], [
		#include <linux/sched.h>
		#include <linux/sched/rt.h>
	],[
		return 0;
	])
])
m4trace:config/kernel-sched.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_SCHED_RT_HEADER], [
	AC_MSG_CHECKING([whether header linux/sched/rt.h exists])
	ZFS_LINUX_TEST_RESULT([sched_rt_header], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([sched_rt_header])
	])
])
m4trace:config/kernel-sched.m4:27: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SCHED_SIGNAL_HEADER], [
	ZFS_LINUX_TEST_SRC([sched_signal_header], [
		#include <linux/sched.h>
		#include <linux/sched/signal.h>
	],[
		return 0;
	])
])
m4trace:config/kernel-sched.m4:36: -1- AC_DEFUN([ZFS_AC_KERNEL_SCHED_SIGNAL_HEADER], [
	AC_MSG_CHECKING([whether header linux/sched/signal.h exists])
	ZFS_LINUX_TEST_RESULT([sched_signal_header], [
		AC_DEFINE(HAVE_SCHED_SIGNAL_HEADER, 1,
		    [linux/sched/signal.h exists])
		AC_MSG_RESULT(yes)
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-sched.m4:53: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_IO_SCHEDULE_TIMEOUT], [
	ZFS_LINUX_TEST_SRC([io_schedule_timeout], [
		#include <linux/sched.h>
	], [
		(void) io_schedule_timeout(1);
	])
])
m4trace:config/kernel-sched.m4:61: -1- AC_DEFUN([ZFS_AC_KERNEL_IO_SCHEDULE_TIMEOUT], [
	AC_MSG_CHECKING([whether io_schedule_timeout() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([io_schedule_timeout],
	[io_schedule_timeout], [], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IO_SCHEDULE_TIMEOUT, 1, [yes])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-sched.m4:72: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SCHED], [
	ZFS_AC_KERNEL_SRC_SCHED_RT_HEADER
	ZFS_AC_KERNEL_SRC_SCHED_SIGNAL_HEADER
	ZFS_AC_KERNEL_SRC_IO_SCHEDULE_TIMEOUT
])
m4trace:config/kernel-sched.m4:78: -1- AC_DEFUN([ZFS_AC_KERNEL_SCHED], [
	ZFS_AC_KERNEL_SCHED_RT_HEADER
	ZFS_AC_KERNEL_SCHED_SIGNAL_HEADER
	ZFS_AC_KERNEL_IO_SCHEDULE_TIMEOUT
])
m4trace:config/kernel-security-inode-init.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SECURITY_INODE_INIT_SECURITY_CALLBACK], [
	ZFS_LINUX_TEST_SRC([security_inode_init_security], [
		#include <linux/security.h>
	],[
		struct inode *ip __attribute__ ((unused)) = NULL;
		struct inode *dip __attribute__ ((unused)) = NULL;
		const struct qstr *str __attribute__ ((unused)) = NULL;
		initxattrs func __attribute__ ((unused)) = NULL;

		security_inode_init_security(ip, dip, str, func, NULL);
	])
])
m4trace:config/kernel-security-inode-init.m4:21: -1- AC_DEFUN([ZFS_AC_KERNEL_SECURITY_INODE_INIT_SECURITY_CALLBACK], [
	AC_MSG_CHECKING([whether security_inode_init_security wants callback])
	ZFS_LINUX_TEST_RESULT([security_inode_init_security], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([security_inode_init_security callback])
	])
])
m4trace:config/kernel-security-inode-init.m4:30: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SECURITY_INODE], [
	ZFS_AC_KERNEL_SRC_SECURITY_INODE_INIT_SECURITY_CALLBACK
])
m4trace:config/kernel-security-inode-init.m4:34: -1- AC_DEFUN([ZFS_AC_KERNEL_SECURITY_INODE], [
	ZFS_AC_KERNEL_SECURITY_INODE_INIT_SECURITY_CALLBACK
])
m4trace:config/kernel-set-nlink.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SET_NLINK], [
	ZFS_LINUX_TEST_SRC([set_nlink], [
		#include <linux/fs.h>
	],[
		struct inode node;
		unsigned int link = 0;
		(void) set_nlink(&node, link);
	])
])
m4trace:config/kernel-set-nlink.m4:15: -1- AC_DEFUN([ZFS_AC_KERNEL_SET_NLINK], [
	AC_MSG_CHECKING([whether set_nlink() is available])
	ZFS_LINUX_TEST_RESULT([set_nlink], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([set_nlink()])
	])
])
m4trace:config/kernel-setattr-prepare.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SETATTR_PREPARE], [
	dnl #
	dnl # 4.9 API change
	dnl # The inode_change_ok() function has been renamed setattr_prepare()
	dnl # and updated to take a dentry rather than an inode.
	dnl #
	ZFS_LINUX_TEST_SRC([setattr_prepare], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(dentry, attr);
	])

	dnl #
	dnl # 5.12 API change
	dnl # The setattr_prepare() function has been changed to accept a new argument
	dnl # for struct user_namespace*
	dnl #
	ZFS_LINUX_TEST_SRC([setattr_prepare_userns], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct user_namespace *userns = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(userns, dentry, attr);
	])

	dnl #
	dnl # 6.3 API change
	dnl # The first arg of setattr_prepare() is changed to struct mnt_idmap*
	dnl #
	ZFS_LINUX_TEST_SRC([setattr_prepare_mnt_idmap], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct mnt_idmap *idmap = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(idmap, dentry, attr);
	])
])
m4trace:config/kernel-setattr-prepare.m4:46: -1- AC_DEFUN([ZFS_AC_KERNEL_SETATTR_PREPARE], [
	AC_MSG_CHECKING([whether setattr_prepare() is available and accepts struct mnt_idmap*])
	ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_mnt_idmap],
	    [setattr_prepare], [fs/attr.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SETATTR_PREPARE_IDMAP, 1,
		    [setattr_prepare() accepts mnt_idmap])
	], [
		AC_MSG_CHECKING([whether setattr_prepare() is available and accepts struct user_namespace*])
		ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns],
		    [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
	])
])
m4trace:config/kernel-sget-args.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SGET], [
	ZFS_LINUX_TEST_SRC([sget_5args], [
		#include <linux/fs.h>
	],[
		struct file_system_type *type = NULL;
		int (*test)(struct super_block *,void *) = NULL;
		int (*set)(struct super_block *,void *) = NULL;
		int flags = 0;
		void *data = NULL;
		(void) sget(type, test, set, flags, data);
	])
])
m4trace:config/kernel-sget-args.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_SGET], [
	AC_MSG_CHECKING([whether sget() wants 5 args])
	ZFS_LINUX_TEST_RESULT([sget_5args], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([sget()])
	])
])
m4trace:config/kernel-show-options.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SHOW_OPTIONS], [
	ZFS_LINUX_TEST_SRC([super_operations_show_options], [
		#include <linux/fs.h>

		int show_options(struct seq_file * x, struct dentry * y) {
			return 0;
		};

		static struct super_operations sops __attribute__ ((unused)) = {
			.show_options = show_options,
		};
	],[])
])
m4trace:config/kernel-show-options.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_SHOW_OPTIONS], [
	AC_MSG_CHECKING([whether sops->show_options() wants dentry])
	ZFS_LINUX_TEST_RESULT([super_operations_show_options], [
		AC_MSG_RESULT([yes])
	],[
		ZFS_LINUX_TEST_ERROR([sops->show_options()])
	])
])
m4trace:config/kernel-shrink.m4:7: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SUPER_BLOCK_S_SHRINK], [
	ZFS_LINUX_TEST_SRC([super_block_s_shrink], [
		#include <linux/fs.h>

		int shrink(struct shrinker *s, struct shrink_control *sc)
		    { return 0; }

		static const struct super_block
		    sb __attribute__ ((unused)) = {
			.s_shrink.seeks = DEFAULT_SEEKS,
			.s_shrink.batch = 0,
		};
	],[])
])
m4trace:config/kernel-shrink.m4:22: -1- AC_DEFUN([ZFS_AC_KERNEL_SUPER_BLOCK_S_SHRINK], [
	AC_MSG_CHECKING([whether super_block has s_shrink])
	ZFS_LINUX_TEST_RESULT([super_block_s_shrink], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([sb->s_shrink()])
	])
])
m4trace:config/kernel-shrink.m4:36: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SHRINK_CONTROL_HAS_NID], [
	ZFS_LINUX_TEST_SRC([shrink_control_nid], [
		#include <linux/fs.h>
	],[
		struct shrink_control sc __attribute__ ((unused));
		unsigned long scnidsize __attribute__ ((unused)) =
		    sizeof(sc.nid);
	])
])
m4trace:config/kernel-shrink.m4:46: -1- AC_DEFUN([ZFS_AC_KERNEL_SHRINK_CONTROL_HAS_NID], [
	AC_MSG_CHECKING([whether shrink_control has nid])
	ZFS_LINUX_TEST_RESULT([shrink_control_nid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SHRINK_CONTROL_HAS_NID, 1,
		    [struct shrink_control has nid])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-shrink.m4:57: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_REGISTER_SHRINKER_VARARG], [
	ZFS_LINUX_TEST_SRC([register_shrinker_vararg], [
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	],[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker, "vararg-reg-shrink-test");
	])
])
m4trace:config/kernel-shrink.m4:72: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SHRINKER_CALLBACK], [
	ZFS_LINUX_TEST_SRC([shrinker_cb_shrink_control], [
		#include <linux/mm.h>
		int shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	],[
		struct shrinker cache_shrinker = {
			.shrink = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	])

	ZFS_LINUX_TEST_SRC([shrinker_cb_shrink_control_split], [
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	],[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	])
])
m4trace:config/kernel-shrink.m4:99: -1- AC_DEFUN([ZFS_AC_KERNEL_SHRINKER_CALLBACK], [
	dnl #
	dnl # 6.0 API change
	dnl # register_shrinker() becomes a var-arg function that takes
	dnl # a printf-style format string as args > 0
	dnl #
	AC_MSG_CHECKING([whether new var-arg register_shrinker() exists])
	ZFS_LINUX_TEST_RESULT([register_shrinker_vararg], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REGISTER_SHRINKER_VARARG, 1,
		    [register_shrinker is vararg])

		dnl # We assume that the split shrinker callback exists if the
		dnl # vararg register_shrinker() exists, because the latter is
		dnl # a much more recent addition, and the macro test for the
		dnl # var-arg version only works if the callback is split
		AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
			[cs->count_objects exists])
	],[
		AC_MSG_RESULT(no)
		dnl #
		dnl # 3.0 - 3.11 API change
		dnl # cs->shrink(struct shrinker *, struct shrink_control *sc)
		dnl #
		AC_MSG_CHECKING([whether new 2-argument shrinker exists])
		ZFS_LINUX_TEST_RESULT([shrinker_cb_shrink_control], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SINGLE_SHRINKER_CALLBACK, 1,
				[new shrinker callback wants 2 args])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 3.12 API change,
			dnl # cs->shrink() is logically split in to
			dnl # cs->count_objects() and cs->scan_objects()
			dnl #
			AC_MSG_CHECKING([if cs->count_objects callback exists])
			ZFS_LINUX_TEST_RESULT(
				[shrinker_cb_shrink_control_split],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
						[cs->count_objects exists])
			],[
					ZFS_LINUX_TEST_ERROR([shrinker])
			])
		])
	])
])
m4trace:config/kernel-shrink.m4:153: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SHRINK_CONTROL_STRUCT], [
	ZFS_LINUX_TEST_SRC([shrink_control_struct], [
		#include <linux/mm.h>
	],[
		struct shrink_control sc __attribute__ ((unused));

		sc.nr_to_scan = 0;
		sc.gfp_mask = GFP_KERNEL;
	])
])
m4trace:config/kernel-shrink.m4:164: -1- AC_DEFUN([ZFS_AC_KERNEL_SHRINK_CONTROL_STRUCT], [
	AC_MSG_CHECKING([whether struct shrink_control exists])
	ZFS_LINUX_TEST_RESULT([shrink_control_struct], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SHRINK_CONTROL_STRUCT, 1,
		    [struct shrink_control exists])
	],[
		ZFS_LINUX_TEST_ERROR([shrink_control])
	])
])
m4trace:config/kernel-shrink.m4:175: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SHRINKER], [
	ZFS_AC_KERNEL_SRC_SUPER_BLOCK_S_SHRINK
	ZFS_AC_KERNEL_SRC_SHRINK_CONTROL_HAS_NID
	ZFS_AC_KERNEL_SRC_SHRINKER_CALLBACK
	ZFS_AC_KERNEL_SRC_SHRINK_CONTROL_STRUCT
	ZFS_AC_KERNEL_SRC_REGISTER_SHRINKER_VARARG
])
m4trace:config/kernel-shrink.m4:183: -1- AC_DEFUN([ZFS_AC_KERNEL_SHRINKER], [
	ZFS_AC_KERNEL_SUPER_BLOCK_S_SHRINK
	ZFS_AC_KERNEL_SHRINK_CONTROL_HAS_NID
	ZFS_AC_KERNEL_SHRINKER_CALLBACK
	ZFS_AC_KERNEL_SHRINK_CONTROL_STRUCT
])
m4trace:config/kernel-siginfo.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SIGINFO], [
	ZFS_LINUX_TEST_SRC([siginfo], [
		#include <linux/signal_types.h>
	],[
		kernel_siginfo_t info __attribute__ ((unused));
	])
])
m4trace:config/kernel-siginfo.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_SIGINFO], [
	AC_MSG_CHECKING([whether kernel_siginfo_t tyepedef exists])
	ZFS_LINUX_TEST_RESULT([siginfo], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SIGINFO, 1, [kernel_siginfo_t exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-signal-stop.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SIGNAL_STOP], [
	ZFS_LINUX_TEST_SRC([signal_stop], [
		#include <linux/sched/signal.h>
	],[
		kernel_signal_stop();
	])
])
m4trace:config/kernel-signal-stop.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_SIGNAL_STOP], [
	AC_MSG_CHECKING([whether signal_stop() exists])
	ZFS_LINUX_TEST_RESULT([signal_stop], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SIGNAL_STOP, 1, [signal_stop() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-special-state.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SET_SPECIAL_STATE], [
	ZFS_LINUX_TEST_SRC([set_special_state], [
		#include <linux/sched.h>
	],[
		set_special_state(TASK_STOPPED);
	])
])
m4trace:config/kernel-special-state.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_SET_SPECIAL_STATE], [
	AC_MSG_CHECKING([whether set_special_state() exists])
	ZFS_LINUX_TEST_RESULT([set_special_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_SPECIAL_STATE, 1, [set_special_state() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-stdarg.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_STANDALONE_LINUX_STDARG], [
	ZFS_LINUX_TEST_SRC([has_standalone_linux_stdarg], [
		#include <linux/stdarg.h>

		#if !defined(va_start) || !defined(va_end) || \
		    !defined(va_arg) || !defined(va_copy)
		#error "<linux/stdarg.h> is invalid"
		#endif
	],[])
])
m4trace:config/kernel-stdarg.m4:19: -1- AC_DEFUN([ZFS_AC_KERNEL_STANDALONE_LINUX_STDARG], [
	dnl #
	dnl # Linux 5.15 ships its own stdarg.h and doesn't allow to
	dnl # include compiler headers.
	dnl #
	AC_MSG_CHECKING([whether standalone <linux/stdarg.h> exists])
	ZFS_LINUX_TEST_RESULT([has_standalone_linux_stdarg], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_STANDALONE_LINUX_STDARG, 1,
			[standalone <linux/stdarg.h> exists])
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-super-userns.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SUPER_USER_NS], [
	ZFS_LINUX_TEST_SRC([super_user_ns], [
		#include <linux/fs.h>
		#include <linux/user_namespace.h>
	], [
		struct super_block super;
		super.s_user_ns = (struct user_namespace *)NULL;
	])
])
m4trace:config/kernel-super-userns.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_SUPER_USER_NS], [
	AC_MSG_CHECKING([whether super_block->s_user_ns exists])
	ZFS_LINUX_TEST_RESULT([super_user_ns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SUPER_USER_NS, 1,
		    [super_block->s_user_ns exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-symlink.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SYMLINK], [
	dnl #
	dnl # 6.3 API change that changed the first arg
	dnl # to struct mnt_idmap*
	dnl #
	ZFS_LINUX_TEST_SRC([symlink_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>
		int tmp_symlink(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink                = tmp_symlink,
		};
	],[])
	dnl #
	dnl # 5.12 API change that added the struct user_namespace* arg
	dnl # to the front of this function type's arg list.
	dnl #
	ZFS_LINUX_TEST_SRC([symlink_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_symlink(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink		= tmp_symlink,
		};
	],[])
])
m4trace:config/kernel-symlink.m4:37: -1- AC_DEFUN([ZFS_AC_KERNEL_SYMLINK], [
	AC_MSG_CHECKING([whether iops->symlink() takes struct mnt_idmap*])
	ZFS_LINUX_TEST_RESULT([symlink_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_SYMLINK_IDMAP, 1,
		    [iops->symlink() takes struct mnt_idmap*])
	],[
		AC_MSG_CHECKING([whether iops->symlink() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([symlink_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_SYMLINK_USERNS, 1,
			    [iops->symlink() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
])
m4trace:config/kernel-sysfs.m4:12: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SYSFS_DEFAULT_GROUPS], [
	ZFS_LINUX_TEST_SRC([sysfs_default_groups], [
		#include <linux/kobject.h>
	],[
		struct kobj_type __attribute__ ((unused)) kt = {
			.default_groups = (const struct attribute_group **)NULL };
	])
])
m4trace:config/kernel-sysfs.m4:21: -1- AC_DEFUN([ZFS_AC_KERNEL_SYSFS_DEFAULT_GROUPS], [
	AC_MSG_CHECKING([whether struct kobj_type.default_groups exists])
	ZFS_LINUX_TEST_RESULT([sysfs_default_groups],[
		AC_MSG_RESULT(yes)
		AC_DEFINE([HAVE_SYSFS_DEFAULT_GROUPS], 1, [struct kobj_type has default_groups])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-sysfs.m4:31: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_SYSFS], [
	ZFS_AC_KERNEL_SRC_SYSFS_DEFAULT_GROUPS
])
m4trace:config/kernel-sysfs.m4:35: -1- AC_DEFUN([ZFS_AC_KERNEL_SYSFS], [
	ZFS_AC_KERNEL_SYSFS_DEFAULT_GROUPS
])
m4trace:config/kernel-timer.m4:12: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_TIMER_SETUP], [
	ZFS_LINUX_TEST_SRC([timer_setup], [
		#include <linux/timer.h>

		struct my_task_timer {
			struct timer_list timer;
			int data;
		};

		void task_expire(struct timer_list *tl)
		{
			struct my_task_timer *task_timer =
			    from_timer(task_timer, tl, timer);
			task_timer->data = 42;
		}
	],[
		struct my_task_timer task_timer;
		timer_setup(&task_timer.timer, task_expire, 0);
	])

	ZFS_LINUX_TEST_SRC([timer_list_function], [
		#include <linux/timer.h>
		void task_expire(struct timer_list *tl) {}
	],[
		struct timer_list tl;
		tl.function = task_expire;
	])

	ZFS_LINUX_TEST_SRC([timer_list_flags], [
		#include <linux/timer.h>
	],[
		struct timer_list tl;
		tl.flags = 2;
	])
])
m4trace:config/kernel-timer.m4:48: -1- AC_DEFUN([ZFS_AC_KERNEL_TIMER_SETUP], [
	AC_MSG_CHECKING([whether timer_setup() is available])
	ZFS_LINUX_TEST_RESULT([timer_setup], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_SETUP, 1,
		    [timer_setup() is available])
	],[
		AC_MSG_RESULT(no)
	])

	AC_MSG_CHECKING([whether timer function expects timer_list])
	ZFS_LINUX_TEST_RESULT([timer_list_function], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_FUNCTION_TIMER_LIST, 1,
		    [timer_list.function gets a timer_list])
	],[
		AC_MSG_RESULT(no)
	])

	AC_MSG_CHECKING([whether struct timer_list has flags])
	ZFS_LINUX_TEST_RESULT([timer_list_flags], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_LIST_FLAGS, 1,
		    [struct timer_list has a flags member])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-tmpfile.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_TMPFILE], [
	dnl #
	dnl # 6.3 API change
	dnl # The first arg is now struct mnt_idmap * 
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_mnt_idmap], [
		#include <linux/fs.h>
		int tmpfile(struct mnt_idmap *idmap,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	],[])
	dnl # 6.1 API change
	dnl # use struct file instead of struct dentry
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_tmpfile], [
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	],[])
	dnl #
	dnl # 5.11 API change
	dnl # add support for userns parameter to tmpfile
	dnl #
	ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_dentry_userns], [
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct dentry *dentry,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	],[])
	ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_dentry], [
			#include <linux/fs.h>
			int tmpfile(struct inode *inode, struct dentry *dentry,
			    umode_t mode) { return 0; }
			static struct inode_operations
			    iops __attribute__ ((unused)) = {
				.tmpfile = tmpfile,
			};
	],[])
])
m4trace:config/kernel-tmpfile.m4:58: -1- AC_DEFUN([ZFS_AC_KERNEL_TMPFILE], [
	AC_MSG_CHECKING([whether i_op->tmpfile() exists])
	ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
		AC_DEFINE(HAVE_TMPFILE_IDMAP, 1, [i_op->tmpfile() has mnt_idmap])
	], [
		ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
			AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry_userns], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
				AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
				AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
			])
		])
	])
])
m4trace:config/kernel-totalhigh_pages.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_TOTALHIGH_PAGES], [
	ZFS_LINUX_TEST_SRC([totalhigh_pages], [
		#include <linux/highmem.h>
	],[
		unsigned long pages __attribute__ ((unused));
		pages = totalhigh_pages();
	])
])
m4trace:config/kernel-totalhigh_pages.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_TOTALHIGH_PAGES], [
	AC_MSG_CHECKING([whether totalhigh_pages() exists])
	ZFS_LINUX_TEST_RESULT([totalhigh_pages], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TOTALHIGH_PAGES, 1, [totalhigh_pages() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-totalram-pages-func.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_TOTALRAM_PAGES_FUNC], [
	ZFS_LINUX_TEST_SRC([totalram_pages], [
		#include <linux/mm.h>
	],[
		unsigned long pages __attribute__ ((unused));
		pages = totalram_pages();
	])
])
m4trace:config/kernel-totalram-pages-func.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_TOTALRAM_PAGES_FUNC], [
	AC_MSG_CHECKING([whether totalram_pages() exists])
	ZFS_LINUX_TEST_RESULT([totalram_pages], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TOTALRAM_PAGES_FUNC, 1,
		    [kernel has totalram_pages()])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-truncate-setsize.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_TRUNCATE_SETSIZE], [
	ZFS_LINUX_TEST_SRC([truncate_setsize], [
		#include <linux/mm.h>
	], [
		truncate_setsize(NULL, 0);
	])
])
m4trace:config/kernel-truncate-setsize.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_TRUNCATE_SETSIZE], [
	AC_MSG_CHECKING([whether truncate_setsize() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([truncate_setsize],
	    [truncate_setsize], [mm/truncate.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([truncate_setsize])
	])
])
m4trace:config/kernel-user-ns-inum.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_USER_NS_COMMON_INUM], [
	ZFS_LINUX_TEST_SRC([user_ns_common_inum], [
		#include <linux/user_namespace.h>
	], [
		struct user_namespace uns;
		uns.ns.inum = 0;
	])
])
m4trace:config/kernel-user-ns-inum.m4:14: -1- AC_DEFUN([ZFS_AC_KERNEL_USER_NS_COMMON_INUM], [
	AC_MSG_CHECKING([whether user_namespace->ns.inum exists])
	ZFS_LINUX_TEST_RESULT([user_ns_common_inum], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_USER_NS_COMMON_INUM, 1,
		    [user_namespace->ns.inum exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-userns-capabilities.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_NS_CAPABLE], [
	ZFS_LINUX_TEST_SRC([ns_capable], [
		#include <linux/capability.h>
	],[
		ns_capable((struct user_namespace *)NULL, CAP_SYS_ADMIN);
	])
])
m4trace:config/kernel-userns-capabilities.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_NS_CAPABLE], [
	AC_MSG_CHECKING([whether ns_capable exists])
	ZFS_LINUX_TEST_RESULT([ns_capable], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([ns_capable()])
	])
])
m4trace:config/kernel-userns-capabilities.m4:26: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_HAS_CAPABILITY], [
	ZFS_LINUX_TEST_SRC([has_capability], [
		#include <linux/capability.h>
	],[
		struct task_struct *task = NULL;
		int cap = 0;
		bool result __attribute__ ((unused));

		result = has_capability(task, cap);
	])
])
m4trace:config/kernel-userns-capabilities.m4:38: -1- AC_DEFUN([ZFS_AC_KERNEL_HAS_CAPABILITY], [
	AC_MSG_CHECKING([whether has_capability() is available])
	ZFS_LINUX_TEST_RESULT_SYMBOL([has_capability],
	    [has_capability], [kernel/capability.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_HAS_CAPABILITY, 1, [has_capability() is available])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-userns-capabilities.m4:53: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CRED_USER_NS], [
	ZFS_LINUX_TEST_SRC([cred_user_ns], [
		#include <linux/cred.h>
	],[
		struct cred cr;
		cr.user_ns = (struct user_namespace *)NULL;
	])
])
m4trace:config/kernel-userns-capabilities.m4:62: -1- AC_DEFUN([ZFS_AC_KERNEL_CRED_USER_NS], [
	AC_MSG_CHECKING([whether cred_t->user_ns exists])
	ZFS_LINUX_TEST_RESULT([cred_user_ns], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([cred_t->user_ns()])
	])
])
m4trace:config/kernel-userns-capabilities.m4:76: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_KUID_HAS_MAPPING], [
	ZFS_LINUX_TEST_SRC([kuid_has_mapping], [
		#include <linux/uidgid.h>
	],[
		kuid_has_mapping((struct user_namespace *)NULL, KUIDT_INIT(0));
		kgid_has_mapping((struct user_namespace *)NULL, KGIDT_INIT(0));
	])
])
m4trace:config/kernel-userns-capabilities.m4:85: -1- AC_DEFUN([ZFS_AC_KERNEL_KUID_HAS_MAPPING], [
	AC_MSG_CHECKING([whether kuid_has_mapping/kgid_has_mapping exist])
	ZFS_LINUX_TEST_RESULT([kuid_has_mapping], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([kuid_has_mapping()])
	])
])
m4trace:config/kernel-userns-capabilities.m4:94: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_USERNS_CAPABILITIES], [
	ZFS_AC_KERNEL_SRC_NS_CAPABLE
	ZFS_AC_KERNEL_SRC_HAS_CAPABILITY
	ZFS_AC_KERNEL_SRC_CRED_USER_NS
	ZFS_AC_KERNEL_SRC_KUID_HAS_MAPPING
])
m4trace:config/kernel-userns-capabilities.m4:101: -1- AC_DEFUN([ZFS_AC_KERNEL_USERNS_CAPABILITIES], [
	ZFS_AC_KERNEL_NS_CAPABLE
	ZFS_AC_KERNEL_HAS_CAPABILITY
	ZFS_AC_KERNEL_CRED_USER_NS
	ZFS_AC_KERNEL_KUID_HAS_MAPPING
])
m4trace:config/kernel-usleep_range.m4:8: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_USLEEP_RANGE], [
	ZFS_LINUX_TEST_SRC([usleep_range], [
		#include <linux/delay.h>
	],[
		usleep_range(0, 0);
	])
])
m4trace:config/kernel-usleep_range.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_USLEEP_RANGE], [
	AC_MSG_CHECKING([whether usleep_range() is available])
	ZFS_LINUX_TEST_RESULT([usleep_range], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([usleep_range()])
	])
])
m4trace:config/kernel-vfs-direct_IO.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_DIRECT_IO], [
	ZFS_LINUX_TEST_SRC([direct_io_iter], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	],[])

	ZFS_LINUX_TEST_SRC([direct_io_iter_offset], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	],[])

	ZFS_LINUX_TEST_SRC([direct_io_iter_rw_offset], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	],[])

	ZFS_LINUX_TEST_SRC([direct_io_iovec], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    const struct iovec *iov, loff_t offset,
		    unsigned long nr_segs) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	],[])
])
m4trace:config/kernel-vfs-direct_IO.m4:55: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_DIRECT_IO], [
	dnl #
	dnl # Linux 4.6.x API change
	dnl #
	AC_MSG_CHECKING([whether aops->direct_IO() uses iov_iter])
	ZFS_LINUX_TEST_RESULT([direct_io_iter], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER, 1,
		    [aops->direct_IO() uses iov_iter without rw])
	],[
		AC_MSG_RESULT([no])

		dnl #
		dnl # Linux 4.1.x API change
		dnl #
		AC_MSG_CHECKING(
		    [whether aops->direct_IO() uses offset])
		ZFS_LINUX_TEST_RESULT([direct_io_iter_offset], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_OFFSET, 1,
			    [aops->direct_IO() uses iov_iter with offset])

		],[
			AC_MSG_RESULT([no])

			dnl #
			dnl # Linux 3.16.x API change
			dnl #
			AC_MSG_CHECKING(
			    [whether aops->direct_IO() uses rw and offset])
			ZFS_LINUX_TEST_RESULT([direct_io_iter_rw_offset], [
				AC_MSG_RESULT([yes])
				AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET, 1,
				    [aops->direct_IO() uses iov_iter with ]
				    [rw and offset])
			],[
				AC_MSG_RESULT([no])

				dnl #
				dnl # Ancient Linux API (predates git)
				dnl #
				AC_MSG_CHECKING(
				    [whether aops->direct_IO() uses iovec])
				ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				],[
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
			])
		])
	])
])
m4trace:config/kernel-vfs-filemap_dirty_folio.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_FILEMAP_DIRTY_FOLIO], [
	ZFS_LINUX_TEST_SRC([vfs_has_filemap_dirty_folio], [
		#include <linux/pagemap.h>
		#include <linux/writeback.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.dirty_folio	= filemap_dirty_folio,
		};
	],[])
])
m4trace:config/kernel-vfs-filemap_dirty_folio.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_FILEMAP_DIRTY_FOLIO], [
	dnl #
	dnl # Linux 5.18 uses filemap_dirty_folio in lieu of
	dnl # ___set_page_dirty_nobuffers
	dnl #
	AC_MSG_CHECKING([whether filemap_dirty_folio exists])
	ZFS_LINUX_TEST_RESULT([vfs_has_filemap_dirty_folio], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_FILEMAP_DIRTY_FOLIO, 1,
			[filemap_dirty_folio exists])
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-vfs-fsync.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_FSYNC_2ARGS], [
	ZFS_LINUX_TEST_SRC([vfs_fsync_2args], [
		#include <linux/fs.h>
	],[
		vfs_fsync(NULL, 0);
	])
])
m4trace:config/kernel-vfs-fsync.m4:13: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_FSYNC_2ARGS], [
	AC_MSG_CHECKING([whether vfs_fsync() wants 2 args])
	ZFS_LINUX_TEST_RESULT([vfs_fsync_2args], [
		AC_MSG_RESULT(yes)
	],[
		ZFS_LINUX_TEST_ERROR([vfs_fsync()])
	])
])
m4trace:config/kernel-vfs-getattr.m4:5: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_GETATTR_4ARGS], [
	ZFS_LINUX_TEST_SRC([vfs_getattr_4args], [
		#include <linux/fs.h>
	],[
		vfs_getattr((const struct path *)NULL,
			(struct kstat *)NULL,
			(u32)0,
			(unsigned int)0);
	])
])
m4trace:config/kernel-vfs-getattr.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_GETATTR_4ARGS], [
	AC_MSG_CHECKING([whether vfs_getattr() wants 4 args])
	ZFS_LINUX_TEST_RESULT([vfs_getattr_4args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_4ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 4 args])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-vfs-getattr.m4:31: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_GETATTR_2ARGS], [
	ZFS_LINUX_TEST_SRC([vfs_getattr_2args], [
		#include <linux/fs.h>
	],[
		vfs_getattr((struct path *) NULL,
			(struct kstat *)NULL);
	])
])
m4trace:config/kernel-vfs-getattr.m4:40: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_GETATTR_2ARGS], [
	AC_MSG_CHECKING([whether vfs_getattr() wants 2 args])
	ZFS_LINUX_TEST_RESULT([vfs_getattr_2args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_2ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 2 args])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-vfs-getattr.m4:55: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_GETATTR_3ARGS], [
	ZFS_LINUX_TEST_SRC([vfs_getattr_3args], [
		#include <linux/fs.h>
	],[
		vfs_getattr((struct vfsmount *)NULL,
			(struct dentry *)NULL,
			(struct kstat *)NULL);
	])
])
m4trace:config/kernel-vfs-getattr.m4:65: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_GETATTR_3ARGS], [
	AC_MSG_CHECKING([whether vfs_getattr() wants 3 args])
	ZFS_LINUX_TEST_RESULT([vfs_getattr_3args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_3ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 3 args])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-vfs-getattr.m4:76: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_GETATTR], [
	ZFS_AC_KERNEL_SRC_VFS_GETATTR_4ARGS
	ZFS_AC_KERNEL_SRC_VFS_GETATTR_2ARGS
	ZFS_AC_KERNEL_SRC_VFS_GETATTR_3ARGS
])
m4trace:config/kernel-vfs-getattr.m4:82: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_GETATTR], [
	ZFS_AC_KERNEL_VFS_GETATTR_4ARGS
	ZFS_AC_KERNEL_VFS_GETATTR_2ARGS
	ZFS_AC_KERNEL_VFS_GETATTR_3ARGS
])
m4trace:config/kernel-vfs-iov_iter.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_IOV_ITER], [
	ZFS_LINUX_TEST_SRC([iov_iter_types], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		int type __attribute__ ((unused)) =
		    ITER_IOVEC | ITER_KVEC | ITER_BVEC | ITER_PIPE;
	])

	ZFS_LINUX_TEST_SRC([iov_iter_advance], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		struct iov_iter iter = { 0 };
		size_t advance = 512;

		iov_iter_advance(&iter, advance);
	])

	ZFS_LINUX_TEST_SRC([iov_iter_revert], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		struct iov_iter iter = { 0 };
		size_t revert = 512;

		iov_iter_revert(&iter, revert);
	])

	ZFS_LINUX_TEST_SRC([iov_iter_fault_in_readable], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = iov_iter_fault_in_readable(&iter, size);
	])

	ZFS_LINUX_TEST_SRC([fault_in_iov_iter_readable], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = fault_in_iov_iter_readable(&iter, size);
	])

	ZFS_LINUX_TEST_SRC([iov_iter_count], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		struct iov_iter iter = { 0 };
		size_t bytes __attribute__ ((unused));

		bytes = iov_iter_count(&iter);
	])

	ZFS_LINUX_TEST_SRC([copy_to_iter], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_to_iter((const void *)&buf, size, &iter);
	])

	ZFS_LINUX_TEST_SRC([copy_from_iter], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_from_iter((void *)&buf, size, &iter);
	])

	ZFS_LINUX_TEST_SRC([iov_iter_type], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	],[
		struct iov_iter iter = { 0 };
		__attribute__((unused)) enum iter_type i = iov_iter_type(&iter);
	])
])
m4trace:config/kernel-vfs-iov_iter.m4:98: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_IOV_ITER], [
	enable_vfs_iov_iter="yes"

	AC_MSG_CHECKING([whether iov_iter types are available])
	ZFS_LINUX_TEST_RESULT([iov_iter_types], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_TYPES, 1,
		    [iov_iter types are available])
	],[
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])

	AC_MSG_CHECKING([whether iov_iter_advance() is available])
	ZFS_LINUX_TEST_RESULT([iov_iter_advance], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_ADVANCE, 1,
		    [iov_iter_advance() is available])
	],[
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])

	AC_MSG_CHECKING([whether iov_iter_revert() is available])
	ZFS_LINUX_TEST_RESULT([iov_iter_revert], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_REVERT, 1,
		    [iov_iter_revert() is available])
	],[
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])

	AC_MSG_CHECKING([whether iov_iter_fault_in_readable() is available])
	ZFS_LINUX_TEST_RESULT([iov_iter_fault_in_readable], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_FAULT_IN_READABLE, 1,
		    [iov_iter_fault_in_readable() is available])
	],[
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether fault_in_iov_iter_readable() is available])
		ZFS_LINUX_TEST_RESULT([fault_in_iov_iter_readable], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FAULT_IN_IOV_ITER_READABLE, 1,
			    [fault_in_iov_iter_readable() is available])
		],[
			AC_MSG_RESULT(no)
			enable_vfs_iov_iter="no"
		])
	])

	AC_MSG_CHECKING([whether iov_iter_count() is available])
	ZFS_LINUX_TEST_RESULT([iov_iter_count], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_COUNT, 1,
		    [iov_iter_count() is available])
	],[
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])

	AC_MSG_CHECKING([whether copy_to_iter() is available])
	ZFS_LINUX_TEST_RESULT([copy_to_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_COPY_TO_ITER, 1,
		    [copy_to_iter() is available])
	],[
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])

	AC_MSG_CHECKING([whether copy_from_iter() is available])
	ZFS_LINUX_TEST_RESULT([copy_from_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_COPY_FROM_ITER, 1,
		    [copy_from_iter() is available])
	],[
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])

	dnl #
	dnl # This checks for iov_iter_type() in linux/uio.h. It is not
	dnl # required, however, and the module will compiled without it
	dnl # using direct access of the member attribute
	dnl #
	AC_MSG_CHECKING([whether iov_iter_type() is available])
	ZFS_LINUX_TEST_RESULT([iov_iter_type], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_TYPE, 1,
		    [iov_iter_type() is available])
	],[
		AC_MSG_RESULT(no)
	])

	dnl #
	dnl # As of the 4.9 kernel support is provided for iovecs, kvecs,
	dnl # bvecs and pipes in the iov_iter structure.  As long as the
	dnl # other support interfaces are all available the iov_iter can
	dnl # be correctly used in the uio structure.
	dnl #
	AS_IF([test "x$enable_vfs_iov_iter" = "xyes"], [
		AC_DEFINE(HAVE_VFS_IOV_ITER, 1,
		    [All required iov_iter interfaces are available])
	])
])
m4trace:config/kernel-vfs-iterate.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_ITERATE], [
	ZFS_LINUX_TEST_SRC([file_operations_iterate_shared], [
		#include <linux/fs.h>
		int iterate(struct file *filp, struct dir_context * context)
		    { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate_shared	 = iterate,
		};
	],[])

	ZFS_LINUX_TEST_SRC([file_operations_iterate], [
		#include <linux/fs.h>
		int iterate(struct file *filp,
		    struct dir_context *context) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate	 = iterate,
		};

		#if defined(FMODE_KABI_ITERATE)
		#error "RHEL 7.5, FMODE_KABI_ITERATE interface"
		#endif
	],[])

	ZFS_LINUX_TEST_SRC([file_operations_readdir], [
		#include <linux/fs.h>
		int readdir(struct file *filp, void *entry,
		    filldir_t func) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.readdir = readdir,
		};
	],[])
])
m4trace:config/kernel-vfs-iterate.m4:40: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_ITERATE], [
	dnl #
	dnl # 4.7 API change
	dnl #
	AC_MSG_CHECKING([whether fops->iterate_shared() is available])
	ZFS_LINUX_TEST_RESULT([file_operations_iterate_shared], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VFS_ITERATE_SHARED, 1,
		    [fops->iterate_shared() is available])
	],[
		AC_MSG_RESULT(no)

		dnl #
		dnl # 3.11 API change
		dnl #
		dnl # RHEL 7.5 compatibility; the fops.iterate() method was
		dnl # added to the file_operations structure but in order to
		dnl # maintain KABI compatibility all callers must set
		dnl # FMODE_KABI_ITERATE which is checked in iterate_dir().
		dnl # When detected ignore this interface and fallback to
		dnl # to using fops.readdir() to retain KABI compatibility.
		dnl #
		AC_MSG_CHECKING([whether fops->iterate() is available])
		ZFS_LINUX_TEST_RESULT([file_operations_iterate], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_VFS_ITERATE, 1,
			    [fops->iterate() is available])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # readdir interface introduced
			dnl #
			AC_MSG_CHECKING([whether fops->readdir() is available])
			ZFS_LINUX_TEST_RESULT([file_operations_readdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_VFS_READDIR, 1,
				    [fops->readdir() is available])
			],[
				ZFS_LINUX_TEST_ERROR([vfs_iterate])
			])
		])
	])
])
m4trace:config/kernel-vfs-read_folio.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_READ_FOLIO], [
	ZFS_LINUX_TEST_SRC([vfs_has_read_folio], [
		#include <linux/fs.h>

		static int
		test_read_folio(struct file *file, struct folio *folio) {
			(void) file; (void) folio;
			return (0);
		}

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.read_folio	= test_read_folio,
		};
	],[])
])
m4trace:config/kernel-vfs-read_folio.m4:21: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_READ_FOLIO], [
	dnl #
	dnl # Linux 5.19 uses read_folio in lieu of readpage
	dnl #
	AC_MSG_CHECKING([whether read_folio exists])
	ZFS_LINUX_TEST_RESULT([vfs_has_read_folio], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_READ_FOLIO, 1, [read_folio exists])
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-vfs-rw-iterate.m4:4: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_RW_ITERATE], [
	ZFS_LINUX_TEST_SRC([file_operations_rw], [
		#include <linux/fs.h>

		ssize_t test_read(struct kiocb *kiocb, struct iov_iter *to)
		    { return 0; }
		ssize_t test_write(struct kiocb *kiocb, struct iov_iter *from)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
		    .read_iter = test_read,
		    .write_iter = test_write,
		};
	],[])

	ZFS_LINUX_TEST_SRC([new_sync_rw], [
		#include <linux/fs.h>
	],[
	        ssize_t ret __attribute__ ((unused));
		struct file *filp = NULL;
		char __user *rbuf = NULL;
		const char __user *wbuf = NULL;
		size_t len = 0;
		loff_t ppos;

		ret = new_sync_read(filp, rbuf, len, &ppos);
		ret = new_sync_write(filp, wbuf, len, &ppos);
	])
])
m4trace:config/kernel-vfs-rw-iterate.m4:35: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_RW_ITERATE], [
	AC_MSG_CHECKING([whether fops->read/write_iter() are available])
	ZFS_LINUX_TEST_RESULT([file_operations_rw], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VFS_RW_ITERATE, 1,
		    [fops->read/write_iter() are available])

		dnl #
		dnl # Linux 4.1 API
		dnl #
		AC_MSG_CHECKING([whether new_sync_read/write() are available])
		ZFS_LINUX_TEST_RESULT([new_sync_rw], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_NEW_SYNC_READ, 1,
			    [new_sync_read()/new_sync_write() are available])
		],[
			AC_MSG_RESULT(no)
		])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-vfs-rw-iterate.m4:61: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_GENERIC_WRITE_CHECKS], [
	ZFS_LINUX_TEST_SRC([generic_write_checks], [
		#include <linux/fs.h>
	],[
		struct kiocb *iocb = NULL;
		struct iov_iter *iov = NULL;
		generic_write_checks(iocb, iov);
	])
])
m4trace:config/kernel-vfs-rw-iterate.m4:71: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_GENERIC_WRITE_CHECKS], [
	AC_MSG_CHECKING([whether generic_write_checks() takes kiocb])
	ZFS_LINUX_TEST_RESULT([generic_write_checks], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_WRITE_CHECKS_KIOCB, 1,
		    [generic_write_checks() takes kiocb])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-vfs-set_page_dirty.m4:9: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_VFS_SET_PAGE_DIRTY_NOBUFFERS], [
	ZFS_LINUX_TEST_SRC([vfs_has_set_page_dirty_nobuffers], [
		#include <linux/pagemap.h>
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.set_page_dirty = __set_page_dirty_nobuffers,
		};
	],[])
])
m4trace:config/kernel-vfs-set_page_dirty.m4:21: -1- AC_DEFUN([ZFS_AC_KERNEL_VFS_SET_PAGE_DIRTY_NOBUFFERS], [
	dnl #
	dnl # Linux 5.14 change requires set_page_dirty() to be assigned
	dnl # in address_space_operations()
	dnl #
	AC_MSG_CHECKING([whether __set_page_dirty_nobuffers exists])
	ZFS_LINUX_TEST_RESULT([vfs_has_set_page_dirty_nobuffers], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_SET_PAGE_DIRTY_NOBUFFERS, 1,
			[__set_page_dirty_nobuffers exists])
	],[
		AC_MSG_RESULT([no])
	])
])
m4trace:config/kernel-wait.m4:9: -1- AC_DEFUN([ZFS_AC_KERNEL_WAIT_QUEUE_ENTRY_T], [
	AC_MSG_CHECKING([whether wait_queue_entry_t exists])
	ZFS_LINUX_TRY_COMPILE([
		#include <linux/wait.h>
	],[
		wait_queue_entry_t *entry __attribute__ ((unused));
	],[
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-wait.m4:34: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_WAIT_ON_BIT], [
	ZFS_LINUX_TEST_SRC([wait_on_bit], [
		#include <linux/wait.h>
	],[
		int (*action)(void *) = NULL;
		wait_on_bit(NULL, 0, action, 0);
	])
])
m4trace:config/kernel-wait.m4:43: -1- AC_DEFUN([ZFS_AC_KERNEL_WAIT_ON_BIT], [
	AC_MSG_CHECKING([whether wait_on_bit() takes an action])
	ZFS_LINUX_TEST_RESULT([wait_on_bit], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_ON_BIT_ACTION, 1, [yes])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-wait.m4:58: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_WAIT_QUEUE_HEAD_ENTRY], [
	ZFS_LINUX_TEST_SRC([wait_queue_head_entry], [
		#include <linux/wait.h>

		#ifdef HAVE_WAIT_QUEUE_ENTRY_T
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_entry_t	spl_wait_queue_entry_t;
		#else
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_t		spl_wait_queue_entry_t;
		#endif
	],[
		spl_wait_queue_head_t wq_head;
		spl_wait_queue_entry_t wq_entry;
		struct list_head *head __attribute__ ((unused));
		struct list_head *entry __attribute__ ((unused));

		head = &wq_head.head;
		entry = &wq_entry.entry;
	])
])
m4trace:config/kernel-wait.m4:80: -1- AC_DEFUN([ZFS_AC_KERNEL_WAIT_QUEUE_HEAD_ENTRY], [
	AC_MSG_CHECKING([whether wq_head->head and wq_entry->entry exist])
	ZFS_LINUX_TEST_RESULT([wait_queue_head_entry], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_HEAD_ENTRY, 1,
		    [wq_head->head and wq_entry->entry exist])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-wait.m4:91: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_WAIT], [
	ZFS_AC_KERNEL_SRC_WAIT_ON_BIT
	ZFS_AC_KERNEL_SRC_WAIT_QUEUE_HEAD_ENTRY
])
m4trace:config/kernel-wait.m4:96: -1- AC_DEFUN([ZFS_AC_KERNEL_WAIT], [
	ZFS_AC_KERNEL_WAIT_ON_BIT
	ZFS_AC_KERNEL_WAIT_QUEUE_HEAD_ENTRY
])
m4trace:config/kernel-writepage_t.m4:1: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_WRITEPAGE_T], [
	dnl #
	dnl # 6.3 API change
	dnl # The writepage_t function type now has its first argument as
	dnl # struct folio* instead of struct page*
	dnl #
	ZFS_LINUX_TEST_SRC([writepage_t_folio], [
		#include <linux/writeback.h>
		int putpage(struct folio *folio,
		    struct writeback_control *wbc, void *data)
		{ return 0; }
		writepage_t func = putpage;
	],[])
])
m4trace:config/kernel-writepage_t.m4:16: -1- AC_DEFUN([ZFS_AC_KERNEL_WRITEPAGE_T], [
	AC_MSG_CHECKING([whether int (*writepage_t)() takes struct folio*])
	ZFS_LINUX_TEST_RESULT([writepage_t_folio], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WRITEPAGE_T_FOLIO, 1,
		   [int (*writepage_t)() takes struct folio*])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-xattr-handler.m4:6: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_CONST_XATTR_HANDLER], [
	ZFS_LINUX_TEST_SRC([const_xattr_handler], [
		#include <linux/fs.h>
		#include <linux/xattr.h>

		const struct xattr_handler xattr_test_handler = {
			.prefix	= "test",
			.get	= NULL,
			.set	= NULL,
		};

		const struct xattr_handler *xattr_handlers[] = {
			&xattr_test_handler,
		};

		const struct super_block sb __attribute__ ((unused)) = {
			.s_xattr = xattr_handlers,
		};
	],[])
])
m4trace:config/kernel-xattr-handler.m4:27: -1- AC_DEFUN([ZFS_AC_KERNEL_CONST_XATTR_HANDLER], [
	AC_MSG_CHECKING([whether super_block uses const struct xattr_handler])
	ZFS_LINUX_TEST_RESULT([const_xattr_handler], [
		AC_MSG_RESULT([yes])
	],[
		ZFS_LINUX_TEST_ERROR([const xattr_handler])
	])
])
m4trace:config/kernel-xattr-handler.m4:42: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_XATTR_HANDLER_NAME], [
	ZFS_LINUX_TEST_SRC([xattr_handler_name], [
		#include <linux/xattr.h>

		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.name = XATTR_NAME_POSIX_ACL_ACCESS,
		};
	],[])
])
m4trace:config/kernel-xattr-handler.m4:53: -1- AC_DEFUN([ZFS_AC_KERNEL_XATTR_HANDLER_NAME], [
	AC_MSG_CHECKING([whether xattr_handler has name])
	ZFS_LINUX_TEST_RESULT([xattr_handler_name], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_HANDLER_NAME, 1,
		    [xattr_handler has name])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-xattr-handler.m4:67: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_XATTR_HANDLER_GET], [
	ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry_inode], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_get_xattr_handler], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry], [
		#include <linux/xattr.h>

		int get(struct dentry *dentry, const char *name,
		    void *buffer, size_t size, int handler_flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry_inode_flags], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer,
		    size_t size, int flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	],[])
])
m4trace:config/kernel-xattr-handler.m4:118: -1- AC_DEFUN([ZFS_AC_KERNEL_XATTR_HANDLER_GET], [
	dnl #
	dnl # 4.7 API change,
	dnl # The xattr_handler->get() callback was changed to take both
	dnl # dentry and inode.
	dnl #
	AC_MSG_CHECKING([whether xattr_handler->get() wants dentry and inode])
	ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE, 1,
		    [xattr_handler->get() wants both dentry and inode])
	],[
		dnl #
		dnl # 4.4 API change,
		dnl # The xattr_handler->get() callback was changed to take a
		dnl # attr_handler, and handler_flags argument was removed and
		dnl # should be accessed by handler->flags.
		dnl #
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(
		    [whether xattr_handler->get() wants xattr_handler])
		ZFS_LINUX_TEST_RESULT([xattr_handler_get_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_GET_HANDLER, 1,
			    [xattr_handler->get() wants xattr_handler])
		],[
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->get() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->get() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_GET_DENTRY, 1,
				    [xattr_handler->get() wants dentry])
			],[
				dnl #
				dnl # Android API change,
				dnl # The xattr_handler->get() callback was
				dnl # changed to take dentry, inode and flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->get() wants dentry and inode and flags])
				ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				],[
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
			])
		])
	])
])
m4trace:config/kernel-xattr-handler.m4:181: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_XATTR_HANDLER_SET], [
	ZFS_LINUX_TEST_SRC([xattr_handler_set_mnt_idmap], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct mnt_idmap *idmap,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_set_userns], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct user_namespace *mnt_userns,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_set_dentry_inode], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, const void *buffer,
		    size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_set_xattr_handler], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_set_dentry], [
		#include <linux/xattr.h>

		int set(struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	],[])
])
m4trace:config/kernel-xattr-handler.m4:252: -1- AC_DEFUN([ZFS_AC_KERNEL_XATTR_HANDLER_SET], [
	dnl #
	dnl # 5.12 API change,
	dnl # The xattr_handler->set() callback was changed to 8 arguments, and
	dnl # struct user_namespace* was inserted as arg #2
	dnl #
	dnl # 6.3 API change,
	dnl # The xattr_handler->set() callback 2nd arg is now struct mnt_idmap *
	dnl #
	AC_MSG_CHECKING([whether xattr_handler->set() wants dentry, inode, and mnt_idmap])
	ZFS_LINUX_TEST_RESULT([xattr_handler_set_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_SET_IDMAP, 1,
		    [xattr_handler->set() takes mnt_idmap])
	], [
		AC_MSG_CHECKING([whether xattr_handler->set() wants dentry, inode, and user_namespace])
		ZFS_LINUX_TEST_RESULT([xattr_handler_set_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_SET_USERNS, 1,
			    [xattr_handler->set() takes user_namespace])
		],[
			dnl #
			dnl # 4.7 API change,
			dnl # The xattr_handler->set() callback was changed to take both
			dnl # dentry and inode.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING([whether xattr_handler->set() wants dentry and inode])
			ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry_inode], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_SET_DENTRY_INODE, 1,
				    [xattr_handler->set() wants both dentry and inode])
			],[
				dnl #
				dnl # 4.4 API change,
				dnl # The xattr_handler->set() callback was changed to take a
				dnl # xattr_handler, and handler_flags argument was removed and
				dnl # should be accessed by handler->flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->set() wants xattr_handler])
				ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				],[
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
			])
		])
	])
])
m4trace:config/kernel-xattr-handler.m4:324: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_XATTR_HANDLER_LIST], [
	ZFS_LINUX_TEST_SRC([xattr_handler_list_simple], [
		#include <linux/xattr.h>

		bool list(struct dentry *dentry) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_list_xattr_handler], [
		#include <linux/xattr.h>

		size_t list(const struct xattr_handler *handler,
		    struct dentry *dentry, char *list, size_t list_size,
		    const char *name, size_t name_len) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	],[])

	ZFS_LINUX_TEST_SRC([xattr_handler_list_dentry], [
		#include <linux/xattr.h>

		size_t list(struct dentry *dentry,
		    char *list, size_t list_size,
		    const char *name, size_t name_len,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	],[])
])
m4trace:config/kernel-xattr-handler.m4:361: -1- AC_DEFUN([ZFS_AC_KERNEL_XATTR_HANDLER_LIST], [
	dnl # 4.5 API change,
	dnl # The xattr_handler->list() callback was changed to take only a
	dnl # dentry and it only needs to return if it's accessible.
	AC_MSG_CHECKING([whether xattr_handler->list() wants simple])
	ZFS_LINUX_TEST_RESULT([xattr_handler_list_simple], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_LIST_SIMPLE, 1,
		    [xattr_handler->list() wants simple])
	],[
		dnl #
		dnl # 4.4 API change,
		dnl # The xattr_handler->list() callback was changed to take a
		dnl # xattr_handler, and handler_flags argument was removed
		dnl # and should be accessed by handler->flags.
		dnl #
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(
		    [whether xattr_handler->list() wants xattr_handler])
		ZFS_LINUX_TEST_RESULT([xattr_handler_list_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_LIST_HANDLER, 1,
			    [xattr_handler->list() wants xattr_handler])
		],[
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->list() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->list() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_list_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_LIST_DENTRY, 1,
				    [xattr_handler->list() wants dentry])
			],[
				ZFS_LINUX_TEST_ERROR([xattr list()])
			])
		])
	])
])
m4trace:config/kernel-xattr-handler.m4:410: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_POSIX_ACL_FROM_XATTR_USERNS], [
	ZFS_LINUX_TEST_SRC([posix_acl_from_xattr_userns], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl_xattr.h>
	],[
		posix_acl_from_xattr(&init_user_ns, NULL, 0);
	])
])
m4trace:config/kernel-xattr-handler.m4:420: -1- AC_DEFUN([ZFS_AC_KERNEL_POSIX_ACL_FROM_XATTR_USERNS], [
	AC_MSG_CHECKING([whether posix_acl_from_xattr() needs user_ns])
	ZFS_LINUX_TEST_RESULT([posix_acl_from_xattr_userns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_FROM_XATTR_USERNS, 1,
		    [posix_acl_from_xattr() needs user_ns])
	],[
		ZFS_LINUX_TEST_ERROR([posix_acl_from_xattr()])
	])
])
m4trace:config/kernel-xattr-handler.m4:436: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_SETXATTR], [
	ZFS_LINUX_TEST_SRC([have_generic_setxattr], [
		#include <linux/fs.h>
		#include <linux/xattr.h>

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setxattr = generic_setxattr
		};
	],[])
])
m4trace:config/kernel-xattr-handler.m4:448: -1- AC_DEFUN([ZFS_AC_KERNEL_GENERIC_SETXATTR], [
	AC_MSG_CHECKING([whether generic_setxattr() exists])
	ZFS_LINUX_TEST_RESULT([have_generic_setxattr], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_SETXATTR, 1,
		    [generic_setxattr() exists])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/kernel-xattr-handler.m4:459: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_XATTR], [
	ZFS_AC_KERNEL_SRC_CONST_XATTR_HANDLER
	ZFS_AC_KERNEL_SRC_XATTR_HANDLER_NAME
	ZFS_AC_KERNEL_SRC_XATTR_HANDLER_GET
	ZFS_AC_KERNEL_SRC_XATTR_HANDLER_SET
	ZFS_AC_KERNEL_SRC_XATTR_HANDLER_LIST
	ZFS_AC_KERNEL_SRC_POSIX_ACL_FROM_XATTR_USERNS
	ZFS_AC_KERNEL_SRC_GENERIC_SETXATTR
])
m4trace:config/kernel-xattr-handler.m4:469: -1- AC_DEFUN([ZFS_AC_KERNEL_XATTR], [
	ZFS_AC_KERNEL_CONST_XATTR_HANDLER
	ZFS_AC_KERNEL_XATTR_HANDLER_NAME
	ZFS_AC_KERNEL_XATTR_HANDLER_GET
	ZFS_AC_KERNEL_XATTR_HANDLER_SET
	ZFS_AC_KERNEL_XATTR_HANDLER_LIST
	ZFS_AC_KERNEL_POSIX_ACL_FROM_XATTR_USERNS
	ZFS_AC_KERNEL_GENERIC_SETXATTR
])
m4trace:config/kernel-zero_page.m4:9: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_ZERO_PAGE], [
	ZFS_LINUX_TEST_SRC([zero_page], [
		#include <asm/pgtable.h>
	], [
		struct page *p __attribute__ ((unused));
		p = ZERO_PAGE(0);
	], [], [ZFS_META_LICENSE])
])
m4trace:config/kernel-zero_page.m4:18: -1- AC_DEFUN([ZFS_AC_KERNEL_ZERO_PAGE], [
	AC_MSG_CHECKING([whether ZERO_PAGE() is GPL-only])
	ZFS_LINUX_TEST_RESULT([zero_page_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ZERO_PAGE_GPL_ONLY, 1,
		    [ZERO_PAGE() is GPL-only])
	])
])
m4trace:config/kernel-zlib.m4:9: -1- AC_DEFUN([ZFS_AC_KERNEL_SRC_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE], [
	ZFS_LINUX_TEST_SRC([2args_zlib_deflate_workspacesize], [
		#include <linux/zlib.h>
	],[
		return zlib_deflate_workspacesize(MAX_WBITS, MAX_MEM_LEVEL);
	])
])
m4trace:config/kernel-zlib.m4:17: -1- AC_DEFUN([ZFS_AC_KERNEL_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE], [
	AC_MSG_CHECKING([whether zlib_deflate_workspacesize() wants 2 args])
	ZFS_LINUX_TEST_RESULT([2args_zlib_deflate_workspacesize], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE, 1,
		    [zlib_deflate_workspacesize() wants 2 args])
	],[
		ZFS_LINUX_TEST_ERROR([zlib_deflate_workspacesize()])
	])
])
m4trace:config/kernel.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_KERNEL], [
	AM_COND_IF([BUILD_LINUX], [
		dnl # Setup the kernel build environment.
		ZFS_AC_KERNEL
		ZFS_AC_QAT

		dnl # Sanity checks for module building and CONFIG_* defines
		ZFS_AC_KERNEL_CONFIG_DEFINED
		ZFS_AC_MODULE_SYMVERS

		dnl # Sequential ZFS_LINUX_TRY_COMPILE tests
		ZFS_AC_KERNEL_FPU_HEADER
		ZFS_AC_KERNEL_OBJTOOL_HEADER
		ZFS_AC_KERNEL_WAIT_QUEUE_ENTRY_T
		ZFS_AC_KERNEL_MISC_MINOR
		ZFS_AC_KERNEL_DECLARE_EVENT_CLASS

		dnl # Parallel ZFS_LINUX_TEST_SRC / ZFS_LINUX_TEST_RESULT tests
		ZFS_AC_KERNEL_TEST_SRC
		ZFS_AC_KERNEL_TEST_RESULT

		AS_IF([test "$LINUX_OBJ" != "$LINUX"], [
			KERNEL_MAKE="$KERNEL_MAKE O=$LINUX_OBJ"
		])

		AC_SUBST(KERNEL_MAKE)
	])
])
m4trace:config/kernel.m4:39: -1- AC_DEFUN([ZFS_AC_KERNEL_TEST_SRC], [
	ZFS_AC_KERNEL_SRC_OBJTOOL
	ZFS_AC_KERNEL_SRC_GLOBAL_PAGE_STATE
	ZFS_AC_KERNEL_SRC_ACCESS_OK_TYPE
	ZFS_AC_KERNEL_SRC_PDE_DATA
	ZFS_AC_KERNEL_SRC_FALLOCATE
	ZFS_AC_KERNEL_SRC_FADVISE
	ZFS_AC_KERNEL_SRC_GENERIC_FADVISE
	ZFS_AC_KERNEL_SRC_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE
	ZFS_AC_KERNEL_SRC_RWSEM
	ZFS_AC_KERNEL_SRC_SCHED
	ZFS_AC_KERNEL_SRC_USLEEP_RANGE
	ZFS_AC_KERNEL_SRC_KMEM_CACHE
	ZFS_AC_KERNEL_SRC_KVMALLOC
	ZFS_AC_KERNEL_SRC_VMALLOC_PAGE_KERNEL
	ZFS_AC_KERNEL_SRC_WAIT
	ZFS_AC_KERNEL_SRC_INODE_TIMES
	ZFS_AC_KERNEL_SRC_INODE_LOCK
	ZFS_AC_KERNEL_SRC_GROUP_INFO_GID
	ZFS_AC_KERNEL_SRC_RW
	ZFS_AC_KERNEL_SRC_TIMER_SETUP
	ZFS_AC_KERNEL_SRC_SUPER_USER_NS
	ZFS_AC_KERNEL_SRC_PROC_OPERATIONS
	ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS
	ZFS_AC_KERNEL_SRC_BIO
	ZFS_AC_KERNEL_SRC_BLKDEV
	ZFS_AC_KERNEL_SRC_BLK_QUEUE
	ZFS_AC_KERNEL_SRC_GENHD_FLAGS
	ZFS_AC_KERNEL_SRC_REVALIDATE_DISK
	ZFS_AC_KERNEL_SRC_GET_DISK_RO
	ZFS_AC_KERNEL_SRC_GENERIC_READLINK_GLOBAL
	ZFS_AC_KERNEL_SRC_DISCARD_GRANULARITY
	ZFS_AC_KERNEL_SRC_INODE_OWNER_OR_CAPABLE
	ZFS_AC_KERNEL_SRC_XATTR
	ZFS_AC_KERNEL_SRC_ACL
	ZFS_AC_KERNEL_SRC_INODE_SETATTR
	ZFS_AC_KERNEL_SRC_INODE_GETATTR
	ZFS_AC_KERNEL_SRC_INODE_SET_FLAGS
	ZFS_AC_KERNEL_SRC_INODE_SET_IVERSION
	ZFS_AC_KERNEL_SRC_SHOW_OPTIONS
	ZFS_AC_KERNEL_SRC_FILE_INODE
	ZFS_AC_KERNEL_SRC_FILE_DENTRY
	ZFS_AC_KERNEL_SRC_FSYNC
	ZFS_AC_KERNEL_SRC_AIO_FSYNC
	ZFS_AC_KERNEL_SRC_EVICT_INODE
	ZFS_AC_KERNEL_SRC_DIRTY_INODE
	ZFS_AC_KERNEL_SRC_SHRINKER
	ZFS_AC_KERNEL_SRC_MKDIR
	ZFS_AC_KERNEL_SRC_LOOKUP_FLAGS
	ZFS_AC_KERNEL_SRC_CREATE
	ZFS_AC_KERNEL_SRC_PERMISSION
	ZFS_AC_KERNEL_SRC_GET_LINK
	ZFS_AC_KERNEL_SRC_PUT_LINK
	ZFS_AC_KERNEL_SRC_TMPFILE
	ZFS_AC_KERNEL_SRC_AUTOMOUNT
	ZFS_AC_KERNEL_SRC_ENCODE_FH_WITH_INODE
	ZFS_AC_KERNEL_SRC_COMMIT_METADATA
	ZFS_AC_KERNEL_SRC_CLEAR_INODE
	ZFS_AC_KERNEL_SRC_SETATTR_PREPARE
	ZFS_AC_KERNEL_SRC_INSERT_INODE_LOCKED
	ZFS_AC_KERNEL_SRC_DENTRY
	ZFS_AC_KERNEL_SRC_DENTRY_ALIAS_D_U
	ZFS_AC_KERNEL_SRC_TRUNCATE_SETSIZE
	ZFS_AC_KERNEL_SRC_SECURITY_INODE
	ZFS_AC_KERNEL_SRC_FST_MOUNT
	ZFS_AC_KERNEL_SRC_BDI
	ZFS_AC_KERNEL_SRC_SET_NLINK
	ZFS_AC_KERNEL_SRC_SGET
	ZFS_AC_KERNEL_SRC_LSEEK_EXECUTE
	ZFS_AC_KERNEL_SRC_VFS_FILEMAP_DIRTY_FOLIO
	ZFS_AC_KERNEL_SRC_VFS_READ_FOLIO
	ZFS_AC_KERNEL_SRC_VFS_GETATTR
	ZFS_AC_KERNEL_SRC_VFS_FSYNC_2ARGS
	ZFS_AC_KERNEL_SRC_VFS_ITERATE
	ZFS_AC_KERNEL_SRC_VFS_DIRECT_IO
	ZFS_AC_KERNEL_SRC_VFS_READPAGES
	ZFS_AC_KERNEL_SRC_VFS_SET_PAGE_DIRTY_NOBUFFERS
	ZFS_AC_KERNEL_SRC_VFS_RW_ITERATE
	ZFS_AC_KERNEL_SRC_VFS_GENERIC_WRITE_CHECKS
	ZFS_AC_KERNEL_SRC_VFS_IOV_ITER
	ZFS_AC_KERNEL_SRC_KMAP_ATOMIC_ARGS
	ZFS_AC_KERNEL_SRC_FOLLOW_DOWN_ONE
	ZFS_AC_KERNEL_SRC_MAKE_REQUEST_FN
	ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT
	ZFS_AC_KERNEL_SRC_FPU
	ZFS_AC_KERNEL_SRC_FMODE_T
	ZFS_AC_KERNEL_SRC_KUIDGID_T
	ZFS_AC_KERNEL_SRC_KUID_HELPERS
	ZFS_AC_KERNEL_SRC_RENAME
	ZFS_AC_KERNEL_SRC_CURRENT_TIME
	ZFS_AC_KERNEL_SRC_USERNS_CAPABILITIES
	ZFS_AC_KERNEL_SRC_IN_COMPAT_SYSCALL
	ZFS_AC_KERNEL_SRC_KTIME
	ZFS_AC_KERNEL_SRC_TOTALRAM_PAGES_FUNC
	ZFS_AC_KERNEL_SRC_TOTALHIGH_PAGES
	ZFS_AC_KERNEL_SRC_KSTRTOUL
	ZFS_AC_KERNEL_SRC_PERCPU
	ZFS_AC_KERNEL_SRC_CPU_HOTPLUG
	ZFS_AC_KERNEL_SRC_GENERIC_FILLATTR
	ZFS_AC_KERNEL_SRC_MKNOD
	ZFS_AC_KERNEL_SRC_SYMLINK
	ZFS_AC_KERNEL_SRC_BIO_MAX_SEGS
	ZFS_AC_KERNEL_SRC_SIGNAL_STOP
	ZFS_AC_KERNEL_SRC_SIGINFO
	ZFS_AC_KERNEL_SRC_SYSFS
	ZFS_AC_KERNEL_SRC_SET_SPECIAL_STATE
	ZFS_AC_KERNEL_SRC_STANDALONE_LINUX_STDARG
	ZFS_AC_KERNEL_SRC_PAGEMAP_FOLIO_WAIT_BIT
	ZFS_AC_KERNEL_SRC_ADD_DISK
	ZFS_AC_KERNEL_SRC_KTHREAD
	ZFS_AC_KERNEL_SRC_ZERO_PAGE
	ZFS_AC_KERNEL_SRC___COPY_FROM_USER_INATOMIC
	ZFS_AC_KERNEL_SRC_USER_NS_COMMON_INUM
	ZFS_AC_KERNEL_SRC_IDMAP_MNT_API
	ZFS_AC_KERNEL_SRC_IATTR_VFSID
	ZFS_AC_KERNEL_SRC_FILEMAP
	ZFS_AC_KERNEL_SRC_WRITEPAGE_T
	case "$host_cpu" in
		powerpc*)
			ZFS_AC_KERNEL_SRC_CPU_HAS_FEATURE
			ZFS_AC_KERNEL_SRC_FLUSH_DCACHE_PAGE
			;;
	esac

	AC_MSG_CHECKING([for available kernel interfaces])
	ZFS_LINUX_TEST_COMPILE_ALL([kabi])
	AC_MSG_RESULT([done])
])
m4trace:config/kernel.m4:171: -1- AC_DEFUN([ZFS_AC_KERNEL_TEST_RESULT], [
	ZFS_AC_KERNEL_ACCESS_OK_TYPE
	ZFS_AC_KERNEL_GLOBAL_PAGE_STATE
	ZFS_AC_KERNEL_OBJTOOL
	ZFS_AC_KERNEL_PDE_DATA
	ZFS_AC_KERNEL_FALLOCATE
	ZFS_AC_KERNEL_FADVISE
	ZFS_AC_KERNEL_GENERIC_FADVISE
	ZFS_AC_KERNEL_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE
	ZFS_AC_KERNEL_RWSEM
	ZFS_AC_KERNEL_SCHED
	ZFS_AC_KERNEL_USLEEP_RANGE
	ZFS_AC_KERNEL_KMEM_CACHE
	ZFS_AC_KERNEL_KVMALLOC
	ZFS_AC_KERNEL_VMALLOC_PAGE_KERNEL
	ZFS_AC_KERNEL_WAIT
	ZFS_AC_KERNEL_INODE_TIMES
	ZFS_AC_KERNEL_INODE_LOCK
	ZFS_AC_KERNEL_GROUP_INFO_GID
	ZFS_AC_KERNEL_RW
	ZFS_AC_KERNEL_TIMER_SETUP
	ZFS_AC_KERNEL_SUPER_USER_NS
	ZFS_AC_KERNEL_PROC_OPERATIONS
	ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS
	ZFS_AC_KERNEL_BIO
	ZFS_AC_KERNEL_BLKDEV
	ZFS_AC_KERNEL_BLK_QUEUE
	ZFS_AC_KERNEL_GENHD_FLAGS
	ZFS_AC_KERNEL_REVALIDATE_DISK
	ZFS_AC_KERNEL_GET_DISK_RO
	ZFS_AC_KERNEL_GENERIC_READLINK_GLOBAL
	ZFS_AC_KERNEL_DISCARD_GRANULARITY
	ZFS_AC_KERNEL_INODE_OWNER_OR_CAPABLE
	ZFS_AC_KERNEL_XATTR
	ZFS_AC_KERNEL_ACL
	ZFS_AC_KERNEL_INODE_SETATTR
	ZFS_AC_KERNEL_INODE_GETATTR
	ZFS_AC_KERNEL_INODE_SET_FLAGS
	ZFS_AC_KERNEL_INODE_SET_IVERSION
	ZFS_AC_KERNEL_SHOW_OPTIONS
	ZFS_AC_KERNEL_FILE_INODE
	ZFS_AC_KERNEL_FILE_DENTRY
	ZFS_AC_KERNEL_FSYNC
	ZFS_AC_KERNEL_AIO_FSYNC
	ZFS_AC_KERNEL_EVICT_INODE
	ZFS_AC_KERNEL_DIRTY_INODE
	ZFS_AC_KERNEL_SHRINKER
	ZFS_AC_KERNEL_MKDIR
	ZFS_AC_KERNEL_LOOKUP_FLAGS
	ZFS_AC_KERNEL_CREATE
	ZFS_AC_KERNEL_PERMISSION
	ZFS_AC_KERNEL_GET_LINK
	ZFS_AC_KERNEL_PUT_LINK
	ZFS_AC_KERNEL_TMPFILE
	ZFS_AC_KERNEL_AUTOMOUNT
	ZFS_AC_KERNEL_ENCODE_FH_WITH_INODE
	ZFS_AC_KERNEL_COMMIT_METADATA
	ZFS_AC_KERNEL_CLEAR_INODE
	ZFS_AC_KERNEL_SETATTR_PREPARE
	ZFS_AC_KERNEL_INSERT_INODE_LOCKED
	ZFS_AC_KERNEL_DENTRY
	ZFS_AC_KERNEL_DENTRY_ALIAS_D_U
	ZFS_AC_KERNEL_TRUNCATE_SETSIZE
	ZFS_AC_KERNEL_SECURITY_INODE
	ZFS_AC_KERNEL_FST_MOUNT
	ZFS_AC_KERNEL_BDI
	ZFS_AC_KERNEL_SET_NLINK
	ZFS_AC_KERNEL_SGET
	ZFS_AC_KERNEL_LSEEK_EXECUTE
	ZFS_AC_KERNEL_VFS_FILEMAP_DIRTY_FOLIO
	ZFS_AC_KERNEL_VFS_READ_FOLIO
	ZFS_AC_KERNEL_VFS_GETATTR
	ZFS_AC_KERNEL_VFS_FSYNC_2ARGS
	ZFS_AC_KERNEL_VFS_ITERATE
	ZFS_AC_KERNEL_VFS_DIRECT_IO
	ZFS_AC_KERNEL_VFS_READPAGES
	ZFS_AC_KERNEL_VFS_SET_PAGE_DIRTY_NOBUFFERS
	ZFS_AC_KERNEL_VFS_RW_ITERATE
	ZFS_AC_KERNEL_VFS_GENERIC_WRITE_CHECKS
	ZFS_AC_KERNEL_VFS_IOV_ITER
	ZFS_AC_KERNEL_KMAP_ATOMIC_ARGS
	ZFS_AC_KERNEL_FOLLOW_DOWN_ONE
	ZFS_AC_KERNEL_MAKE_REQUEST_FN
	ZFS_AC_KERNEL_GENERIC_IO_ACCT
	ZFS_AC_KERNEL_FPU
	ZFS_AC_KERNEL_FMODE_T
	ZFS_AC_KERNEL_KUIDGID_T
	ZFS_AC_KERNEL_KUID_HELPERS
	ZFS_AC_KERNEL_RENAME
	ZFS_AC_KERNEL_CURRENT_TIME
	ZFS_AC_KERNEL_USERNS_CAPABILITIES
	ZFS_AC_KERNEL_IN_COMPAT_SYSCALL
	ZFS_AC_KERNEL_KTIME
	ZFS_AC_KERNEL_TOTALRAM_PAGES_FUNC
	ZFS_AC_KERNEL_TOTALHIGH_PAGES
	ZFS_AC_KERNEL_KSTRTOUL
	ZFS_AC_KERNEL_PERCPU
	ZFS_AC_KERNEL_CPU_HOTPLUG
	ZFS_AC_KERNEL_GENERIC_FILLATTR
	ZFS_AC_KERNEL_MKNOD
	ZFS_AC_KERNEL_SYMLINK
	ZFS_AC_KERNEL_BIO_MAX_SEGS
	ZFS_AC_KERNEL_SIGNAL_STOP
	ZFS_AC_KERNEL_SIGINFO
	ZFS_AC_KERNEL_SYSFS
	ZFS_AC_KERNEL_SET_SPECIAL_STATE
	ZFS_AC_KERNEL_STANDALONE_LINUX_STDARG
	ZFS_AC_KERNEL_PAGEMAP_FOLIO_WAIT_BIT
	ZFS_AC_KERNEL_ADD_DISK
	ZFS_AC_KERNEL_KTHREAD
	ZFS_AC_KERNEL_ZERO_PAGE
	ZFS_AC_KERNEL___COPY_FROM_USER_INATOMIC
	ZFS_AC_KERNEL_USER_NS_COMMON_INUM
	ZFS_AC_KERNEL_IDMAP_MNT_API
	ZFS_AC_KERNEL_IATTR_VFSID
	ZFS_AC_KERNEL_FILEMAP
	ZFS_AC_KERNEL_WRITEPAGE_T
	case "$host_cpu" in
		powerpc*)
			ZFS_AC_KERNEL_CPU_HAS_FEATURE
			ZFS_AC_KERNEL_FLUSH_DCACHE_PAGE
			;;
	esac
])
m4trace:config/kernel.m4:299: -1- AC_DEFUN([ZFS_AC_MODULE_SYMVERS], [
	modpost=$LINUX/scripts/Makefile.modpost
	AC_MSG_CHECKING([kernel file name for module symbols])
	AS_IF([test "x$enable_linux_builtin" != xyes -a -f "$modpost"], [
		AS_IF([grep -q Modules.symvers $modpost], [
			LINUX_SYMBOLS=Modules.symvers
		], [
			LINUX_SYMBOLS=Module.symvers
		])

		AS_IF([test ! -f "$LINUX_OBJ/$LINUX_SYMBOLS"], [
			AC_MSG_ERROR([
	*** Please make sure the kernel devel package for your distribution
	*** is installed.  If you are building with a custom kernel, make sure
	*** the kernel is configured, built, and the '--with-linux=PATH'
	*** configure option refers to the location of the kernel source.
			])
		])
	], [
		LINUX_SYMBOLS=NONE
	])
	AC_MSG_RESULT($LINUX_SYMBOLS)
	AC_SUBST(LINUX_SYMBOLS)
])
m4trace:config/kernel.m4:356: -1- AC_DEFUN([ZFS_AC_KERNEL], [
	AC_ARG_WITH([linux],
		AS_HELP_STRING([--with-linux=PATH],
		[Path to kernel source]),
		[kernelsrc="$withval"])

	AC_ARG_WITH(linux-obj,
		AS_HELP_STRING([--with-linux-obj=PATH],
		[Path to kernel build objects]),
		[kernelbuild="$withval"])

	AC_MSG_CHECKING([kernel source and build directories])
	AS_IF([test -n "$kernelsrc" && test -z "$kernelbuild"], [
		kernelbuild="$kernelsrc"
	], [test -z "$kernelsrc"], [
		AS_IF([test -e "/lib/modules/$(uname -r)/source" && \
		       test -e "/lib/modules/$(uname -r)/build"], [
			src="/lib/modules/$(uname -r)/source"
			build="/lib/modules/$(uname -r)/build"
		], [test -e "/lib/modules/$(uname -r)/build"], [
			build="/lib/modules/$(uname -r)/build"
			src="$build"
		], [
			src=

			for d in $(ls -1d /lib/modules/* 2>/dev/null | sort -Vr); do
				if test -e "$d/source" && test -e "$d/build"; then
					src="$d/source"
					build="$d/build"
					break
				fi

				if test -e "$d/build"; then
					src="$d/build"
					build="$d/build"
					break
				fi
			done

			# the least reliable method
			if test -z "$src"; then
				src=$(ls -1d /usr/src/kernels/* /usr/src/linux-* \
				      2>/dev/null | grep -v obj | sort -Vr | head -1)
				build="$src"
			fi
		])

		AS_IF([test -n "$src" && test -e "$src"], [
			kernelsrc=$(readlink -e "$src")
		], [
			kernelsrc="[Not found]"
		])
		AS_IF([test -n "$build" && test -e "$build"], [
			kernelbuild=$(readlink -e "$build")
		], [
			kernelbuild="[Not found]"
		])
	], [
		AS_IF([test "$kernelsrc" = "NONE"], [
			kernsrcver=NONE
		])
		withlinux=yes
	])

	AC_MSG_RESULT([done])
	AC_MSG_CHECKING([kernel source directory])
	AC_MSG_RESULT([$kernelsrc])
	AC_MSG_CHECKING([kernel build directory])
	AC_MSG_RESULT([$kernelbuild])
	AS_IF([test ! -d "$kernelsrc" || test ! -d "$kernelbuild"], [
		AC_MSG_ERROR([
	*** Please make sure the kernel devel package for your distribution
	*** is installed and then try again.  If that fails, you can specify the
	*** location of the kernel source and build with the '--with-linux=PATH' and
	*** '--with-linux-obj=PATH' options respectively.])
	])

	AC_MSG_CHECKING([kernel source version])
	utsrelease1=$kernelbuild/include/linux/version.h
	utsrelease2=$kernelbuild/include/linux/utsrelease.h
	utsrelease3=$kernelbuild/include/generated/utsrelease.h
	AS_IF([test -r $utsrelease1 && grep -qF UTS_RELEASE $utsrelease1], [
		utsrelease=$utsrelease1
	], [test -r $utsrelease2 && grep -qF UTS_RELEASE $utsrelease2], [
		utsrelease=$utsrelease2
	], [test -r $utsrelease3 && grep -qF UTS_RELEASE $utsrelease3], [
		utsrelease=$utsrelease3
	])

	AS_IF([test -n "$utsrelease"], [
		kernsrcver=$($AWK '/UTS_RELEASE/ { gsub(/"/, "", $[3]); print $[3] }' $utsrelease)
		AS_IF([test -z "$kernsrcver"], [
			AC_MSG_RESULT([Not found])
			AC_MSG_ERROR([
	*** Cannot determine kernel version.
			])
		])
	], [
		AC_MSG_RESULT([Not found])
		if test "x$enable_linux_builtin" != xyes; then
			AC_MSG_ERROR([
	*** Cannot find UTS_RELEASE definition.
			])
		else
			AC_MSG_ERROR([
	*** Cannot find UTS_RELEASE definition.
	*** Please run 'make prepare' inside the kernel source tree.])
		fi
	])

	AC_MSG_RESULT([$kernsrcver])

	AS_VERSION_COMPARE([$kernsrcver], [$ZFS_META_KVER_MIN], [
		 AC_MSG_ERROR([
	*** Cannot build against kernel version $kernsrcver.
	*** The minimum supported kernel version is $ZFS_META_KVER_MIN.
		])
	])

	LINUX=${kernelsrc}
	LINUX_OBJ=${kernelbuild}
	LINUX_VERSION=${kernsrcver}

	AC_SUBST(LINUX)
	AC_SUBST(LINUX_OBJ)
	AC_SUBST(LINUX_VERSION)
])
m4trace:config/kernel.m4:507: -1- AC_DEFUN([ZFS_AC_QAT], [
	AC_ARG_WITH([qat],
		AS_HELP_STRING([--with-qat=PATH],
		[Path to qat source]),
		AS_IF([test "$withval" = "yes"],
			AC_MSG_ERROR([--with-qat=PATH requires a PATH]),
			[qatsrc="$withval"]))

	AC_ARG_WITH([qat-obj],
		AS_HELP_STRING([--with-qat-obj=PATH],
		[Path to qat build objects]),
		[qatbuild="$withval"])

	AS_IF([test ! -z "${qatsrc}"], [
		AC_MSG_CHECKING([qat source directory])
		AC_MSG_RESULT([$qatsrc])
		QAT_SRC="${qatsrc}/quickassist"
		AS_IF([ test ! -e "$QAT_SRC/include/cpa.h"], [
			AC_MSG_ERROR([
	*** Please make sure the qat driver package is installed
	*** and specify the location of the qat source with the
	*** '--with-qat=PATH' option then try again. Failed to
	*** find cpa.h in:
	${QAT_SRC}/include])
		])
	])

	AS_IF([test ! -z "${qatsrc}"], [
		AC_MSG_CHECKING([qat build directory])
		AS_IF([test -z "$qatbuild"], [
			qatbuild="${qatsrc}/build"
		])

		AC_MSG_RESULT([$qatbuild])
		QAT_OBJ=${qatbuild}
		AS_IF([ ! test -e "$QAT_OBJ/icp_qa_al.ko" && ! test -e "$QAT_OBJ/qat_api.ko"], [
			AC_MSG_ERROR([
	*** Please make sure the qat driver is installed then try again.
	*** Failed to find icp_qa_al.ko or qat_api.ko in:
	$QAT_OBJ])
		])

		AC_SUBST(QAT_SRC)
		AC_SUBST(QAT_OBJ)

		AC_DEFINE(HAVE_QAT, 1,
		[qat is enabled and existed])
	])

	dnl #
	dnl # Detect the name used for the QAT Module.symvers file.
	dnl #
	AS_IF([test ! -z "${qatsrc}"], [
		AC_MSG_CHECKING([qat file for module symbols])
		QAT_SYMBOLS=$QAT_SRC/lookaside/access_layer/src/Module.symvers

		AS_IF([test -r $QAT_SYMBOLS], [
			AC_MSG_RESULT([$QAT_SYMBOLS])
			AC_SUBST(QAT_SYMBOLS)
		],[
			AC_MSG_ERROR([
	*** Please make sure the qat driver is installed then try again.
	*** Failed to find Module.symvers in:
	$QAT_SYMBOLS
			])
		])
	])
])
m4trace:config/kernel.m4:579: -1- AC_DEFUN([ZFS_LINUX_CONFTEST_H], [
test -d build/$2 || mkdir -p build/$2
cat - <<_ACEOF >build/$2/$2.h
$1
_ACEOF
])
m4trace:config/kernel.m4:589: -1- AC_DEFUN([ZFS_LINUX_CONFTEST_C], [
test -d build/$2 || mkdir -p build/$2
cat confdefs.h - <<_ACEOF >build/$2/$2.c
$1
_ACEOF
])
m4trace:config/kernel.m4:603: -1- AC_DEFUN([ZFS_LINUX_CONFTEST_MAKEFILE], [
	test -d build || mkdir -p build
	test -d build/$1 || mkdir -p build/$1

	file=build/$1/Makefile

	dnl # Example command line to manually build source.
	cat - <<_ACEOF >$file
# Example command line to manually build source
# make modules -C $LINUX_OBJ $ARCH_UM M=$PWD/build/$1

ccflags-y := -Werror $FRAME_LARGER_THAN
_ACEOF

	dnl # Additional custom CFLAGS as requested.
	m4_ifval($3, [echo "ccflags-y += $3" >>$file], [])

	dnl # Test case source
	echo "obj-m := $1.o" >>$file

	AS_IF([test "x$2" = "xyes"], [echo "obj-m += $1/" >>build/Makefile], [])
])
m4trace:config/kernel.m4:652: -1- AC_DEFUN([ZFS_LINUX_TEST_REMOVE], [
	test -d build/$1 && rm -Rf build/$1
	test -f build/Makefile && sed '/$1/d' build/Makefile
])
m4trace:config/kernel.m4:669: -1- AC_DEFUN([ZFS_LINUX_COMPILE], [
	AC_ARG_VAR([KERNEL_CC], [C compiler for
		building kernel modules])
	AC_ARG_VAR([KERNEL_LD], [Linker for
		building kernel modules])
	AC_ARG_VAR([KERNEL_LLVM], [Binary option to
		build kernel modules with LLVM/CLANG toolchain])
	AC_TRY_COMMAND([
	    KBUILD_MODPOST_NOFINAL="$5" KBUILD_MODPOST_WARN="$6"
	    make modules -k -j$TEST_JOBS ${KERNEL_CC:+CC=$KERNEL_CC}
	    ${KERNEL_LD:+LD=$KERNEL_LD} ${KERNEL_LLVM:+LLVM=$KERNEL_LLVM}
	    CONFIG_MODULES=y CFLAGS_MODULE=-DCONFIG_MODULES
	    -C $LINUX_OBJ $ARCH_UM M=$PWD/$1 >$1/build.log 2>&1])
	AS_IF([AC_TRY_COMMAND([$2])], [$3], [$4])
])
m4trace:config/kernel.m4:690: -1- AC_DEFUN([ZFS_LINUX_TEST_COMPILE], [
	ZFS_LINUX_COMPILE([$2], [test -f $2/build.log], [
		mv $2/Makefile $2/Makefile.compile.$1
		mv $2/build.log $2/build.log.$1
	],[
	        AC_MSG_ERROR([
        *** Unable to compile test source to determine kernel interfaces.])
	], [yes], [])
])
m4trace:config/kernel.m4:706: -1- AC_DEFUN([ZFS_LINUX_TEST_MODPOST], [
	ZFS_LINUX_COMPILE([$2], [test -f $2/build.log], [
		mv $2/Makefile $2/Makefile.modpost.$1
		cat $2/build.log >>build/build.log.$1
	],[
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
])
m4trace:config/kernel.m4:733: -1- AC_DEFUN([ZFS_LINUX_TEST_COMPILE_ALL], [
	dnl # Phase 1 - Compilation only, final linking is skipped.
	ZFS_LINUX_TEST_COMPILE([$1], [build])

	dnl #
	dnl # Phase 2 - When building external modules disable test cases
	dnl # which failed to compile and invoke modpost to verify the
	dnl # final linking.
	dnl #
	dnl # Test names suffixed with '_license' call modpost independently
	dnl # to ensure that a single incompatibility does not result in the
	dnl # modpost phase exiting early.  This check is not performed on
	dnl # every symbol since the majority are compatible and doing so
	dnl # would significantly slow down this phase.
	dnl #
	dnl # When configuring for builtin (--enable-linux-builtin)
	dnl # fake the linking step artificially create the expected .ko
	dnl # files for tests which did compile.  This is required for
	dnl # kernels which do not have loadable module support or have
	dnl # not yet been built.
	dnl #
	AS_IF([test "x$enable_linux_builtin" = "xno"], [
		for dir in $(awk '/^obj-m/ { print [$]3 }' \
		    build/Makefile.compile.$1); do
			name=${dir%/}
			AS_IF([test -f build/$name/$name.o], [
				AS_IF([test "${name##*_}" = "license"], [
					ZFS_LINUX_TEST_MODPOST([$1],
					    [build/$name])
					echo "obj-n += $dir" >>build/Makefile
				], [
					echo "obj-m += $dir" >>build/Makefile
				])
			], [
				echo "obj-n += $dir" >>build/Makefile
			])
		done

		ZFS_LINUX_TEST_MODPOST([$1], [build])
	], [
		for dir in $(awk '/^obj-m/ { print [$]3 }' \
		    build/Makefile.compile.$1); do
			name=${dir%/}
			AS_IF([test -f build/$name/$name.o], [
				touch build/$name/$name.ko
			])
		done
	])
])
m4trace:config/kernel.m4:799: -1- AC_DEFUN([ZFS_LINUX_TEST_SRC], [
	ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[$2]], [[$3]],
	    [["Dual BSD/GPL"]])], [$1])
	ZFS_LINUX_CONFTEST_MAKEFILE([$1], [yes], [$4])

	AS_IF([ test -n "$5" ], [
		ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[$2]], [[$3]], [[$5]])], [$1_license])
		ZFS_LINUX_CONFTEST_MAKEFILE([$1_license], [yes], [$4])
	])
])
m4trace:config/kernel.m4:818: -1- AC_DEFUN([ZFS_LINUX_TEST_RESULT], [
	AS_IF([test -d build/$1], [
		AS_IF([test -f build/$1/$1.ko], [$2], [$3])
	], [
		AC_MSG_ERROR([
	*** No matching source for the "$1" test, check that
	*** both the test source and result macros refer to the same name.
		])
	])
])
m4trace:config/kernel.m4:835: -1- AC_DEFUN([ZFS_LINUX_TEST_ERROR], [
	AC_MSG_ERROR([
	*** None of the expected "$1" interfaces were detected.
	*** This may be because your kernel version is newer than what is
	*** supported, or you are using a patched custom kernel with
	*** incompatible modifications.
	***
	*** ZFS Version: $ZFS_META_ALIAS
	*** Compatible Kernels: $ZFS_META_KVER_MIN - $ZFS_META_KVER_MAX
	])
])
m4trace:config/kernel.m4:854: -1- AC_DEFUN([ZFS_LINUX_TEST_RESULT_SYMBOL], [
	AS_IF([ ! test -f build/$1/$1.ko], [
		$5
	], [
		AS_IF([test "x$enable_linux_builtin" != "xyes"], [
			ZFS_CHECK_SYMBOL_EXPORT([$2], [$3], [$4], [$5])
		], [
			$4
		])
	])
])
m4trace:config/kernel.m4:869: -1- AC_DEFUN([ZFS_LINUX_COMPILE_IFELSE], [
	ZFS_LINUX_TEST_REMOVE([conftest])

	m4_ifvaln([$1], [ZFS_LINUX_CONFTEST_C([$1], [conftest])])
	m4_ifvaln([$5], [ZFS_LINUX_CONFTEST_H([$5], [conftest])],
	    [ZFS_LINUX_CONFTEST_H([], [conftest])])

	ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no],
	    [m4_ifvaln([$5], [-I$PWD/build/conftest], [])])
	ZFS_LINUX_COMPILE([build/conftest], [$2], [$3], [$4], [], [])
])
m4trace:config/kernel.m4:893: -1- AC_DEFUN([ZFS_LINUX_TRY_COMPILE], [
	AS_IF([test "x$enable_linux_builtin" = "xyes"], [
		ZFS_LINUX_COMPILE_IFELSE(
		    [ZFS_LINUX_TEST_PROGRAM([[$1]], [[$2]],
		    [[ZFS_META_LICENSE]])],
		    [test -f build/conftest/conftest.o], [$3], [$4])
	], [
		ZFS_LINUX_COMPILE_IFELSE(
		    [ZFS_LINUX_TEST_PROGRAM([[$1]], [[$2]],
		    [[ZFS_META_LICENSE]])],
		    [test -f build/conftest/conftest.ko], [$3], [$4])
	])
])
m4trace:config/kernel.m4:913: -1- AC_DEFUN([ZFS_CHECK_SYMBOL_EXPORT], [
	grep -q -E '[[[:space:]]]$1[[[:space:]]]' \
		$LINUX_OBJ/$LINUX_SYMBOLS 2>/dev/null
	rc=$?
	if test $rc -ne 0; then
		export=0
		for file in $2; do
			grep -q -E "EXPORT_SYMBOL.*($1)" \
				"$LINUX/$file" 2>/dev/null
			rc=$?
			if test $rc -eq 0; then
				export=1
				break;
			fi
		done
		if test $export -eq 0; then :
			$4
		else :
			$3
		fi
	else :
		$3
	fi
])
m4trace:config/kernel.m4:945: -1- AC_DEFUN([ZFS_LINUX_TRY_COMPILE_SYMBOL], [
	ZFS_LINUX_TRY_COMPILE([$1], [$2], [rc=0], [rc=1])
	if test $rc -ne 0; then :
		$6
	else
		if test "x$enable_linux_builtin" != xyes; then
			ZFS_CHECK_SYMBOL_EXPORT([$3], [$4], [rc=0], [rc=1])
		fi
		if test $rc -ne 0; then :
			$6
		else :
			$5
		fi
	fi
])
m4trace:config/kernel.m4:966: -1- AC_DEFUN([ZFS_LINUX_TRY_COMPILE_HEADER], [
	AS_IF([test "x$enable_linux_builtin" = "xyes"], [
		ZFS_LINUX_COMPILE_IFELSE(
		    [ZFS_LINUX_TEST_PROGRAM([[$1]], [[$2]],
		    [[ZFS_META_LICENSE]])],
		    [test -f build/conftest/conftest.o], [$3], [$4], [$5])
	], [
		ZFS_LINUX_COMPILE_IFELSE(
		    [ZFS_LINUX_TEST_PROGRAM([[$1]], [[$2]],
		    [[ZFS_META_LICENSE]])],
		    [test -f build/conftest/conftest.ko], [$3], [$4], [$5])
	])
])
m4trace:config/kernel.m4:985: -1- AC_DEFUN([AS_VERSION_COMPARE_LE], [
	AS_VERSION_COMPARE([$1], [$2], [$3], [$3], [$4])
])
m4trace:config/kernel.m4:994: -1- AC_DEFUN([ZFS_LINUX_REQUIRE_API], [
	AS_VERSION_COMPARE_LE([$2], [$kernsrcver], [
		AC_MSG_ERROR([
		*** None of the expected "$1" interfaces were detected. This
		*** interface is expected for kernels version "$2" and above.
		*** This may be because your kernel version is newer than what is
		*** supported, or you are using a patched custom kernel with
		*** incompatible modifications.  Newer kernels may have incompatible
		*** APIs.
		***
		*** ZFS Version: $ZFS_META_ALIAS
		*** Compatible Kernels: $ZFS_META_KVER_MIN - $ZFS_META_KVER_MAX
		])
	], [
		AC_MSG_RESULT(no)
	])
])
m4trace:config/lib-ld.m4:12: -1- AC_DEFUN([AC_LIB_PROG_LD_GNU], [AC_CACHE_CHECK([if the linker ($LD) is GNU ld], [acl_cv_prog_gnu_ld],
[# I'd rather use --version here, but apparently some GNU lds only accept -v.
case `$LD -v 2>&1 </dev/null` in
*GNU* | *'with BFD'*)
  acl_cv_prog_gnu_ld=yes
  ;;
*)
  acl_cv_prog_gnu_ld=no
  ;;
esac])
with_gnu_ld=$acl_cv_prog_gnu_ld
])
m4trace:config/lib-ld.m4:27: -1- AC_DEFUN([AC_LIB_PROG_LD], [AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl

AC_ARG_WITH([gnu-ld],
    [AS_HELP_STRING([--with-gnu-ld],
        [assume the C compiler uses GNU ld [default=no]])],
    [test "$withval" = no || with_gnu_ld=yes],
    [with_gnu_ld=no])dnl

# Prepare PATH_SEPARATOR.
# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  # Determine PATH_SEPARATOR by trying to find /bin/sh in a PATH which
  # contains only /bin. Note that ksh looks also at the FPATH variable,
  # so we have to set that as well for the test.
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 \
    && { (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 \
           || PATH_SEPARATOR=';'
       }
fi

if test -n "$LD"; then
  AC_MSG_CHECKING([for ld])
elif test "$GCC" = yes; then
  AC_MSG_CHECKING([for ld used by $CC])
elif test "$with_gnu_ld" = yes; then
  AC_MSG_CHECKING([for GNU ld])
else
  AC_MSG_CHECKING([for non-GNU ld])
fi
if test -n "$LD"; then
  # Let the user override the test with a path.
  :
else
  AC_CACHE_VAL([acl_cv_path_LD],
  [
    acl_cv_path_LD= # Final result of this test
    ac_prog=ld # Program to search in $PATH
    if test "$GCC" = yes; then
      # Check if gcc -print-prog-name=ld gives a path.
      case $host in
        *-*-mingw*)
          # gcc leaves a trailing carriage return which upsets mingw
          acl_output=`($CC -print-prog-name=ld) 2>&5 | tr -d '\015'` ;;
        *)
          acl_output=`($CC -print-prog-name=ld) 2>&5` ;;
      esac
      case $acl_output in
        # Accept absolute paths.
        [[\\/]]* | ?:[[\\/]]*)
          re_direlt='/[[^/]][[^/]]*/\.\./'
          # Canonicalize the pathname of ld
          acl_output=`echo "$acl_output" | sed 's%\\\\%/%g'`
          while echo "$acl_output" | grep "$re_direlt" > /dev/null 2>&1; do
            acl_output=`echo $acl_output | sed "s%$re_direlt%/%"`
          done
          # Got the pathname. No search in PATH is needed.
          acl_cv_path_LD="$acl_output"
          ac_prog=
          ;;
        "")
          # If it fails, then pretend we aren't using GCC.
          ;;
        *)
          # If it is relative, then search for the first ld in PATH.
          with_gnu_ld=unknown
          ;;
      esac
    fi
    if test -n "$ac_prog"; then
      # Search for $ac_prog in $PATH.
      acl_save_ifs="$IFS"; IFS=$PATH_SEPARATOR
      for ac_dir in $PATH; do
        IFS="$acl_save_ifs"
        test -z "$ac_dir" && ac_dir=.
        if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
          acl_cv_path_LD="$ac_dir/$ac_prog"
          # Check to see if the program is GNU ld.  I'd rather use --version,
          # but apparently some variants of GNU ld only accept -v.
          # Break only if it was the GNU/non-GNU ld that we prefer.
          case `"$acl_cv_path_LD" -v 2>&1 </dev/null` in
            *GNU* | *'with BFD'*)
              test "$with_gnu_ld" != no && break
              ;;
            *)
              test "$with_gnu_ld" != yes && break
              ;;
          esac
        fi
      done
      IFS="$acl_save_ifs"
    fi
    case $host in
      *-*-aix*)
        AC_COMPILE_IFELSE(
          [AC_LANG_SOURCE(
             [[#if defined __powerpc64__ || defined _ARCH_PPC64
                int ok;
               #else
                error fail
               #endif
             ]])],
          [# The compiler produces 64-bit code. Add option '-b64' so that the
           # linker groks 64-bit object files.
           case "$acl_cv_path_LD " in
             *" -b64 "*) ;;
             *) acl_cv_path_LD="$acl_cv_path_LD -b64" ;;
           esac
          ], [])
        ;;
      sparc64-*-netbsd*)
        AC_COMPILE_IFELSE(
          [AC_LANG_SOURCE(
             [[#if defined __sparcv9 || defined __arch64__
                int ok;
               #else
                error fail
               #endif
             ]])],
          [],
          [# The compiler produces 32-bit code. Add option '-m elf32_sparc'
           # so that the linker groks 32-bit object files.
           case "$acl_cv_path_LD " in
             *" -m elf32_sparc "*) ;;
             *) acl_cv_path_LD="$acl_cv_path_LD -m elf32_sparc" ;;
           esac
          ])
        ;;
    esac
  ])
  LD="$acl_cv_path_LD"
fi
if test -n "$LD"; then
  AC_MSG_RESULT([$LD])
else
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([no acceptable ld found in \$PATH])
fi
AC_LIB_PROG_LD_GNU
])
m4trace:config/lib-link.m4:17: -1- AC_DEFUN([AC_LIB_LINKFLAGS], [
  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])
  AC_REQUIRE([AC_LIB_RPATH])
  pushdef([Name],[m4_translit([$1],[./+-], [____])])
  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],
                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])
  AC_CACHE_CHECK([how to link with lib[]$1], [ac_cv_lib[]Name[]_libs], [
    AC_LIB_LINKFLAGS_BODY([$1], [$2])
    ac_cv_lib[]Name[]_libs="$LIB[]NAME"
    ac_cv_lib[]Name[]_ltlibs="$LTLIB[]NAME"
    ac_cv_lib[]Name[]_cppflags="$INC[]NAME"
    ac_cv_lib[]Name[]_prefix="$LIB[]NAME[]_PREFIX"
  ])
  LIB[]NAME="$ac_cv_lib[]Name[]_libs"
  LTLIB[]NAME="$ac_cv_lib[]Name[]_ltlibs"
  INC[]NAME="$ac_cv_lib[]Name[]_cppflags"
  LIB[]NAME[]_PREFIX="$ac_cv_lib[]Name[]_prefix"
  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)
  AC_SUBST([LIB]NAME)
  AC_SUBST([LTLIB]NAME)
  AC_SUBST([LIB]NAME[_PREFIX])
  dnl Also set HAVE_LIB[]NAME so that AC_LIB_HAVE_LINKFLAGS can reuse the
  dnl results of this search when this library appears as a dependency.
  HAVE_LIB[]NAME=yes
  popdef([NAME])
  popdef([Name])
])
m4trace:config/lib-link.m4:57: -1- AC_DEFUN([AC_LIB_HAVE_LINKFLAGS], [
  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])
  AC_REQUIRE([AC_LIB_RPATH])
  pushdef([Name],[m4_translit([$1],[./+-], [____])])
  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],
                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])

  dnl Search for lib[]Name and define LIB[]NAME, LTLIB[]NAME and INC[]NAME
  dnl accordingly.
  AC_LIB_LINKFLAGS_BODY([$1], [$2])

  dnl Add $INC[]NAME to CPPFLAGS before performing the following checks,
  dnl so that if lib[]Name is installed, it will be used (unless
  dnl disabled via --without-lib[]Name-prefix).
  ac_save_CPPFLAGS="$CPPFLAGS"
  AC_LIB_APPENDTOVAR([CPPFLAGS], [$INC]NAME)

  AC_CACHE_CHECK([for lib[]$1], [ac_cv_lib[]Name], [
    ac_save_LIBS="$LIBS"
    dnl If $LIB[]NAME contains some -l options, add it to the end of LIBS,
    dnl because these -l options might require -L options that are present in
    dnl LIBS. -l options benefit only from the -L options listed before it.
    dnl Otherwise, add it to the front of LIBS, because it may be a static
    dnl library that depends on another static library that is present in LIBS.
    dnl Static libraries benefit only from the static libraries listed after
    dnl it.
    case " $LIB[]NAME" in
      *" -l"*) LIBS="$LIBS $LIB[]NAME" ;;
      *)       LIBS="$LIB[]NAME $LIBS" ;;
    esac
    AC_LINK_IFELSE(
      [AC_LANG_PROGRAM([[$3]], [[$4]])],
      [ac_cv_lib[]Name=yes],
      [ac_cv_lib[]Name='m4_if([$5], [], [no], [[$5]])'])
    LIBS="$ac_save_LIBS"
  ])
  if test "$ac_cv_lib[]Name" = yes; then
    HAVE_LIB[]NAME=yes
    AC_DEFINE([HAVE_LIB]NAME, 1, [Define if you have the lib][$1 library.])
    AC_MSG_CHECKING([how to link with lib[]$1])
    AC_MSG_RESULT([$LIB[]NAME])
  else
    HAVE_LIB[]NAME=no
    dnl If $LIB[]NAME didn't lead to a usable library, we don't need
    dnl $INC[]NAME either.
    CPPFLAGS="$ac_save_CPPFLAGS"
    LIB[]NAME=
    LTLIB[]NAME=
    LIB[]NAME[]_PREFIX=
  fi
  AC_SUBST([HAVE_LIB]NAME)
  AC_SUBST([LIB]NAME)
  AC_SUBST([LTLIB]NAME)
  AC_SUBST([LIB]NAME[_PREFIX])
  popdef([NAME])
  popdef([Name])
])
m4trace:config/lib-link.m4:125: -1- AC_DEFUN([AC_LIB_RPATH], [
  dnl Complain if config.rpath is missing.
  AC_REQUIRE_AUX_FILE([config.rpath])
  AC_REQUIRE([AC_PROG_CC])                dnl we use $CC, $GCC, $LDFLAGS
  AC_REQUIRE([AC_LIB_PROG_LD])            dnl we use $LD, $with_gnu_ld
  AC_REQUIRE([AC_CANONICAL_HOST])         dnl we use $host
  AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT]) dnl we use $ac_aux_dir
  AC_CACHE_CHECK([for shared library run path origin], [acl_cv_rpath], [
    CC="$CC" GCC="$GCC" LDFLAGS="$LDFLAGS" LD="$LD" with_gnu_ld="$with_gnu_ld" \
    ${CONFIG_SHELL-/bin/sh} "$ac_aux_dir/config.rpath" "$host" > conftest.sh
    . ./conftest.sh
    rm -f ./conftest.sh
    acl_cv_rpath=done
  ])
  wl="$acl_cv_wl"
  acl_libext="$acl_cv_libext"
  acl_shlibext="$acl_cv_shlibext"
  acl_libname_spec="$acl_cv_libname_spec"
  acl_library_names_spec="$acl_cv_library_names_spec"
  acl_hardcode_libdir_flag_spec="$acl_cv_hardcode_libdir_flag_spec"
  acl_hardcode_libdir_separator="$acl_cv_hardcode_libdir_separator"
  acl_hardcode_direct="$acl_cv_hardcode_direct"
  acl_hardcode_minus_L="$acl_cv_hardcode_minus_L"
  dnl Determine whether the user wants rpath handling at all.
  AC_ARG_ENABLE([rpath],
    [  --disable-rpath         do not hardcode runtime library paths],
    :, enable_rpath=yes)
])
m4trace:config/lib-link.m4:161: -1- AC_DEFUN([AC_LIB_FROMPACKAGE], [
  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],
                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])
  define([acl_frompackage_]NAME, [$2])
  popdef([NAME])
  pushdef([PACK],[$2])
  pushdef([PACKUP],[m4_translit(PACK,[abcdefghijklmnopqrstuvwxyz./+-],
                                     [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])
  define([acl_libsinpackage_]PACKUP,
    m4_ifdef([acl_libsinpackage_]PACKUP, [m4_defn([acl_libsinpackage_]PACKUP)[, ]],)[lib$1])
  popdef([PACKUP])
  popdef([PACK])
])
m4trace:config/lib-link.m4:181: -1- AC_DEFUN([AC_LIB_LINKFLAGS_BODY], [
  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])
  pushdef([NAME],[m4_translit([$1],[abcdefghijklmnopqrstuvwxyz./+-],
                                   [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])
  pushdef([PACK],[m4_ifdef([acl_frompackage_]NAME, [acl_frompackage_]NAME, lib[$1])])
  pushdef([PACKUP],[m4_translit(PACK,[abcdefghijklmnopqrstuvwxyz./+-],
                                     [ABCDEFGHIJKLMNOPQRSTUVWXYZ____])])
  pushdef([PACKLIBS],[m4_ifdef([acl_frompackage_]NAME, [acl_libsinpackage_]PACKUP, lib[$1])])
  dnl By default, look in $includedir and $libdir.
  use_additional=yes
  AC_LIB_WITH_FINAL_PREFIX([
    eval additional_includedir=\"$includedir\"
    eval additional_libdir=\"$libdir\"
  ])
  AC_ARG_WITH(PACK[-prefix],
[[  --with-]]PACK[[-prefix[=DIR]  search for ]PACKLIBS[ in DIR/include and DIR/lib
  --without-]]PACK[[-prefix     don't search for ]PACKLIBS[ in includedir and libdir]],
[
    if test "X$withval" = "Xno"; then
      use_additional=no
    else
      if test "X$withval" = "X"; then
        AC_LIB_WITH_FINAL_PREFIX([
          eval additional_includedir=\"$includedir\"
          eval additional_libdir=\"$libdir\"
        ])
      else
        additional_includedir="$withval/include"
        additional_libdir="$withval/$acl_libdirstem"
        if test "$acl_libdirstem2" != "$acl_libdirstem" \
           && test ! -d "$withval/$acl_libdirstem"; then
          additional_libdir="$withval/$acl_libdirstem2"
        fi
      fi
    fi
])
  dnl Search the library and its dependencies in $additional_libdir and
  dnl $LDFLAGS. Using breadth-first-search.
  LIB[]NAME=
  LTLIB[]NAME=
  INC[]NAME=
  LIB[]NAME[]_PREFIX=
  dnl HAVE_LIB${NAME} is an indicator that LIB${NAME}, LTLIB${NAME} have been
  dnl computed. So it has to be reset here.
  HAVE_LIB[]NAME=
  rpathdirs=
  ltrpathdirs=
  names_already_handled=
  names_next_round='$1 $2'
  while test -n "$names_next_round"; do
    names_this_round="$names_next_round"
    names_next_round=
    for name in $names_this_round; do
      already_handled=
      for n in $names_already_handled; do
        if test "$n" = "$name"; then
          already_handled=yes
          break
        fi
      done
      if test -z "$already_handled"; then
        names_already_handled="$names_already_handled $name"
        dnl See if it was already located by an earlier AC_LIB_LINKFLAGS
        dnl or AC_LIB_HAVE_LINKFLAGS call.
        uppername=`echo "$name" | sed -e 'y|abcdefghijklmnopqrstuvwxyz./+-|ABCDEFGHIJKLMNOPQRSTUVWXYZ____|'`
        eval value=\"\$HAVE_LIB$uppername\"
        if test -n "$value"; then
          if test "$value" = yes; then
            eval value=\"\$LIB$uppername\"
            test -z "$value" || LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$value"
            eval value=\"\$LTLIB$uppername\"
            test -z "$value" || LTLIB[]NAME="${LTLIB[]NAME}${LTLIB[]NAME:+ }$value"
          else
            dnl An earlier call to AC_LIB_HAVE_LINKFLAGS has determined
            dnl that this library doesn't exist. So just drop it.
            :
          fi
        else
          dnl Search the library lib$name in $additional_libdir and $LDFLAGS
          dnl and the already constructed $LIBNAME/$LTLIBNAME.
          found_dir=
          found_la=
          found_so=
          found_a=
          eval libname=\"$acl_libname_spec\"    # typically: libname=lib$name
          if test -n "$acl_shlibext"; then
            shrext=".$acl_shlibext"             # typically: shrext=.so
          else
            shrext=
          fi
          if test $use_additional = yes; then
            dir="$additional_libdir"
            dnl The same code as in the loop below:
            dnl First look for a shared library.
            if test -n "$acl_shlibext"; then
              if test -f "$dir/$libname$shrext"; then
                found_dir="$dir"
                found_so="$dir/$libname$shrext"
              else
                if test "$acl_library_names_spec" = '$libname$shrext$versuffix'; then
                  ver=`(cd "$dir" && \
                        for f in "$libname$shrext".*; do echo "$f"; done \
                        | sed -e "s,^$libname$shrext\\\\.,," \
                        | sort -t '.' -n -r -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 \
                        | sed 1q ) 2>/dev/null`
                  if test -n "$ver" && test -f "$dir/$libname$shrext.$ver"; then
                    found_dir="$dir"
                    found_so="$dir/$libname$shrext.$ver"
                  fi
                else
                  eval library_names=\"$acl_library_names_spec\"
                  for f in $library_names; do
                    if test -f "$dir/$f"; then
                      found_dir="$dir"
                      found_so="$dir/$f"
                      break
                    fi
                  done
                fi
              fi
            fi
            dnl Then look for a static library.
            if test "X$found_dir" = "X"; then
              if test -f "$dir/$libname.$acl_libext"; then
                found_dir="$dir"
                found_a="$dir/$libname.$acl_libext"
              fi
            fi
            if test "X$found_dir" != "X"; then
              if test -f "$dir/$libname.la"; then
                found_la="$dir/$libname.la"
              fi
            fi
          fi
          if test "X$found_dir" = "X"; then
            for x in $LDFLAGS $LTLIB[]NAME; do
              AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
              case "$x" in
                -L*)
                  dir=`echo "X$x" | sed -e 's/^X-L//'`
                  dnl First look for a shared library.
                  if test -n "$acl_shlibext"; then
                    if test -f "$dir/$libname$shrext"; then
                      found_dir="$dir"
                      found_so="$dir/$libname$shrext"
                    else
                      if test "$acl_library_names_spec" = '$libname$shrext$versuffix'; then
                        ver=`(cd "$dir" && \
                              for f in "$libname$shrext".*; do echo "$f"; done \
                              | sed -e "s,^$libname$shrext\\\\.,," \
                              | sort -t '.' -n -r -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 \
                              | sed 1q ) 2>/dev/null`
                        if test -n "$ver" && test -f "$dir/$libname$shrext.$ver"; then
                          found_dir="$dir"
                          found_so="$dir/$libname$shrext.$ver"
                        fi
                      else
                        eval library_names=\"$acl_library_names_spec\"
                        for f in $library_names; do
                          if test -f "$dir/$f"; then
                            found_dir="$dir"
                            found_so="$dir/$f"
                            break
                          fi
                        done
                      fi
                    fi
                  fi
                  dnl Then look for a static library.
                  if test "X$found_dir" = "X"; then
                    if test -f "$dir/$libname.$acl_libext"; then
                      found_dir="$dir"
                      found_a="$dir/$libname.$acl_libext"
                    fi
                  fi
                  if test "X$found_dir" != "X"; then
                    if test -f "$dir/$libname.la"; then
                      found_la="$dir/$libname.la"
                    fi
                  fi
                  ;;
              esac
              if test "X$found_dir" != "X"; then
                break
              fi
            done
          fi
          if test "X$found_dir" != "X"; then
            dnl Found the library.
            LTLIB[]NAME="${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$found_dir -l$name"
            if test "X$found_so" != "X"; then
              dnl Linking with a shared library. We attempt to hardcode its
              dnl directory into the executable's runpath, unless it's the
              dnl standard /usr/lib.
              if test "$enable_rpath" = no \
                 || test "X$found_dir" = "X/usr/$acl_libdirstem" \
                 || test "X$found_dir" = "X/usr/$acl_libdirstem2"; then
                dnl No hardcoding is needed.
                LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$found_so"
              else
                dnl Use an explicit option to hardcode DIR into the resulting
                dnl binary.
                dnl Potentially add DIR to ltrpathdirs.
                dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.
                haveit=
                for x in $ltrpathdirs; do
                  if test "X$x" = "X$found_dir"; then
                    haveit=yes
                    break
                  fi
                done
                if test -z "$haveit"; then
                  ltrpathdirs="$ltrpathdirs $found_dir"
                fi
                dnl The hardcoding into $LIBNAME is system dependent.
                if test "$acl_hardcode_direct" = yes; then
                  dnl Using DIR/libNAME.so during linking hardcodes DIR into the
                  dnl resulting binary.
                  LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$found_so"
                else
                  if test -n "$acl_hardcode_libdir_flag_spec" && test "$acl_hardcode_minus_L" = no; then
                    dnl Use an explicit option to hardcode DIR into the resulting
                    dnl binary.
                    LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$found_so"
                    dnl Potentially add DIR to rpathdirs.
                    dnl The rpathdirs will be appended to $LIBNAME at the end.
                    haveit=
                    for x in $rpathdirs; do
                      if test "X$x" = "X$found_dir"; then
                        haveit=yes
                        break
                      fi
                    done
                    if test -z "$haveit"; then
                      rpathdirs="$rpathdirs $found_dir"
                    fi
                  else
                    dnl Rely on "-L$found_dir".
                    dnl But don't add it if it's already contained in the LDFLAGS
                    dnl or the already constructed $LIBNAME
                    haveit=
                    for x in $LDFLAGS $LIB[]NAME; do
                      AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
                      if test "X$x" = "X-L$found_dir"; then
                        haveit=yes
                        break
                      fi
                    done
                    if test -z "$haveit"; then
                      LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir"
                    fi
                    if test "$acl_hardcode_minus_L" != no; then
                      dnl FIXME: Not sure whether we should use
                      dnl "-L$found_dir -l$name" or "-L$found_dir $found_so"
                      dnl here.
                      LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$found_so"
                    else
                      dnl We cannot use $acl_hardcode_runpath_var and LD_RUN_PATH
                      dnl here, because this doesn't fit in flags passed to the
                      dnl compiler. So give up. No hardcoding. This affects only
                      dnl very old systems.
                      dnl FIXME: Not sure whether we should use
                      dnl "-L$found_dir -l$name" or "-L$found_dir $found_so"
                      dnl here.
                      LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }-l$name"
                    fi
                  fi
                fi
              fi
            else
              if test "X$found_a" != "X"; then
                dnl Linking with a static library.
                LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$found_a"
              else
                dnl We shouldn't come here, but anyway it's good to have a
                dnl fallback.
                LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }-L$found_dir -l$name"
              fi
            fi
            dnl Assume the include files are nearby.
            additional_includedir=
            case "$found_dir" in
              */$acl_libdirstem | */$acl_libdirstem/)
                basedir=`echo "X$found_dir" | sed -e 's,^X,,' -e "s,/$acl_libdirstem/"'*$,,'`
                if test "$name" = '$1'; then
                  LIB[]NAME[]_PREFIX="$basedir"
                fi
                additional_includedir="$basedir/include"
                ;;
              */$acl_libdirstem2 | */$acl_libdirstem2/)
                basedir=`echo "X$found_dir" | sed -e 's,^X,,' -e "s,/$acl_libdirstem2/"'*$,,'`
                if test "$name" = '$1'; then
                  LIB[]NAME[]_PREFIX="$basedir"
                fi
                additional_includedir="$basedir/include"
                ;;
            esac
            if test "X$additional_includedir" != "X"; then
              dnl Potentially add $additional_includedir to $INCNAME.
              dnl But don't add it
              dnl   1. if it's the standard /usr/include,
              dnl   2. if it's /usr/local/include and we are using GCC on Linux,
              dnl   3. if it's already present in $CPPFLAGS or the already
              dnl      constructed $INCNAME,
              dnl   4. if it doesn't exist as a directory.
              if test "X$additional_includedir" != "X/usr/include"; then
                haveit=
                if test "X$additional_includedir" = "X/usr/local/include"; then
                  if test -n "$GCC"; then
                    case $host_os in
                      linux* | gnu* | k*bsd*-gnu) haveit=yes;;
                    esac
                  fi
                fi
                if test -z "$haveit"; then
                  for x in $CPPFLAGS $INC[]NAME; do
                    AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
                    if test "X$x" = "X-I$additional_includedir"; then
                      haveit=yes
                      break
                    fi
                  done
                  if test -z "$haveit"; then
                    if test -d "$additional_includedir"; then
                      dnl Really add $additional_includedir to $INCNAME.
                      INC[]NAME="${INC[]NAME}${INC[]NAME:+ }-I$additional_includedir"
                    fi
                  fi
                fi
              fi
            fi
            dnl Look for dependencies.
            if test -n "$found_la"; then
              dnl Read the .la file. It defines the variables
              dnl dlname, library_names, old_library, dependency_libs, current,
              dnl age, revision, installed, dlopen, dlpreopen, libdir.
              save_libdir="$libdir"
              case "$found_la" in
                */* | *\\*) . "$found_la" ;;
                *) . "./$found_la" ;;
              esac
              libdir="$save_libdir"
              dnl We use only dependency_libs.
              for dep in $dependency_libs; do
                case "$dep" in
                  -L*)
                    additional_libdir=`echo "X$dep" | sed -e 's/^X-L//'`
                    dnl Potentially add $additional_libdir to $LIBNAME and $LTLIBNAME.
                    dnl But don't add it
                    dnl   1. if it's the standard /usr/lib,
                    dnl   2. if it's /usr/local/lib and we are using GCC on Linux,
                    dnl   3. if it's already present in $LDFLAGS or the already
                    dnl      constructed $LIBNAME,
                    dnl   4. if it doesn't exist as a directory.
                    if test "X$additional_libdir" != "X/usr/$acl_libdirstem" \
                       && test "X$additional_libdir" != "X/usr/$acl_libdirstem2"; then
                      haveit=
                      if test "X$additional_libdir" = "X/usr/local/$acl_libdirstem" \
                         || test "X$additional_libdir" = "X/usr/local/$acl_libdirstem2"; then
                        if test -n "$GCC"; then
                          case $host_os in
                            linux* | gnu* | k*bsd*-gnu) haveit=yes;;
                          esac
                        fi
                      fi
                      if test -z "$haveit"; then
                        haveit=
                        for x in $LDFLAGS $LIB[]NAME; do
                          AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
                          if test "X$x" = "X-L$additional_libdir"; then
                            haveit=yes
                            break
                          fi
                        done
                        if test -z "$haveit"; then
                          if test -d "$additional_libdir"; then
                            dnl Really add $additional_libdir to $LIBNAME.
                            LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }-L$additional_libdir"
                          fi
                        fi
                        haveit=
                        for x in $LDFLAGS $LTLIB[]NAME; do
                          AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
                          if test "X$x" = "X-L$additional_libdir"; then
                            haveit=yes
                            break
                          fi
                        done
                        if test -z "$haveit"; then
                          if test -d "$additional_libdir"; then
                            dnl Really add $additional_libdir to $LTLIBNAME.
                            LTLIB[]NAME="${LTLIB[]NAME}${LTLIB[]NAME:+ }-L$additional_libdir"
                          fi
                        fi
                      fi
                    fi
                    ;;
                  -R*)
                    dir=`echo "X$dep" | sed -e 's/^X-R//'`
                    if test "$enable_rpath" != no; then
                      dnl Potentially add DIR to rpathdirs.
                      dnl The rpathdirs will be appended to $LIBNAME at the end.
                      haveit=
                      for x in $rpathdirs; do
                        if test "X$x" = "X$dir"; then
                          haveit=yes
                          break
                        fi
                      done
                      if test -z "$haveit"; then
                        rpathdirs="$rpathdirs $dir"
                      fi
                      dnl Potentially add DIR to ltrpathdirs.
                      dnl The ltrpathdirs will be appended to $LTLIBNAME at the end.
                      haveit=
                      for x in $ltrpathdirs; do
                        if test "X$x" = "X$dir"; then
                          haveit=yes
                          break
                        fi
                      done
                      if test -z "$haveit"; then
                        ltrpathdirs="$ltrpathdirs $dir"
                      fi
                    fi
                    ;;
                  -l*)
                    dnl Handle this in the next round.
                    names_next_round="$names_next_round "`echo "X$dep" | sed -e 's/^X-l//'`
                    ;;
                  *.la)
                    dnl Handle this in the next round. Throw away the .la's
                    dnl directory; it is already contained in a preceding -L
                    dnl option.
                    names_next_round="$names_next_round "`echo "X$dep" | sed -e 's,^X.*/,,' -e 's,^lib,,' -e 's,\.la$,,'`
                    ;;
                  *)
                    dnl Most likely an immediate library name.
                    LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$dep"
                    LTLIB[]NAME="${LTLIB[]NAME}${LTLIB[]NAME:+ }$dep"
                    ;;
                esac
              done
            fi
          else
            dnl Didn't find the library; assume it is in the system directories
            dnl known to the linker and runtime loader. (All the system
            dnl directories known to the linker should also be known to the
            dnl runtime loader, otherwise the system is severely misconfigured.)
            LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }-l$name"
            LTLIB[]NAME="${LTLIB[]NAME}${LTLIB[]NAME:+ }-l$name"
          fi
        fi
      fi
    done
  done
  if test "X$rpathdirs" != "X"; then
    if test -n "$acl_hardcode_libdir_separator"; then
      dnl Weird platform: only the last -rpath option counts, the user must
      dnl pass all path elements in one option. We can arrange that for a
      dnl single library, but not when more than one $LIBNAMEs are used.
      alldirs=
      for found_dir in $rpathdirs; do
        alldirs="${alldirs}${alldirs:+$acl_hardcode_libdir_separator}$found_dir"
      done
      dnl Note: acl_hardcode_libdir_flag_spec uses $libdir and $wl.
      acl_save_libdir="$libdir"
      libdir="$alldirs"
      eval flag=\"$acl_hardcode_libdir_flag_spec\"
      libdir="$acl_save_libdir"
      LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$flag"
    else
      dnl The -rpath options are cumulative.
      for found_dir in $rpathdirs; do
        acl_save_libdir="$libdir"
        libdir="$found_dir"
        eval flag=\"$acl_hardcode_libdir_flag_spec\"
        libdir="$acl_save_libdir"
        LIB[]NAME="${LIB[]NAME}${LIB[]NAME:+ }$flag"
      done
    fi
  fi
  if test "X$ltrpathdirs" != "X"; then
    dnl When using libtool, the option that works for both libraries and
    dnl executables is -R. The -R options are cumulative.
    for found_dir in $ltrpathdirs; do
      LTLIB[]NAME="${LTLIB[]NAME}${LTLIB[]NAME:+ }-R$found_dir"
    done
  fi
  popdef([PACKLIBS])
  popdef([PACKUP])
  popdef([PACK])
  popdef([NAME])
])
m4trace:config/lib-link.m4:681: -1- AC_DEFUN([AC_LIB_APPENDTOVAR], [
  for element in [$2]; do
    haveit=
    for x in $[$1]; do
      AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
      if test "X$x" = "X$element"; then
        haveit=yes
        break
      fi
    done
    if test -z "$haveit"; then
      [$1]="${[$1]}${[$1]:+ }$element"
    fi
  done
])
m4trace:config/lib-link.m4:705: -1- AC_DEFUN([AC_LIB_LINKFLAGS_FROM_LIBS], [
  AC_REQUIRE([AC_LIB_RPATH])
  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])
  $1=
  if test "$enable_rpath" != no; then
    if test -n "$acl_hardcode_libdir_flag_spec" && test "$acl_hardcode_minus_L" = no; then
      dnl Use an explicit option to hardcode directories into the resulting
      dnl binary.
      rpathdirs=
      next=
      for opt in $2; do
        if test -n "$next"; then
          dir="$next"
          dnl No need to hardcode the standard /usr/lib.
          if test "X$dir" != "X/usr/$acl_libdirstem" \
             && test "X$dir" != "X/usr/$acl_libdirstem2"; then
            rpathdirs="$rpathdirs $dir"
          fi
          next=
        else
          case $opt in
            -L) next=yes ;;
            -L*) dir=`echo "X$opt" | sed -e 's,^X-L,,'`
                 dnl No need to hardcode the standard /usr/lib.
                 if test "X$dir" != "X/usr/$acl_libdirstem" \
                    && test "X$dir" != "X/usr/$acl_libdirstem2"; then
                   rpathdirs="$rpathdirs $dir"
                 fi
                 next= ;;
            *) next= ;;
          esac
        fi
      done
      if test "X$rpathdirs" != "X"; then
        if test -n ""$3""; then
          dnl libtool is used for linking. Use -R options.
          for dir in $rpathdirs; do
            $1="${$1}${$1:+ }-R$dir"
          done
        else
          dnl The linker is used for linking directly.
          if test -n "$acl_hardcode_libdir_separator"; then
            dnl Weird platform: only the last -rpath option counts, the user
            dnl must pass all path elements in one option.
            alldirs=
            for dir in $rpathdirs; do
              alldirs="${alldirs}${alldirs:+$acl_hardcode_libdir_separator}$dir"
            done
            acl_save_libdir="$libdir"
            libdir="$alldirs"
            eval flag=\"$acl_hardcode_libdir_flag_spec\"
            libdir="$acl_save_libdir"
            $1="$flag"
          else
            dnl The -rpath options are cumulative.
            for dir in $rpathdirs; do
              acl_save_libdir="$libdir"
              libdir="$dir"
              eval flag=\"$acl_hardcode_libdir_flag_spec\"
              libdir="$acl_save_libdir"
              $1="${$1}${$1:+ }$flag"
            done
          fi
        fi
      fi
    fi
  fi
  AC_SUBST([$1])
])
m4trace:config/lib-prefix.m4:14: -1- AC_DEFUN([AC_LIB_PREFIX], [
  AC_BEFORE([$0], [AC_LIB_LINKFLAGS])
  AC_REQUIRE([AC_PROG_CC])
  AC_REQUIRE([AC_CANONICAL_HOST])
  AC_REQUIRE([AC_LIB_PREPARE_MULTILIB])
  AC_REQUIRE([AC_LIB_PREPARE_PREFIX])
  dnl By default, look in $includedir and $libdir.
  use_additional=yes
  AC_LIB_WITH_FINAL_PREFIX([
    eval additional_includedir=\"$includedir\"
    eval additional_libdir=\"$libdir\"
  ])
  AC_ARG_WITH([lib-prefix],
[[  --with-lib-prefix[=DIR] search for libraries in DIR/include and DIR/lib
  --without-lib-prefix    don't search for libraries in includedir and libdir]],
[
    if test "X$withval" = "Xno"; then
      use_additional=no
    else
      if test "X$withval" = "X"; then
        AC_LIB_WITH_FINAL_PREFIX([
          eval additional_includedir=\"$includedir\"
          eval additional_libdir=\"$libdir\"
        ])
      else
        additional_includedir="$withval/include"
        additional_libdir="$withval/$acl_libdirstem"
      fi
    fi
])
  if test $use_additional = yes; then
    dnl Potentially add $additional_includedir to $CPPFLAGS.
    dnl But don't add it
    dnl   1. if it's the standard /usr/include,
    dnl   2. if it's already present in $CPPFLAGS,
    dnl   3. if it's /usr/local/include and we are using GCC on Linux,
    dnl   4. if it doesn't exist as a directory.
    if test "X$additional_includedir" != "X/usr/include"; then
      haveit=
      for x in $CPPFLAGS; do
        AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
        if test "X$x" = "X-I$additional_includedir"; then
          haveit=yes
          break
        fi
      done
      if test -z "$haveit"; then
        if test "X$additional_includedir" = "X/usr/local/include"; then
          if test -n "$GCC"; then
            case $host_os in
              linux* | gnu* | k*bsd*-gnu) haveit=yes;;
            esac
          fi
        fi
        if test -z "$haveit"; then
          if test -d "$additional_includedir"; then
            dnl Really add $additional_includedir to $CPPFLAGS.
            CPPFLAGS="${CPPFLAGS}${CPPFLAGS:+ }-I$additional_includedir"
          fi
        fi
      fi
    fi
    dnl Potentially add $additional_libdir to $LDFLAGS.
    dnl But don't add it
    dnl   1. if it's the standard /usr/lib,
    dnl   2. if it's already present in $LDFLAGS,
    dnl   3. if it's /usr/local/lib and we are using GCC on Linux,
    dnl   4. if it doesn't exist as a directory.
    if test "X$additional_libdir" != "X/usr/$acl_libdirstem"; then
      haveit=
      for x in $LDFLAGS; do
        AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
        if test "X$x" = "X-L$additional_libdir"; then
          haveit=yes
          break
        fi
      done
      if test -z "$haveit"; then
        if test "X$additional_libdir" = "X/usr/local/$acl_libdirstem"; then
          if test -n "$GCC"; then
            case $host_os in
              linux*) haveit=yes;;
            esac
          fi
        fi
        if test -z "$haveit"; then
          if test -d "$additional_libdir"; then
            dnl Really add $additional_libdir to $LDFLAGS.
            LDFLAGS="${LDFLAGS}${LDFLAGS:+ }-L$additional_libdir"
          fi
        fi
      fi
    fi
  fi
])
m4trace:config/lib-prefix.m4:114: -1- AC_DEFUN([AC_LIB_PREPARE_PREFIX], [
  dnl Unfortunately, prefix and exec_prefix get only finally determined
  dnl at the end of configure.
  if test "X$prefix" = "XNONE"; then
    acl_final_prefix="$ac_default_prefix"
  else
    acl_final_prefix="$prefix"
  fi
  if test "X$exec_prefix" = "XNONE"; then
    acl_final_exec_prefix='${prefix}'
  else
    acl_final_exec_prefix="$exec_prefix"
  fi
  acl_save_prefix="$prefix"
  prefix="$acl_final_prefix"
  eval acl_final_exec_prefix=\"$acl_final_exec_prefix\"
  prefix="$acl_save_prefix"
])
m4trace:config/lib-prefix.m4:137: -1- AC_DEFUN([AC_LIB_WITH_FINAL_PREFIX], [
  acl_save_prefix="$prefix"
  prefix="$acl_final_prefix"
  acl_save_exec_prefix="$exec_prefix"
  exec_prefix="$acl_final_exec_prefix"
  $1
  exec_prefix="$acl_save_exec_prefix"
  prefix="$acl_save_prefix"
])
m4trace:config/lib-prefix.m4:154: -1- AC_DEFUN([AC_LIB_PREPARE_MULTILIB], [
  dnl There is no formal standard regarding lib and lib64.
  dnl On glibc systems, the current practice is that on a system supporting
  dnl 32-bit and 64-bit instruction sets or ABIs, 64-bit libraries go under
  dnl $prefix/lib64 and 32-bit libraries go under $prefix/lib. We determine
  dnl the compiler's default mode by looking at the compiler's library search
  dnl path. If at least one of its elements ends in /lib64 or points to a
  dnl directory whose absolute pathname ends in /lib64, we assume a 64-bit ABI.
  dnl Otherwise we use the default, namely "lib".
  dnl On Solaris systems, the current practice is that on a system supporting
  dnl 32-bit and 64-bit instruction sets or ABIs, 64-bit libraries go under
  dnl $prefix/lib/64 (which is a symlink to either $prefix/lib/sparcv9 or
  dnl $prefix/lib/amd64) and 32-bit libraries go under $prefix/lib.
  AC_REQUIRE([AC_CANONICAL_HOST])
  AC_REQUIRE([gl_HOST_CPU_C_ABI_32BIT])

  case "$host_os" in
    solaris*)
      AC_CACHE_CHECK([for 64-bit host], [gl_cv_solaris_64bit],
        [AC_COMPILE_IFELSE(
           [AC_LANG_SOURCE(
              [[#ifdef _LP64
                 int ok;
                #else
                 error fail
                #endif
              ]])],
           [gl_cv_solaris_64bit=yes],
           [gl_cv_solaris_64bit=no])
        ]);;
  esac

  dnl Allow the user to override the result by setting acl_cv_libdirstems.
  AC_CACHE_CHECK([for the common suffixes of directories in the library search path],
    [acl_cv_libdirstems],
    [acl_libdirstem=lib
     acl_libdirstem2=
     case "$host_os" in
       solaris*)
         dnl See Solaris 10 Software Developer Collection > Solaris 64-bit Developer's Guide > The Development Environment
         dnl <https://docs.oracle.com/cd/E19253-01/816-5138/dev-env/index.html>.
         dnl "Portable Makefiles should refer to any library directories using the 64 symbolic link."
         dnl But we want to recognize the sparcv9 or amd64 subdirectory also if the
         dnl symlink is missing, so we set acl_libdirstem2 too.
         if test $gl_cv_solaris_64bit = yes; then
           acl_libdirstem=lib/64
           case "$host_cpu" in
             sparc*)        acl_libdirstem2=lib/sparcv9 ;;
             i*86 | x86_64) acl_libdirstem2=lib/amd64 ;;
           esac
         fi
         ;;
       *)
         dnl If $CC generates code for a 32-bit ABI, the libraries are
         dnl surely under $prefix/lib, not $prefix/lib64.
         if test "$HOST_CPU_C_ABI_32BIT" != yes; then
           dnl The result is a property of the system. However, non-system
           dnl compilers sometimes have odd library search paths. Therefore
           dnl prefer asking /usr/bin/gcc, if available, rather than $CC.
           searchpath=`(if test -f /usr/bin/gcc \
                           && LC_ALL=C /usr/bin/gcc -print-search-dirs >/dev/null 2>/dev/null; then \
                          LC_ALL=C /usr/bin/gcc -print-search-dirs; \
                        else \
                          LC_ALL=C $CC -print-search-dirs; \
                        fi) 2>/dev/null \
                       | sed -n -e 's,^libraries: ,,p' | sed -e 's,^=,,'`
           if test -n "$searchpath"; then
             acl_save_IFS="${IFS= 	}"; IFS=":"
             for searchdir in $searchpath; do
               if test -d "$searchdir"; then
                 case "$searchdir" in
                   */lib64/ | */lib64 ) acl_libdirstem=lib64 ;;
                   */../ | */.. )
                     # Better ignore directories of this form. They are misleading.
                     ;;
                   *) searchdir=`cd "$searchdir" && pwd`
                      case "$searchdir" in
                        */lib64 ) acl_libdirstem=lib64 ;;
                      esac ;;
                 esac
               fi
             done
             IFS="$acl_save_IFS"
           fi
         fi
         ;;
     esac
     test -n "$acl_libdirstem2" || acl_libdirstem2="$acl_libdirstem"
     acl_cv_libdirstems="$acl_libdirstem,$acl_libdirstem2"
    ])
  # Decompose acl_cv_libdirstems into acl_libdirstem and acl_libdirstem2.
  acl_libdirstem=`echo "$acl_cv_libdirstems" | sed -e 's/,.*//'`
  acl_libdirstem2=`echo "$acl_cv_libdirstems" | sed -e '/,/s/.*,//'`
])
m4trace:config/libtool.m4:61: -1- AC_DEFUN([LT_INIT], [AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK
AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl
AC_BEFORE([$0], [LT_LANG])dnl
AC_BEFORE([$0], [LT_OUTPUT])dnl
AC_BEFORE([$0], [LTDL_INIT])dnl
m4_require([_LT_CHECK_BUILDDIR])dnl

dnl Autoconf doesn't catch unexpanded LT_ macros by default:
m4_pattern_forbid([^_?LT_[A-Z_]+$])dnl
m4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl
dnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4
dnl unless we require an AC_DEFUNed macro:
AC_REQUIRE([LTOPTIONS_VERSION])dnl
AC_REQUIRE([LTSUGAR_VERSION])dnl
AC_REQUIRE([LTVERSION_VERSION])dnl
AC_REQUIRE([LTOBSOLETE_VERSION])dnl
m4_require([_LT_PROG_LTMAIN])dnl

_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])

dnl Parse OPTIONS
_LT_SET_OPTIONS([$0], [$1])

# This can be used to rebuild libtool when needed
LIBTOOL_DEPS=$ltmain

# Always use our own libtool.
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
AC_SUBST(LIBTOOL)dnl

_LT_SETUP

# Only expand once:
m4_define([LT_INIT])
])
m4trace:config/libtool.m4:99: -1- AU_DEFUN([AC_PROG_LIBTOOL], [m4_if($#, 0, [LT_INIT], [LT_INIT($@)])], [], [])
m4trace:config/libtool.m4:99: -1- AC_DEFUN([AC_PROG_LIBTOOL], [m4_warn([obsolete], [The macro `AC_PROG_LIBTOOL' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:config/libtool.m4:100: -1- AU_DEFUN([AM_PROG_LIBTOOL], [m4_if($#, 0, [LT_INIT], [LT_INIT($@)])], [], [])
m4trace:config/libtool.m4:100: -1- AC_DEFUN([AM_PROG_LIBTOOL], [m4_warn([obsolete], [The macro `AM_PROG_LIBTOOL' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:config/libtool.m4:619: -1- AC_DEFUN([LT_OUTPUT], [: ${CONFIG_LT=./config.lt}
AC_MSG_NOTICE([creating $CONFIG_LT])
_LT_GENERATED_FILE_INIT(["$CONFIG_LT"],
[# Run this file to recreate a libtool stub with the current configuration.])

cat >>"$CONFIG_LT" <<\_LTEOF
lt_cl_silent=false
exec AS_MESSAGE_LOG_FD>>config.log
{
  echo
  AS_BOX([Running $as_me.])
} >&AS_MESSAGE_LOG_FD

lt_cl_help="\
'$as_me' creates a local libtool stub from the current configuration,
for use in further configure time tests before the real libtool is
generated.

Usage: $[0] [[OPTIONS]]

  -h, --help      print this help, then exit
  -V, --version   print version number, then exit
  -q, --quiet     do not print progress messages
  -d, --debug     don't remove temporary files

Report bugs to <bug-libtool@gnu.org>."

lt_cl_version="\
m4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl
m4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])
configured by $[0], generated by m4_PACKAGE_STRING.

Copyright (C) 2011 Free Software Foundation, Inc.
This config.lt script is free software; the Free Software Foundation
gives unlimited permision to copy, distribute and modify it."

while test 0 != $[#]
do
  case $[1] in
    --version | --v* | -V )
      echo "$lt_cl_version"; exit 0 ;;
    --help | --h* | -h )
      echo "$lt_cl_help"; exit 0 ;;
    --debug | --d* | -d )
      debug=: ;;
    --quiet | --q* | --silent | --s* | -q )
      lt_cl_silent=: ;;

    -*) AC_MSG_ERROR([unrecognized option: $[1]
Try '$[0] --help' for more information.]) ;;

    *) AC_MSG_ERROR([unrecognized argument: $[1]
Try '$[0] --help' for more information.]) ;;
  esac
  shift
done

if $lt_cl_silent; then
  exec AS_MESSAGE_FD>/dev/null
fi
_LTEOF

cat >>"$CONFIG_LT" <<_LTEOF
_LT_OUTPUT_LIBTOOL_COMMANDS_INIT
_LTEOF

cat >>"$CONFIG_LT" <<\_LTEOF
AC_MSG_NOTICE([creating $ofile])
_LT_OUTPUT_LIBTOOL_COMMANDS
AS_EXIT(0)
_LTEOF
chmod +x "$CONFIG_LT"

# configure is writing to config.log, but config.lt does its own redirection,
# appending to config.log, which fails on DOS, as config.log is still kept
# open by configure.  Here we exec the FD to /dev/null, effectively closing
# config.log, so it can be properly (re)opened and appended to by config.lt.
lt_cl_success=:
test yes = "$silent" &&
  lt_config_lt_args="$lt_config_lt_args --quiet"
exec AS_MESSAGE_LOG_FD>/dev/null
$SHELL "$CONFIG_LT" $lt_config_lt_args || lt_cl_success=false
exec AS_MESSAGE_LOG_FD>>config.log
$lt_cl_success || AS_EXIT(1)
])
m4trace:config/libtool.m4:811: -1- AC_DEFUN([LT_SUPPORTED_TAG], [])
m4trace:config/libtool.m4:822: -1- AC_DEFUN([LT_LANG], [AC_BEFORE([$0], [LT_OUTPUT])dnl
m4_case([$1],
  [C],			[_LT_LANG(C)],
  [C++],		[_LT_LANG(CXX)],
  [Go],			[_LT_LANG(GO)],
  [Java],		[_LT_LANG(GCJ)],
  [Fortran 77],		[_LT_LANG(F77)],
  [Fortran],		[_LT_LANG(FC)],
  [Windows Resource],	[_LT_LANG(RC)],
  [m4_ifdef([_LT_LANG_]$1[_CONFIG],
    [_LT_LANG($1)],
    [m4_fatal([$0: unsupported language: "$1"])])])dnl
])
m4trace:config/libtool.m4:914: -1- AU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])
m4trace:config/libtool.m4:914: -1- AC_DEFUN([AC_LIBTOOL_CXX], [m4_warn([obsolete], [The macro `AC_LIBTOOL_CXX' is obsolete.
You should run autoupdate.])dnl
LT_LANG(C++)])
m4trace:config/libtool.m4:915: -1- AU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])
m4trace:config/libtool.m4:915: -1- AC_DEFUN([AC_LIBTOOL_F77], [m4_warn([obsolete], [The macro `AC_LIBTOOL_F77' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Fortran 77)])
m4trace:config/libtool.m4:916: -1- AU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])
m4trace:config/libtool.m4:916: -1- AC_DEFUN([AC_LIBTOOL_FC], [m4_warn([obsolete], [The macro `AC_LIBTOOL_FC' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Fortran)])
m4trace:config/libtool.m4:917: -1- AU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])
m4trace:config/libtool.m4:917: -1- AC_DEFUN([AC_LIBTOOL_GCJ], [m4_warn([obsolete], [The macro `AC_LIBTOOL_GCJ' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Java)])
m4trace:config/libtool.m4:918: -1- AU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])
m4trace:config/libtool.m4:918: -1- AC_DEFUN([AC_LIBTOOL_RC], [m4_warn([obsolete], [The macro `AC_LIBTOOL_RC' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Windows Resource)])
m4trace:config/libtool.m4:1246: -1- AC_DEFUN([_LT_WITH_SYSROOT], [AC_MSG_CHECKING([for sysroot])
AC_ARG_WITH([sysroot],
[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],
  [Search for dependent libraries within DIR (or the compiler's sysroot
   if not specified).])],
[], [with_sysroot=no])

dnl lt_sysroot will always be passed unquoted.  We quote it here
dnl in case the user passed a directory name.
lt_sysroot=
case $with_sysroot in #(
 yes)
   if test yes = "$GCC"; then
     lt_sysroot=`$CC --print-sysroot 2>/dev/null`
   fi
   ;; #(
 /*)
   lt_sysroot=`echo "$with_sysroot" | sed -e "$sed_quote_subst"`
   ;; #(
 no|'')
   ;; #(
 *)
   AC_MSG_RESULT([$with_sysroot])
   AC_MSG_ERROR([The sysroot must be an absolute path.])
   ;;
esac

 AC_MSG_RESULT([${lt_sysroot:-no}])
_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl
[dependent libraries, and where our libraries should be installed.])])
m4trace:config/libtool.m4:1577: -1- AC_DEFUN([_LT_COMPILER_OPTION], [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
m4_require([_LT_DECL_SED])dnl
AC_CACHE_CHECK([$1], [$2],
  [$2=no
   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])
   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
   lt_compiler_flag="$3"  ## exclude from sc_useless_quotes_in_assignment
   # Insert the option either (1) after the last *FLAGS variable, or
   # (2) before a word containing "conftest.", or (3) at the end.
   # Note that $ac_compile itself does not contain backslashes and begins
   # with a dollar sign (not a hyphen), so the echo should work correctly.
   # The option is referenced via a variable to avoid confusing sed.
   lt_compile=`echo "$ac_compile" | $SED \
   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
   -e 's: [[^ ]]*conftest\.: $lt_compiler_flag&:; t' \
   -e 's:$: $lt_compiler_flag:'`
   (eval echo "\"\$as_me:$LINENO: $lt_compile\"" >&AS_MESSAGE_LOG_FD)
   (eval "$lt_compile" 2>conftest.err)
   ac_status=$?
   cat conftest.err >&AS_MESSAGE_LOG_FD
   echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
   if (exit $ac_status) && test -s "$ac_outfile"; then
     # The compiler can only warn and ignore the option if not recognized
     # So say no if there are warnings other than the usual output.
     $ECHO "$_lt_compiler_boilerplate" | $SED '/^$/d' >conftest.exp
     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then
       $2=yes
     fi
   fi
   $RM conftest*
])

if test yes = "[$]$2"; then
    m4_if([$5], , :, [$5])
else
    m4_if([$6], , :, [$6])
fi
])
m4trace:config/libtool.m4:1619: -1- AU_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [m4_if($#, 0, [_LT_COMPILER_OPTION], [_LT_COMPILER_OPTION($@)])], [], [])
m4trace:config/libtool.m4:1619: -1- AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [m4_warn([obsolete], [The macro `AC_LIBTOOL_COMPILER_OPTION' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_COMPILER_OPTION], [_LT_COMPILER_OPTION($@)])])
m4trace:config/libtool.m4:1628: -1- AC_DEFUN([_LT_LINKER_OPTION], [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
m4_require([_LT_DECL_SED])dnl
AC_CACHE_CHECK([$1], [$2],
  [$2=no
   save_LDFLAGS=$LDFLAGS
   LDFLAGS="$LDFLAGS $3"
   echo "$lt_simple_link_test_code" > conftest.$ac_ext
   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then
     # The linker can only warn and ignore the option if not recognized
     # So say no if there are warnings
     if test -s conftest.err; then
       # Append any errors to the config.log.
       cat conftest.err 1>&AS_MESSAGE_LOG_FD
       $ECHO "$_lt_linker_boilerplate" | $SED '/^$/d' > conftest.exp
       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
       if diff conftest.exp conftest.er2 >/dev/null; then
         $2=yes
       fi
     else
       $2=yes
     fi
   fi
   $RM -r conftest*
   LDFLAGS=$save_LDFLAGS
])

if test yes = "[$]$2"; then
    m4_if([$4], , :, [$4])
else
    m4_if([$5], , :, [$5])
fi
])
m4trace:config/libtool.m4:1663: -1- AU_DEFUN([AC_LIBTOOL_LINKER_OPTION], [m4_if($#, 0, [_LT_LINKER_OPTION], [_LT_LINKER_OPTION($@)])], [], [])
m4trace:config/libtool.m4:1663: -1- AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [m4_warn([obsolete], [The macro `AC_LIBTOOL_LINKER_OPTION' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_LINKER_OPTION], [_LT_LINKER_OPTION($@)])])
m4trace:config/libtool.m4:1670: -1- AC_DEFUN([LT_CMD_MAX_LEN], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
# find the maximum length of command line arguments
AC_MSG_CHECKING([the maximum length of command line arguments])
AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
  i=0
  teststring=ABCD

  case $build_os in
  msdosdjgpp*)
    # On DJGPP, this test can blow up pretty badly due to problems in libc
    # (any single argument exceeding 2000 bytes causes a buffer overrun
    # during glob expansion).  Even if it were fixed, the result of this
    # check would be larger than it should be.
    lt_cv_sys_max_cmd_len=12288;    # 12K is about right
    ;;

  gnu*)
    # Under GNU Hurd, this test is not required because there is
    # no limit to the length of command line arguments.
    # Libtool will interpret -1 as no limit whatsoever
    lt_cv_sys_max_cmd_len=-1;
    ;;

  cygwin* | mingw* | cegcc*)
    # On Win9x/ME, this test blows up -- it succeeds, but takes
    # about 5 minutes as the teststring grows exponentially.
    # Worse, since 9x/ME are not pre-emptively multitasking,
    # you end up with a "frozen" computer, even though with patience
    # the test eventually succeeds (with a max line length of 256k).
    # Instead, let's just punt: use the minimum linelength reported by
    # all of the supported platforms: 8192 (on NT/2K/XP).
    lt_cv_sys_max_cmd_len=8192;
    ;;

  mint*)
    # On MiNT this can take a long time and run out of memory.
    lt_cv_sys_max_cmd_len=8192;
    ;;

  amigaos*)
    # On AmigaOS with pdksh, this test takes hours, literally.
    # So we just punt and use a minimum line length of 8192.
    lt_cv_sys_max_cmd_len=8192;
    ;;

  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)
    # This has been around since 386BSD, at least.  Likely further.
    if test -x /sbin/sysctl; then
      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`
    elif test -x /usr/sbin/sysctl; then
      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`
    else
      lt_cv_sys_max_cmd_len=65536	# usable default for all BSDs
    fi
    # And add a safety zone
    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
    ;;

  interix*)
    # We know the value 262144 and hardcode it with a safety zone (like BSD)
    lt_cv_sys_max_cmd_len=196608
    ;;

  os2*)
    # The test takes a long time on OS/2.
    lt_cv_sys_max_cmd_len=8192
    ;;

  osf*)
    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure
    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not
    # nice to cause kernel panics so lets avoid the loop below.
    # First set a reasonable default.
    lt_cv_sys_max_cmd_len=16384
    #
    if test -x /sbin/sysconfig; then
      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in
        *1*) lt_cv_sys_max_cmd_len=-1 ;;
      esac
    fi
    ;;
  sco3.2v5*)
    lt_cv_sys_max_cmd_len=102400
    ;;
  sysv5* | sco5v6* | sysv4.2uw2*)
    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`
    if test -n "$kargmax"; then
      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[	 ]]//'`
    else
      lt_cv_sys_max_cmd_len=32768
    fi
    ;;
  *)
    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`
    if test -n "$lt_cv_sys_max_cmd_len" && \
       test undefined != "$lt_cv_sys_max_cmd_len"; then
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
    else
      # Make teststring a little bigger before we do anything with it.
      # a 1K string should be a reasonable start.
      for i in 1 2 3 4 5 6 7 8; do
        teststring=$teststring$teststring
      done
      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}
      # If test is not a shell built-in, we'll probably end up computing a
      # maximum length that is only half of the actual maximum length, but
      # we can't tell.
      while { test X`env echo "$teststring$teststring" 2>/dev/null` \
	         = "X$teststring$teststring"; } >/dev/null 2>&1 &&
	      test 17 != "$i" # 1/2 MB should be enough
      do
        i=`expr $i + 1`
        teststring=$teststring$teststring
      done
      # Only check the string length outside the loop.
      lt_cv_sys_max_cmd_len=`expr "X$teststring" : ".*" 2>&1`
      teststring=
      # Add a significant safety factor because C++ compilers can tack on
      # massive amounts of additional arguments before passing them to the
      # linker.  It appears as though 1/2 is a usable value.
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 2`
    fi
    ;;
  esac
])
if test -n "$lt_cv_sys_max_cmd_len"; then
  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)
else
  AC_MSG_RESULT(none)
fi
max_cmd_len=$lt_cv_sys_max_cmd_len
_LT_DECL([], [max_cmd_len], [0],
    [What is the maximum length of a command?])
])
m4trace:config/libtool.m4:1809: -1- AU_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [m4_if($#, 0, [LT_CMD_MAX_LEN], [LT_CMD_MAX_LEN($@)])], [], [])
m4trace:config/libtool.m4:1809: -1- AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [m4_warn([obsolete], [The macro `AC_LIBTOOL_SYS_MAX_CMD_LEN' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_CMD_MAX_LEN], [LT_CMD_MAX_LEN($@)])])
m4trace:config/libtool.m4:1920: -1- AC_DEFUN([LT_SYS_DLOPEN_SELF], [m4_require([_LT_HEADER_DLFCN])dnl
if test yes != "$enable_dlopen"; then
  enable_dlopen=unknown
  enable_dlopen_self=unknown
  enable_dlopen_self_static=unknown
else
  lt_cv_dlopen=no
  lt_cv_dlopen_libs=

  case $host_os in
  beos*)
    lt_cv_dlopen=load_add_on
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=yes
    ;;

  mingw* | pw32* | cegcc*)
    lt_cv_dlopen=LoadLibrary
    lt_cv_dlopen_libs=
    ;;

  cygwin*)
    lt_cv_dlopen=dlopen
    lt_cv_dlopen_libs=
    ;;

  darwin*)
    # if libdl is installed we need to link against it
    AC_CHECK_LIB([dl], [dlopen],
		[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[
    lt_cv_dlopen=dyld
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=yes
    ])
    ;;

  tpf*)
    # Don't try to run any link tests for TPF.  We know it's impossible
    # because TPF is a cross-compiler, and we know how we open DSOs.
    lt_cv_dlopen=dlopen
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=no
    ;;

  *)
    AC_CHECK_FUNC([shl_load],
	  [lt_cv_dlopen=shl_load],
      [AC_CHECK_LIB([dld], [shl_load],
	    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],
	[AC_CHECK_FUNC([dlopen],
	      [lt_cv_dlopen=dlopen],
	  [AC_CHECK_LIB([dl], [dlopen],
		[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],
	    [AC_CHECK_LIB([svld], [dlopen],
		  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],
	      [AC_CHECK_LIB([dld], [dld_link],
		    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])
	      ])
	    ])
	  ])
	])
      ])
    ;;
  esac

  if test no = "$lt_cv_dlopen"; then
    enable_dlopen=no
  else
    enable_dlopen=yes
  fi

  case $lt_cv_dlopen in
  dlopen)
    save_CPPFLAGS=$CPPFLAGS
    test yes = "$ac_cv_header_dlfcn_h" && CPPFLAGS="$CPPFLAGS -DHAVE_DLFCN_H"

    save_LDFLAGS=$LDFLAGS
    wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $export_dynamic_flag_spec\"

    save_LIBS=$LIBS
    LIBS="$lt_cv_dlopen_libs $LIBS"

    AC_CACHE_CHECK([whether a program can dlopen itself],
	  lt_cv_dlopen_self, [dnl
	  _LT_TRY_DLOPEN_SELF(
	    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,
	    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)
    ])

    if test yes = "$lt_cv_dlopen_self"; then
      wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],
	  lt_cv_dlopen_self_static, [dnl
	  _LT_TRY_DLOPEN_SELF(
	    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,
	    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)
      ])
    fi

    CPPFLAGS=$save_CPPFLAGS
    LDFLAGS=$save_LDFLAGS
    LIBS=$save_LIBS
    ;;
  esac

  case $lt_cv_dlopen_self in
  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;
  *) enable_dlopen_self=unknown ;;
  esac

  case $lt_cv_dlopen_self_static in
  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;
  *) enable_dlopen_self_static=unknown ;;
  esac
fi
_LT_DECL([dlopen_support], [enable_dlopen], [0],
	 [Whether dlopen is supported])
_LT_DECL([dlopen_self], [enable_dlopen_self], [0],
	 [Whether dlopen of programs is supported])
_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],
	 [Whether dlopen of statically linked programs is supported])
])
m4trace:config/libtool.m4:2045: -1- AU_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [m4_if($#, 0, [LT_SYS_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF($@)])], [], [])
m4trace:config/libtool.m4:2045: -1- AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [m4_warn([obsolete], [The macro `AC_LIBTOOL_DLOPEN_SELF' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF($@)])])
m4trace:config/libtool.m4:3166: -1- AC_DEFUN([_LT_PATH_TOOL_PREFIX], [m4_require([_LT_DECL_EGREP])dnl
AC_MSG_CHECKING([for $1])
AC_CACHE_VAL(lt_cv_path_MAGIC_CMD,
[case $MAGIC_CMD in
[[\\/*] |  ?:[\\/]*])
  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.
  ;;
*)
  lt_save_MAGIC_CMD=$MAGIC_CMD
  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
dnl $ac_dummy forces splitting on constant user-supplied paths.
dnl POSIX.2 word splitting is done only on the output of word expansions,
dnl not every word.  This closes a longstanding sh security hole.
  ac_dummy="m4_if([$2], , $PATH, [$2])"
  for ac_dir in $ac_dummy; do
    IFS=$lt_save_ifs
    test -z "$ac_dir" && ac_dir=.
    if test -f "$ac_dir/$1"; then
      lt_cv_path_MAGIC_CMD=$ac_dir/"$1"
      if test -n "$file_magic_test_file"; then
	case $deplibs_check_method in
	"file_magic "*)
	  file_magic_regex=`expr "$deplibs_check_method" : "file_magic \(.*\)"`
	  MAGIC_CMD=$lt_cv_path_MAGIC_CMD
	  if eval $file_magic_cmd \$file_magic_test_file 2> /dev/null |
	    $EGREP "$file_magic_regex" > /dev/null; then
	    :
	  else
	    cat <<_LT_EOF 1>&2

*** Warning: the command libtool uses to detect shared libraries,
*** $file_magic_cmd, produces output that libtool cannot recognize.
*** The result is that libtool may fail to recognize shared libraries
*** as such.  This will affect the creation of libtool libraries that
*** depend on shared libraries, but programs linked with such libtool
*** libraries will work regardless of this problem.  Nevertheless, you
*** may want to report the problem to your system manager and/or to
*** bug-libtool@gnu.org

_LT_EOF
	  fi ;;
	esac
      fi
      break
    fi
  done
  IFS=$lt_save_ifs
  MAGIC_CMD=$lt_save_MAGIC_CMD
  ;;
esac])
MAGIC_CMD=$lt_cv_path_MAGIC_CMD
if test -n "$MAGIC_CMD"; then
  AC_MSG_RESULT($MAGIC_CMD)
else
  AC_MSG_RESULT(no)
fi
_LT_DECL([], [MAGIC_CMD], [0],
	 [Used to examine libraries when file_magic_cmd begins with "file"])dnl
])
m4trace:config/libtool.m4:3228: -1- AU_DEFUN([AC_PATH_TOOL_PREFIX], [m4_if($#, 0, [_LT_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX($@)])], [], [])
m4trace:config/libtool.m4:3228: -1- AC_DEFUN([AC_PATH_TOOL_PREFIX], [m4_warn([obsolete], [The macro `AC_PATH_TOOL_PREFIX' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX($@)])])
m4trace:config/libtool.m4:3251: -1- AC_DEFUN([LT_PATH_LD], [AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl
AC_REQUIRE([AC_CANONICAL_BUILD])dnl
m4_require([_LT_DECL_SED])dnl
m4_require([_LT_DECL_EGREP])dnl
m4_require([_LT_PROG_ECHO_BACKSLASH])dnl

AC_ARG_WITH([gnu-ld],
    [AS_HELP_STRING([--with-gnu-ld],
	[assume the C compiler uses GNU ld @<:@default=no@:>@])],
    [test no = "$withval" || with_gnu_ld=yes],
    [with_gnu_ld=no])dnl

ac_prog=ld
if test yes = "$GCC"; then
  # Check if gcc -print-prog-name=ld gives a path.
  AC_MSG_CHECKING([for ld used by $CC])
  case $host in
  *-*-mingw*)
    # gcc leaves a trailing carriage return, which upsets mingw
    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\015'` ;;
  *)
    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;
  esac
  case $ac_prog in
    # Accept absolute paths.
    [[\\/]]* | ?:[[\\/]]*)
      re_direlt='/[[^/]][[^/]]*/\.\./'
      # Canonicalize the pathname of ld
      ac_prog=`$ECHO "$ac_prog"| $SED 's%\\\\%/%g'`
      while $ECHO "$ac_prog" | $GREP "$re_direlt" > /dev/null 2>&1; do
	ac_prog=`$ECHO $ac_prog| $SED "s%$re_direlt%/%"`
      done
      test -z "$LD" && LD=$ac_prog
      ;;
  "")
    # If it fails, then pretend we aren't using GCC.
    ac_prog=ld
    ;;
  *)
    # If it is relative, then search for the first ld in PATH.
    with_gnu_ld=unknown
    ;;
  esac
elif test yes = "$with_gnu_ld"; then
  AC_MSG_CHECKING([for GNU ld])
else
  AC_MSG_CHECKING([for non-GNU ld])
fi
AC_CACHE_VAL(lt_cv_path_LD,
[if test -z "$LD"; then
  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
  for ac_dir in $PATH; do
    IFS=$lt_save_ifs
    test -z "$ac_dir" && ac_dir=.
    if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
      lt_cv_path_LD=$ac_dir/$ac_prog
      # Check to see if the program is GNU ld.  I'd rather use --version,
      # but apparently some variants of GNU ld only accept -v.
      # Break only if it was the GNU/non-GNU ld that we prefer.
      case `"$lt_cv_path_LD" -v 2>&1 </dev/null` in
      *GNU* | *'with BFD'*)
	test no != "$with_gnu_ld" && break
	;;
      *)
	test yes != "$with_gnu_ld" && break
	;;
      esac
    fi
  done
  IFS=$lt_save_ifs
else
  lt_cv_path_LD=$LD # Let the user override the test with a path.
fi])
LD=$lt_cv_path_LD
if test -n "$LD"; then
  AC_MSG_RESULT($LD)
else
  AC_MSG_RESULT(no)
fi
test -z "$LD" && AC_MSG_ERROR([no acceptable ld found in \$PATH])
_LT_PATH_LD_GNU
AC_SUBST([LD])

_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])
])
m4trace:config/libtool.m4:3340: -1- AU_DEFUN([AM_PROG_LD], [m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])], [], [])
m4trace:config/libtool.m4:3340: -1- AC_DEFUN([AM_PROG_LD], [m4_warn([obsolete], [The macro `AM_PROG_LD' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:config/libtool.m4:3341: -1- AU_DEFUN([AC_PROG_LD], [m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])], [], [])
m4trace:config/libtool.m4:3341: -1- AC_DEFUN([AC_PROG_LD], [m4_warn([obsolete], [The macro `AC_PROG_LD' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:config/libtool.m4:3670: -1- AC_DEFUN([LT_PATH_NM], [AC_REQUIRE([AC_PROG_CC])dnl
AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,
[if test -n "$NM"; then
  # Let the user override the test.
  lt_cv_path_NM=$NM
else
  lt_nm_to_check=${ac_tool_prefix}nm
  if test -n "$ac_tool_prefix" && test "$build" = "$host"; then
    lt_nm_to_check="$lt_nm_to_check nm"
  fi
  for lt_tmp_nm in $lt_nm_to_check; do
    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do
      IFS=$lt_save_ifs
      test -z "$ac_dir" && ac_dir=.
      tmp_nm=$ac_dir/$lt_tmp_nm
      if test -f "$tmp_nm" || test -f "$tmp_nm$ac_exeext"; then
	# Check to see if the nm accepts a BSD-compat flag.
	# Adding the 'sed 1q' prevents false positives on HP-UX, which says:
	#   nm: unknown option "B" ignored
	# Tru64's nm complains that /dev/null is an invalid object file
	# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty
	case $build_os in
	mingw*) lt_bad_file=conftest.nm/nofile ;;
	*) lt_bad_file=/dev/null ;;
	esac
	case `"$tmp_nm" -B $lt_bad_file 2>&1 | sed '1q'` in
	*$lt_bad_file* | *'Invalid file or object type'*)
	  lt_cv_path_NM="$tmp_nm -B"
	  break 2
	  ;;
	*)
	  case `"$tmp_nm" -p /dev/null 2>&1 | sed '1q'` in
	  */dev/null*)
	    lt_cv_path_NM="$tmp_nm -p"
	    break 2
	    ;;
	  *)
	    lt_cv_path_NM=${lt_cv_path_NM="$tmp_nm"} # keep the first match, but
	    continue # so that we can try to find one that supports BSD flags
	    ;;
	  esac
	  ;;
	esac
      fi
    done
    IFS=$lt_save_ifs
  done
  : ${lt_cv_path_NM=no}
fi])
if test no != "$lt_cv_path_NM"; then
  NM=$lt_cv_path_NM
else
  # Didn't find any BSD compatible name lister, look for dumpbin.
  if test -n "$DUMPBIN"; then :
    # Let the user override the test.
  else
    AC_CHECK_TOOLS(DUMPBIN, [dumpbin "link -dump"], :)
    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in
    *COFF*)
      DUMPBIN="$DUMPBIN -symbols -headers"
      ;;
    *)
      DUMPBIN=:
      ;;
    esac
  fi
  AC_SUBST([DUMPBIN])
  if test : != "$DUMPBIN"; then
    NM=$DUMPBIN
  fi
fi
test -z "$NM" && NM=nm
AC_SUBST([NM])
_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl

AC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],
  [lt_cv_nm_interface="BSD nm"
  echo "int some_variable = 0;" > conftest.$ac_ext
  (eval echo "\"\$as_me:$LINENO: $ac_compile\"" >&AS_MESSAGE_LOG_FD)
  (eval "$ac_compile" 2>conftest.err)
  cat conftest.err >&AS_MESSAGE_LOG_FD
  (eval echo "\"\$as_me:$LINENO: $NM \\\"conftest.$ac_objext\\\"\"" >&AS_MESSAGE_LOG_FD)
  (eval "$NM \"conftest.$ac_objext\"" 2>conftest.err > conftest.out)
  cat conftest.err >&AS_MESSAGE_LOG_FD
  (eval echo "\"\$as_me:$LINENO: output\"" >&AS_MESSAGE_LOG_FD)
  cat conftest.out >&AS_MESSAGE_LOG_FD
  if $GREP 'External.*some_variable' conftest.out > /dev/null; then
    lt_cv_nm_interface="MS dumpbin"
  fi
  rm -f conftest*])
])
m4trace:config/libtool.m4:3765: -1- AU_DEFUN([AM_PROG_NM], [m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])], [], [])
m4trace:config/libtool.m4:3765: -1- AC_DEFUN([AM_PROG_NM], [m4_warn([obsolete], [The macro `AM_PROG_NM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:config/libtool.m4:3766: -1- AU_DEFUN([AC_PROG_NM], [m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])], [], [])
m4trace:config/libtool.m4:3766: -1- AC_DEFUN([AC_PROG_NM], [m4_warn([obsolete], [The macro `AC_PROG_NM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:config/libtool.m4:3837: -1- AC_DEFUN([_LT_DLL_DEF_P], [dnl
  test DEF = "`$SED -n dnl
    -e '\''s/^[[	 ]]*//'\'' dnl Strip leading whitespace
    -e '\''/^\(;.*\)*$/d'\'' dnl      Delete empty lines and comments
    -e '\''s/^\(EXPORTS\|LIBRARY\)\([[	 ]].*\)*$/DEF/p'\'' dnl
    -e q dnl                          Only consider the first "real" line
    $1`" dnl
])
m4trace:config/libtool.m4:3851: -1- AC_DEFUN([LT_LIB_M], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
LIBM=
case $host in
*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)
  # These system don't have libm, or don't need it
  ;;
*-ncr-sysv4.3*)
  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)
  AC_CHECK_LIB(m, cos, LIBM="$LIBM -lm")
  ;;
*)
  AC_CHECK_LIB(m, cos, LIBM=-lm)
  ;;
esac
AC_SUBST([LIBM])
])
m4trace:config/libtool.m4:3870: -1- AU_DEFUN([AC_CHECK_LIBM], [m4_if($#, 0, [LT_LIB_M], [LT_LIB_M($@)])], [], [])
m4trace:config/libtool.m4:3870: -1- AC_DEFUN([AC_CHECK_LIBM], [m4_warn([obsolete], [The macro `AC_CHECK_LIBM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_LIB_M], [LT_LIB_M($@)])])
m4trace:config/libtool.m4:8147: -1- AC_DEFUN([LT_PROG_GCJ], [m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],
  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],
    [AC_CHECK_TOOL(GCJ, gcj,)
      test set = "${GCJFLAGS+set}" || GCJFLAGS="-g -O2"
      AC_SUBST(GCJFLAGS)])])[]dnl
])
m4trace:config/libtool.m4:8156: -1- AU_DEFUN([LT_AC_PROG_GCJ], [m4_if($#, 0, [LT_PROG_GCJ], [LT_PROG_GCJ($@)])], [], [])
m4trace:config/libtool.m4:8156: -1- AC_DEFUN([LT_AC_PROG_GCJ], [m4_warn([obsolete], [The macro `LT_AC_PROG_GCJ' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PROG_GCJ], [LT_PROG_GCJ($@)])])
m4trace:config/libtool.m4:8163: -1- AC_DEFUN([LT_PROG_GO], [AC_CHECK_TOOL(GOC, gccgo,)
])
m4trace:config/libtool.m4:8170: -1- AC_DEFUN([LT_PROG_RC], [AC_CHECK_TOOL(RC, windres,)
])
m4trace:config/libtool.m4:8175: -1- AU_DEFUN([LT_AC_PROG_RC], [m4_if($#, 0, [LT_PROG_RC], [LT_PROG_RC($@)])], [], [])
m4trace:config/libtool.m4:8175: -1- AC_DEFUN([LT_AC_PROG_RC], [m4_warn([obsolete], [The macro `LT_AC_PROG_RC' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PROG_RC], [LT_PROG_RC($@)])])
m4trace:config/libtool.m4:8295: -1- AU_DEFUN([LT_AC_PROG_SED], [m4_if($#, 0, [AC_PROG_SED], [AC_PROG_SED($@)])], [], [])
m4trace:config/libtool.m4:8295: -1- AC_DEFUN([LT_AC_PROG_SED], [m4_warn([obsolete], [The macro `LT_AC_PROG_SED' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [AC_PROG_SED], [AC_PROG_SED($@)])])
m4trace:config/ltoptions.m4:14: -1- AC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])
m4trace:config/ltoptions.m4:113: -1- AU_DEFUN([AC_LIBTOOL_DLOPEN], [_LT_SET_OPTION([LT_INIT], [dlopen])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'dlopen' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:113: -1- AC_DEFUN([AC_LIBTOOL_DLOPEN], [m4_warn([obsolete], [The macro `AC_LIBTOOL_DLOPEN' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [dlopen])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'dlopen' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:148: -1- AU_DEFUN([AC_LIBTOOL_WIN32_DLL], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
_LT_SET_OPTION([LT_INIT], [win32-dll])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'win32-dll' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:148: -1- AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [m4_warn([obsolete], [The macro `AC_LIBTOOL_WIN32_DLL' is obsolete.
You should run autoupdate.])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl
_LT_SET_OPTION([LT_INIT], [win32-dll])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'win32-dll' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:197: -1- AC_DEFUN([AC_ENABLE_SHARED], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])
])
m4trace:config/ltoptions.m4:201: -1- AC_DEFUN([AC_DISABLE_SHARED], [_LT_SET_OPTION([LT_INIT], [disable-shared])
])
m4trace:config/ltoptions.m4:205: -1- AU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])
m4trace:config/ltoptions.m4:205: -1- AC_DEFUN([AM_ENABLE_SHARED], [m4_warn([obsolete], [The macro `AM_ENABLE_SHARED' is obsolete.
You should run autoupdate.])dnl
AC_ENABLE_SHARED($@)])
m4trace:config/ltoptions.m4:206: -1- AU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])
m4trace:config/ltoptions.m4:206: -1- AC_DEFUN([AM_DISABLE_SHARED], [m4_warn([obsolete], [The macro `AM_DISABLE_SHARED' is obsolete.
You should run autoupdate.])dnl
AC_DISABLE_SHARED($@)])
m4trace:config/ltoptions.m4:251: -1- AC_DEFUN([AC_ENABLE_STATIC], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])
])
m4trace:config/ltoptions.m4:255: -1- AC_DEFUN([AC_DISABLE_STATIC], [_LT_SET_OPTION([LT_INIT], [disable-static])
])
m4trace:config/ltoptions.m4:259: -1- AU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])
m4trace:config/ltoptions.m4:259: -1- AC_DEFUN([AM_ENABLE_STATIC], [m4_warn([obsolete], [The macro `AM_ENABLE_STATIC' is obsolete.
You should run autoupdate.])dnl
AC_ENABLE_STATIC($@)])
m4trace:config/ltoptions.m4:260: -1- AU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])
m4trace:config/ltoptions.m4:260: -1- AC_DEFUN([AM_DISABLE_STATIC], [m4_warn([obsolete], [The macro `AM_DISABLE_STATIC' is obsolete.
You should run autoupdate.])dnl
AC_DISABLE_STATIC($@)])
m4trace:config/ltoptions.m4:305: -1- AU_DEFUN([AC_ENABLE_FAST_INSTALL], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'fast-install' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:305: -1- AC_DEFUN([AC_ENABLE_FAST_INSTALL], [m4_warn([obsolete], [The macro `AC_ENABLE_FAST_INSTALL' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'fast-install' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:312: -1- AU_DEFUN([AC_DISABLE_FAST_INSTALL], [_LT_SET_OPTION([LT_INIT], [disable-fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'disable-fast-install' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:312: -1- AC_DEFUN([AC_DISABLE_FAST_INSTALL], [m4_warn([obsolete], [The macro `AC_DISABLE_FAST_INSTALL' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [disable-fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'disable-fast-install' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:411: -1- AU_DEFUN([AC_LIBTOOL_PICMODE], [_LT_SET_OPTION([LT_INIT], [pic-only])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'pic-only' option into LT_INIT's first parameter.])
])
m4trace:config/ltoptions.m4:411: -1- AC_DEFUN([AC_LIBTOOL_PICMODE], [m4_warn([obsolete], [The macro `AC_LIBTOOL_PICMODE' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [pic-only])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'pic-only' option into LT_INIT's first parameter.])
])
m4trace:config/ltsugar.m4:14: -1- AC_DEFUN([LTSUGAR_VERSION], [m4_if([0.1])])
m4trace:config/ltversion.m4:18: -1- AC_DEFUN([LTVERSION_VERSION], [macro_version='2.4.6'
macro_revision='2.4.6'
_LT_DECL(, macro_version, 0, [Which release of libtool.m4 was used?])
_LT_DECL(, macro_revision, 0)
])
m4trace:config/lt~obsolete.m4:37: -1- AC_DEFUN([LTOBSOLETE_VERSION], [m4_if([1])])
m4trace:config/lt~obsolete.m4:41: -1- AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH])
m4trace:config/lt~obsolete.m4:42: -1- AC_DEFUN([_LT_AC_SHELL_INIT])
m4trace:config/lt~obsolete.m4:43: -1- AC_DEFUN([_LT_AC_SYS_LIBPATH_AIX])
m4trace:config/lt~obsolete.m4:45: -1- AC_DEFUN([_LT_AC_TAGVAR])
m4trace:config/lt~obsolete.m4:46: -1- AC_DEFUN([AC_LTDL_ENABLE_INSTALL])
m4trace:config/lt~obsolete.m4:47: -1- AC_DEFUN([AC_LTDL_PREOPEN])
m4trace:config/lt~obsolete.m4:48: -1- AC_DEFUN([_LT_AC_SYS_COMPILER])
m4trace:config/lt~obsolete.m4:49: -1- AC_DEFUN([_LT_AC_LOCK])
m4trace:config/lt~obsolete.m4:50: -1- AC_DEFUN([AC_LIBTOOL_SYS_OLD_ARCHIVE])
m4trace:config/lt~obsolete.m4:51: -1- AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF])
m4trace:config/lt~obsolete.m4:52: -1- AC_DEFUN([AC_LIBTOOL_PROG_CC_C_O])
m4trace:config/lt~obsolete.m4:53: -1- AC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS])
m4trace:config/lt~obsolete.m4:54: -1- AC_DEFUN([AC_LIBTOOL_OBJDIR])
m4trace:config/lt~obsolete.m4:55: -1- AC_DEFUN([AC_LTDL_OBJDIR])
m4trace:config/lt~obsolete.m4:56: -1- AC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH])
m4trace:config/lt~obsolete.m4:57: -1- AC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP])
m4trace:config/lt~obsolete.m4:58: -1- AC_DEFUN([AC_PATH_MAGIC])
m4trace:config/lt~obsolete.m4:59: -1- AC_DEFUN([AC_PROG_LD_GNU])
m4trace:config/lt~obsolete.m4:60: -1- AC_DEFUN([AC_PROG_LD_RELOAD_FLAG])
m4trace:config/lt~obsolete.m4:61: -1- AC_DEFUN([AC_DEPLIBS_CHECK_METHOD])
m4trace:config/lt~obsolete.m4:62: -1- AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI])
m4trace:config/lt~obsolete.m4:63: -1- AC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE])
m4trace:config/lt~obsolete.m4:64: -1- AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC])
m4trace:config/lt~obsolete.m4:65: -1- AC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS])
m4trace:config/lt~obsolete.m4:66: -1- AC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP])
m4trace:config/lt~obsolete.m4:67: -1- AC_DEFUN([LT_AC_PROG_EGREP])
m4trace:config/lt~obsolete.m4:72: -1- AC_DEFUN([_AC_PROG_LIBTOOL])
m4trace:config/lt~obsolete.m4:73: -1- AC_DEFUN([AC_LIBTOOL_SETUP])
m4trace:config/lt~obsolete.m4:74: -1- AC_DEFUN([_LT_AC_CHECK_DLFCN])
m4trace:config/lt~obsolete.m4:75: -1- AC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER])
m4trace:config/lt~obsolete.m4:76: -1- AC_DEFUN([_LT_AC_TAGCONFIG])
m4trace:config/lt~obsolete.m4:78: -1- AC_DEFUN([_LT_AC_LANG_CXX])
m4trace:config/lt~obsolete.m4:79: -1- AC_DEFUN([_LT_AC_LANG_F77])
m4trace:config/lt~obsolete.m4:80: -1- AC_DEFUN([_LT_AC_LANG_GCJ])
m4trace:config/lt~obsolete.m4:81: -1- AC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG])
m4trace:config/lt~obsolete.m4:82: -1- AC_DEFUN([_LT_AC_LANG_C_CONFIG])
m4trace:config/lt~obsolete.m4:83: -1- AC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG])
m4trace:config/lt~obsolete.m4:84: -1- AC_DEFUN([_LT_AC_LANG_CXX_CONFIG])
m4trace:config/lt~obsolete.m4:85: -1- AC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG])
m4trace:config/lt~obsolete.m4:86: -1- AC_DEFUN([_LT_AC_LANG_F77_CONFIG])
m4trace:config/lt~obsolete.m4:87: -1- AC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG])
m4trace:config/lt~obsolete.m4:88: -1- AC_DEFUN([_LT_AC_LANG_GCJ_CONFIG])
m4trace:config/lt~obsolete.m4:89: -1- AC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG])
m4trace:config/lt~obsolete.m4:90: -1- AC_DEFUN([_LT_AC_LANG_RC_CONFIG])
m4trace:config/lt~obsolete.m4:91: -1- AC_DEFUN([AC_LIBTOOL_CONFIG])
m4trace:config/lt~obsolete.m4:92: -1- AC_DEFUN([_LT_AC_FILE_LTDLL_C])
m4trace:config/lt~obsolete.m4:94: -1- AC_DEFUN([_LT_AC_PROG_CXXCPP])
m4trace:config/lt~obsolete.m4:97: -1- AC_DEFUN([_LT_PROG_F77])
m4trace:config/lt~obsolete.m4:98: -1- AC_DEFUN([_LT_PROG_FC])
m4trace:config/lt~obsolete.m4:99: -1- AC_DEFUN([_LT_PROG_CXX])
m4trace:config/mount-helper.m4:1: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_MOUNT_HELPER], [
	AC_ARG_WITH(mounthelperdir,
		AS_HELP_STRING([--with-mounthelperdir=DIR],
		[install mount.zfs in dir [[/sbin]]]),
		mounthelperdir=$withval,mounthelperdir=/sbin)

	AC_SUBST(mounthelperdir)
])
m4trace:config/nls.m4:23: -1- AC_DEFUN([AM_NLS], [
  AC_MSG_CHECKING([whether NLS is requested])
  dnl Default is enabled NLS
  AC_ARG_ENABLE([nls],
    [  --disable-nls           do not use Native Language Support],
    USE_NLS=$enableval, USE_NLS=yes)
  AC_MSG_RESULT([$USE_NLS])
  AC_SUBST([USE_NLS])
])
m4trace:config/pkg.m4:58: -1- AC_DEFUN([PKG_PROG_PKG_CONFIG], [m4_pattern_forbid([^_?PKG_[A-Z_]+$])
m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])
m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])
AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])
AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])
AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])

if test "x$ac_cv_env_PKG_CONFIG_set" != "xset"; then
	AC_PATH_TOOL([PKG_CONFIG], [pkg-config])
fi
if test -n "$PKG_CONFIG"; then
	_pkg_min_version=m4_default([$1], [0.9.0])
	AC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])
	if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
		PKG_CONFIG=""
	fi
fi[]dnl
])
m4trace:config/pkg.m4:92: -1- AC_DEFUN([PKG_CHECK_EXISTS], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
if test -n "$PKG_CONFIG" && \
    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors "$1"]); then
  m4_default([$2], [:])
m4_ifvaln([$3], [else
  $3])dnl
fi])
m4trace:config/pkg.m4:121: -1- AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])
if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
        _pkg_short_errors_supported=yes
else
        _pkg_short_errors_supported=no
fi[]dnl
])
m4trace:config/pkg.m4:139: -1- AC_DEFUN([PKG_CHECK_MODULES], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl
AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl

pkg_failed=no
AC_MSG_CHECKING([for $2])

_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])
_PKG_CONFIG([$1][_LIBS], [libs], [$2])

m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS
and $1[]_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.])

if test $pkg_failed = yes; then
        AC_MSG_RESULT([no])
        _PKG_SHORT_ERRORS_SUPPORTED
        if test $_pkg_short_errors_supported = yes; then
	        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs "$2" 2>&1`
        else
	        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs "$2" 2>&1`
        fi
	# Put the nasty error message in config.log where it belongs
	echo "$$1[]_PKG_ERRORS" >&AS_MESSAGE_LOG_FD

	m4_default([$4], [AC_MSG_ERROR(
[Package requirements ($2) were not met:

$$1_PKG_ERRORS

Consider adjusting the PKG_CONFIG_PATH environment variable if you
installed software in a non-standard prefix.

_PKG_TEXT])[]dnl
        ])
elif test $pkg_failed = untried; then
        AC_MSG_RESULT([no])
	m4_default([$4], [AC_MSG_FAILURE(
[The pkg-config script could not be found or is too old.  Make sure it
is in your PATH or set the PKG_CONFIG environment variable to the full
path to pkg-config.

_PKG_TEXT

To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl
        ])
else
	$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS
	$1[]_LIBS=$pkg_cv_[]$1[]_LIBS
        AC_MSG_RESULT([yes])
	$3
fi[]dnl
])
m4trace:config/pkg.m4:208: -1- AC_DEFUN([PKG_CHECK_MODULES_STATIC], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
_save_PKG_CONFIG=$PKG_CONFIG
PKG_CONFIG="$PKG_CONFIG --static"
PKG_CHECK_MODULES($@)
PKG_CONFIG=$_save_PKG_CONFIG[]dnl
])
m4trace:config/pkg.m4:226: -1- AC_DEFUN([PKG_INSTALLDIR], [m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])
m4_pushdef([pkg_description],
    [pkg-config installation directory @<:@]pkg_default[@:>@])
AC_ARG_WITH([pkgconfigdir],
    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,
    [with_pkgconfigdir=]pkg_default)
AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])
m4_popdef([pkg_default])
m4_popdef([pkg_description])
])
m4trace:config/pkg.m4:248: -1- AC_DEFUN([PKG_NOARCH_INSTALLDIR], [m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])
m4_pushdef([pkg_description],
    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])
AC_ARG_WITH([noarch-pkgconfigdir],
    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,
    [with_noarch_pkgconfigdir=]pkg_default)
AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])
m4_popdef([pkg_default])
m4_popdef([pkg_description])
])
m4trace:config/pkg.m4:267: -1- AC_DEFUN([PKG_CHECK_VAR], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl

_PKG_CONFIG([$1], [variable="][$3]["], [$2])
AS_VAR_COPY([$1], [pkg_cv_][$1])

AS_VAR_IF([$1], [""], [$5], [$4])dnl
])
m4trace:config/po.m4:23: -1- AC_DEFUN([AM_PO_SUBDIRS], [
  AC_REQUIRE([AC_PROG_MAKE_SET])dnl
  AC_REQUIRE([AC_PROG_INSTALL])dnl
  AC_REQUIRE([AC_PROG_MKDIR_P])dnl
  AC_REQUIRE([AC_PROG_SED])dnl
  AC_REQUIRE([AM_NLS])dnl

  dnl Release version of the gettext macros. This is used to ensure that
  dnl the gettext macros and po/Makefile.in.in are in sync.
  AC_SUBST([GETTEXT_MACRO_VERSION], [0.20])

  dnl Perform the following tests also if --disable-nls has been given,
  dnl because they are needed for "make dist" to work.

  dnl Search for GNU msgfmt in the PATH.
  dnl The first test excludes Solaris msgfmt and early GNU msgfmt versions.
  dnl The second test excludes FreeBSD msgfmt.
  AM_PATH_PROG_WITH_TEST(MSGFMT, msgfmt,
    [$ac_dir/$ac_word --statistics /dev/null >&]AS_MESSAGE_LOG_FD[ 2>&1 &&
     (if $ac_dir/$ac_word --statistics /dev/null 2>&1 >/dev/null | grep usage >/dev/null; then exit 1; else exit 0; fi)],
    :)
  AC_PATH_PROG([GMSGFMT], [gmsgfmt], [$MSGFMT])

  dnl Test whether it is GNU msgfmt >= 0.15.
changequote(,)dnl
  case `$GMSGFMT --version | sed 1q | sed -e 's,^[^0-9]*,,'` in
    '' | 0.[0-9] | 0.[0-9].* | 0.1[0-4] | 0.1[0-4].*) GMSGFMT_015=: ;;
    *) GMSGFMT_015=$GMSGFMT ;;
  esac
changequote([,])dnl
  AC_SUBST([GMSGFMT_015])

  dnl Search for GNU xgettext 0.12 or newer in the PATH.
  dnl The first test excludes Solaris xgettext and early GNU xgettext versions.
  dnl The second test excludes FreeBSD xgettext.
  AM_PATH_PROG_WITH_TEST(XGETTEXT, xgettext,
    [$ac_dir/$ac_word --omit-header --copyright-holder= --msgid-bugs-address= /dev/null >&]AS_MESSAGE_LOG_FD[ 2>&1 &&
     (if $ac_dir/$ac_word --omit-header --copyright-holder= --msgid-bugs-address= /dev/null 2>&1 >/dev/null | grep usage >/dev/null; then exit 1; else exit 0; fi)],
    :)
  dnl Remove leftover from FreeBSD xgettext call.
  rm -f messages.po

  dnl Test whether it is GNU xgettext >= 0.15.
changequote(,)dnl
  case `$XGETTEXT --version | sed 1q | sed -e 's,^[^0-9]*,,'` in
    '' | 0.[0-9] | 0.[0-9].* | 0.1[0-4] | 0.1[0-4].*) XGETTEXT_015=: ;;
    *) XGETTEXT_015=$XGETTEXT ;;
  esac
changequote([,])dnl
  AC_SUBST([XGETTEXT_015])

  dnl Search for GNU msgmerge 0.11 or newer in the PATH.
  AM_PATH_PROG_WITH_TEST(MSGMERGE, msgmerge,
    [$ac_dir/$ac_word --update -q /dev/null /dev/null >&]AS_MESSAGE_LOG_FD[ 2>&1], :)

  dnl Test whether it is GNU msgmerge >= 0.20.
  if LC_ALL=C $MSGMERGE --help | grep ' --for-msgfmt ' >/dev/null; then
    MSGMERGE_FOR_MSGFMT_OPTION='--for-msgfmt'
  else
    dnl Test whether it is GNU msgmerge >= 0.12.
    if LC_ALL=C $MSGMERGE --help | grep ' --no-fuzzy-matching ' >/dev/null; then
      MSGMERGE_FOR_MSGFMT_OPTION='--no-fuzzy-matching --no-location --quiet'
    else
      dnl With these old versions, $(MSGMERGE) $(MSGMERGE_FOR_MSGFMT_OPTION) is
      dnl slow. But this is not a big problem, as such old gettext versions are
      dnl hardly in use any more.
      MSGMERGE_FOR_MSGFMT_OPTION='--no-location --quiet'
    fi
  fi
  AC_SUBST([MSGMERGE_FOR_MSGFMT_OPTION])

  dnl Support for AM_XGETTEXT_OPTION.
  test -n "${XGETTEXT_EXTRA_OPTIONS+set}" || XGETTEXT_EXTRA_OPTIONS=
  AC_SUBST([XGETTEXT_EXTRA_OPTIONS])

  AC_CONFIG_COMMANDS([po-directories], [[
    for ac_file in $CONFIG_FILES; do
      # Support "outfile[:infile[:infile...]]"
      case "$ac_file" in
        *:*) ac_file=`echo "$ac_file"|sed 's%:.*%%'` ;;
      esac
      # PO directories have a Makefile.in generated from Makefile.in.in.
      case "$ac_file" in */Makefile.in)
        # Adjust a relative srcdir.
        ac_dir=`echo "$ac_file"|sed 's%/[^/][^/]*$%%'`
        ac_dir_suffix=/`echo "$ac_dir"|sed 's%^\./%%'`
        ac_dots=`echo "$ac_dir_suffix"|sed 's%/[^/]*%../%g'`
        # In autoconf-2.13 it is called $ac_given_srcdir.
        # In autoconf-2.50 it is called $srcdir.
        test -n "$ac_given_srcdir" || ac_given_srcdir="$srcdir"
        case "$ac_given_srcdir" in
          .)  top_srcdir=`echo $ac_dots|sed 's%/$%%'` ;;
          /*) top_srcdir="$ac_given_srcdir" ;;
          *)  top_srcdir="$ac_dots$ac_given_srcdir" ;;
        esac
        # Treat a directory as a PO directory if and only if it has a
        # POTFILES.in file. This allows packages to have multiple PO
        # directories under different names or in different locations.
        if test -f "$ac_given_srcdir/$ac_dir/POTFILES.in"; then
          rm -f "$ac_dir/POTFILES"
          test -n "$as_me" && echo "$as_me: creating $ac_dir/POTFILES" || echo "creating $ac_dir/POTFILES"
          gt_tab=`printf '\t'`
          cat "$ac_given_srcdir/$ac_dir/POTFILES.in" | sed -e "/^#/d" -e "/^[ ${gt_tab}]*\$/d" -e "s,.*,     $top_srcdir/& \\\\," | sed -e "\$s/\(.*\) \\\\/\1/" > "$ac_dir/POTFILES"
          POMAKEFILEDEPS="POTFILES.in"
          # ALL_LINGUAS, POFILES, UPDATEPOFILES, DUMMYPOFILES, GMOFILES depend
          # on $ac_dir but don't depend on user-specified configuration
          # parameters.
          if test -f "$ac_given_srcdir/$ac_dir/LINGUAS"; then
            # The LINGUAS file contains the set of available languages.
            if test -n "$OBSOLETE_ALL_LINGUAS"; then
              test -n "$as_me" && echo "$as_me: setting ALL_LINGUAS in configure.in is obsolete" || echo "setting ALL_LINGUAS in configure.in is obsolete"
            fi
            ALL_LINGUAS=`sed -e "/^#/d" -e "s/#.*//" "$ac_given_srcdir/$ac_dir/LINGUAS"`
            POMAKEFILEDEPS="$POMAKEFILEDEPS LINGUAS"
          else
            # The set of available languages was given in configure.in.
            ALL_LINGUAS=$OBSOLETE_ALL_LINGUAS
          fi
          # Compute POFILES
          # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(lang).po)
          # Compute UPDATEPOFILES
          # as      $(foreach lang, $(ALL_LINGUAS), $(lang).po-update)
          # Compute DUMMYPOFILES
          # as      $(foreach lang, $(ALL_LINGUAS), $(lang).nop)
          # Compute GMOFILES
          # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(lang).gmo)
          case "$ac_given_srcdir" in
            .) srcdirpre= ;;
            *) srcdirpre='$(srcdir)/' ;;
          esac
          POFILES=
          UPDATEPOFILES=
          DUMMYPOFILES=
          GMOFILES=
          for lang in $ALL_LINGUAS; do
            POFILES="$POFILES $srcdirpre$lang.po"
            UPDATEPOFILES="$UPDATEPOFILES $lang.po-update"
            DUMMYPOFILES="$DUMMYPOFILES $lang.nop"
            GMOFILES="$GMOFILES $srcdirpre$lang.gmo"
          done
          # CATALOGS depends on both $ac_dir and the user's LINGUAS
          # environment variable.
          INST_LINGUAS=
          if test -n "$ALL_LINGUAS"; then
            for presentlang in $ALL_LINGUAS; do
              useit=no
              if test "%UNSET%" != "$LINGUAS"; then
                desiredlanguages="$LINGUAS"
              else
                desiredlanguages="$ALL_LINGUAS"
              fi
              for desiredlang in $desiredlanguages; do
                # Use the presentlang catalog if desiredlang is
                #   a. equal to presentlang, or
                #   b. a variant of presentlang (because in this case,
                #      presentlang can be used as a fallback for messages
                #      which are not translated in the desiredlang catalog).
                case "$desiredlang" in
                  "$presentlang"*) useit=yes;;
                esac
              done
              if test $useit = yes; then
                INST_LINGUAS="$INST_LINGUAS $presentlang"
              fi
            done
          fi
          CATALOGS=
          if test -n "$INST_LINGUAS"; then
            for lang in $INST_LINGUAS; do
              CATALOGS="$CATALOGS $lang.gmo"
            done
          fi
          test -n "$as_me" && echo "$as_me: creating $ac_dir/Makefile" || echo "creating $ac_dir/Makefile"
          sed -e "/^POTFILES =/r $ac_dir/POTFILES" -e "/^# Makevars/r $ac_given_srcdir/$ac_dir/Makevars" -e "s|@POFILES@|$POFILES|g" -e "s|@UPDATEPOFILES@|$UPDATEPOFILES|g" -e "s|@DUMMYPOFILES@|$DUMMYPOFILES|g" -e "s|@GMOFILES@|$GMOFILES|g" -e "s|@CATALOGS@|$CATALOGS|g" -e "s|@POMAKEFILEDEPS@|$POMAKEFILEDEPS|g" "$ac_dir/Makefile.in" > "$ac_dir/Makefile"
          for f in "$ac_given_srcdir/$ac_dir"/Rules-*; do
            if test -f "$f"; then
              case "$f" in
                *.orig | *.bak | *~) ;;
                *) cat "$f" >> "$ac_dir/Makefile" ;;
              esac
            fi
          done
        fi
        ;;
      esac
    done]],
   [# Capture the value of obsolete ALL_LINGUAS because we need it to compute
    # POFILES, UPDATEPOFILES, DUMMYPOFILES, GMOFILES, CATALOGS.
    OBSOLETE_ALL_LINGUAS="$ALL_LINGUAS"
    # Capture the value of LINGUAS because we need it to compute CATALOGS.
    LINGUAS="${LINGUAS-%UNSET%}"
   ])
])
m4trace:config/po.m4:219: -1- AC_DEFUN([AM_POSTPROCESS_PO_MAKEFILE], [
  # When this code is run, in config.status, two variables have already been
  # set:
  # - OBSOLETE_ALL_LINGUAS is the value of LINGUAS set in configure.in,
  # - LINGUAS is the value of the environment variable LINGUAS at configure
  #   time.

changequote(,)dnl
  # Adjust a relative srcdir.
  ac_dir=`echo "$ac_file"|sed 's%/[^/][^/]*$%%'`
  ac_dir_suffix=/`echo "$ac_dir"|sed 's%^\./%%'`
  ac_dots=`echo "$ac_dir_suffix"|sed 's%/[^/]*%../%g'`
  # In autoconf-2.13 it is called $ac_given_srcdir.
  # In autoconf-2.50 it is called $srcdir.
  test -n "$ac_given_srcdir" || ac_given_srcdir="$srcdir"
  case "$ac_given_srcdir" in
    .)  top_srcdir=`echo $ac_dots|sed 's%/$%%'` ;;
    /*) top_srcdir="$ac_given_srcdir" ;;
    *)  top_srcdir="$ac_dots$ac_given_srcdir" ;;
  esac

  # Find a way to echo strings without interpreting backslash.
  if test "X`(echo '\t') 2>/dev/null`" = 'X\t'; then
    gt_echo='echo'
  else
    if test "X`(printf '%s\n' '\t') 2>/dev/null`" = 'X\t'; then
      gt_echo='printf %s\n'
    else
      echo_func () {
        cat <<EOT
$*
EOT
      }
      gt_echo='echo_func'
    fi
  fi

  # A sed script that extracts the value of VARIABLE from a Makefile.
  tab=`printf '\t'`
  sed_x_variable='
# Test if the hold space is empty.
x
s/P/P/
x
ta
# Yes it was empty. Look if we have the expected variable definition.
/^['"${tab}"' ]*VARIABLE['"${tab}"' ]*=/{
  # Seen the first line of the variable definition.
  s/^['"${tab}"' ]*VARIABLE['"${tab}"' ]*=//
  ba
}
bd
:a
# Here we are processing a line from the variable definition.
# Remove comment, more precisely replace it with a space.
s/#.*$/ /
# See if the line ends in a backslash.
tb
:b
s/\\$//
# Print the line, without the trailing backslash.
p
tc
# There was no trailing backslash. The end of the variable definition is
# reached. Clear the hold space.
s/^.*$//
x
bd
:c
# A trailing backslash means that the variable definition continues in the
# next line. Put a nonempty string into the hold space to indicate this.
s/^.*$/P/
x
:d
'
changequote([,])dnl

  # Set POTFILES to the value of the Makefile variable POTFILES.
  sed_x_POTFILES=`$gt_echo "$sed_x_variable" | sed -e '/^ *#/d' -e 's/VARIABLE/POTFILES/g'`
  POTFILES=`sed -n -e "$sed_x_POTFILES" < "$ac_file"`
  # Compute POTFILES_DEPS as
  #   $(foreach file, $(POTFILES), $(top_srcdir)/$(file))
  POTFILES_DEPS=
  for file in $POTFILES; do
    POTFILES_DEPS="$POTFILES_DEPS "'$(top_srcdir)/'"$file"
  done
  POMAKEFILEDEPS=""

  if test -n "$OBSOLETE_ALL_LINGUAS"; then
    test -n "$as_me" && echo "$as_me: setting ALL_LINGUAS in configure.in is obsolete" || echo "setting ALL_LINGUAS in configure.in is obsolete"
  fi
  if test -f "$ac_given_srcdir/$ac_dir/LINGUAS"; then
    # The LINGUAS file contains the set of available languages.
    ALL_LINGUAS=`sed -e "/^#/d" -e "s/#.*//" "$ac_given_srcdir/$ac_dir/LINGUAS"`
    POMAKEFILEDEPS="$POMAKEFILEDEPS LINGUAS"
  else
    # Set ALL_LINGUAS to the value of the Makefile variable LINGUAS.
    sed_x_LINGUAS=`$gt_echo "$sed_x_variable" | sed -e '/^ *#/d' -e 's/VARIABLE/LINGUAS/g'`
    ALL_LINGUAS=`sed -n -e "$sed_x_LINGUAS" < "$ac_file"`
  fi
  # Compute POFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(lang).po)
  # Compute UPDATEPOFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(lang).po-update)
  # Compute DUMMYPOFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(lang).nop)
  # Compute GMOFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(lang).gmo)
  # Compute PROPERTIESFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(DOMAIN)_$(lang).properties)
  # Compute CLASSFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(DOMAIN)_$(lang).class)
  # Compute QMFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(lang).qm)
  # Compute MSGFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(frob $(lang)).msg)
  # Compute RESOURCESDLLFILES
  # as      $(foreach lang, $(ALL_LINGUAS), $(srcdir)/$(frob $(lang))/$(DOMAIN).resources.dll)
  case "$ac_given_srcdir" in
    .) srcdirpre= ;;
    *) srcdirpre='$(srcdir)/' ;;
  esac
  POFILES=
  UPDATEPOFILES=
  DUMMYPOFILES=
  GMOFILES=
  PROPERTIESFILES=
  CLASSFILES=
  QMFILES=
  MSGFILES=
  RESOURCESDLLFILES=
  for lang in $ALL_LINGUAS; do
    POFILES="$POFILES $srcdirpre$lang.po"
    UPDATEPOFILES="$UPDATEPOFILES $lang.po-update"
    DUMMYPOFILES="$DUMMYPOFILES $lang.nop"
    GMOFILES="$GMOFILES $srcdirpre$lang.gmo"
    PROPERTIESFILES="$PROPERTIESFILES \$(srcdir)/\$(DOMAIN)_$lang.properties"
    CLASSFILES="$CLASSFILES \$(srcdir)/\$(DOMAIN)_$lang.class"
    QMFILES="$QMFILES $srcdirpre$lang.qm"
    frobbedlang=`echo $lang | sed -e 's/\..*$//' -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
    MSGFILES="$MSGFILES $srcdirpre$frobbedlang.msg"
    frobbedlang=`echo $lang | sed -e 's/_/-/g' -e 's/^sr-CS/sr-SP/' -e 's/@latin$/-Latn/' -e 's/@cyrillic$/-Cyrl/' -e 's/^sr-SP$/sr-SP-Latn/' -e 's/^uz-UZ$/uz-UZ-Latn/'`
    RESOURCESDLLFILES="$RESOURCESDLLFILES $srcdirpre$frobbedlang/\$(DOMAIN).resources.dll"
  done
  # CATALOGS depends on both $ac_dir and the user's LINGUAS
  # environment variable.
  INST_LINGUAS=
  if test -n "$ALL_LINGUAS"; then
    for presentlang in $ALL_LINGUAS; do
      useit=no
      if test "%UNSET%" != "$LINGUAS"; then
        desiredlanguages="$LINGUAS"
      else
        desiredlanguages="$ALL_LINGUAS"
      fi
      for desiredlang in $desiredlanguages; do
        # Use the presentlang catalog if desiredlang is
        #   a. equal to presentlang, or
        #   b. a variant of presentlang (because in this case,
        #      presentlang can be used as a fallback for messages
        #      which are not translated in the desiredlang catalog).
        case "$desiredlang" in
          "$presentlang"*) useit=yes;;
        esac
      done
      if test $useit = yes; then
        INST_LINGUAS="$INST_LINGUAS $presentlang"
      fi
    done
  fi
  CATALOGS=
  JAVACATALOGS=
  QTCATALOGS=
  TCLCATALOGS=
  CSHARPCATALOGS=
  if test -n "$INST_LINGUAS"; then
    for lang in $INST_LINGUAS; do
      CATALOGS="$CATALOGS $lang.gmo"
      JAVACATALOGS="$JAVACATALOGS \$(DOMAIN)_$lang.properties"
      QTCATALOGS="$QTCATALOGS $lang.qm"
      frobbedlang=`echo $lang | sed -e 's/\..*$//' -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
      TCLCATALOGS="$TCLCATALOGS $frobbedlang.msg"
      frobbedlang=`echo $lang | sed -e 's/_/-/g' -e 's/^sr-CS/sr-SP/' -e 's/@latin$/-Latn/' -e 's/@cyrillic$/-Cyrl/' -e 's/^sr-SP$/sr-SP-Latn/' -e 's/^uz-UZ$/uz-UZ-Latn/'`
      CSHARPCATALOGS="$CSHARPCATALOGS $frobbedlang/\$(DOMAIN).resources.dll"
    done
  fi

  sed -e "s|@POTFILES_DEPS@|$POTFILES_DEPS|g" -e "s|@POFILES@|$POFILES|g" -e "s|@UPDATEPOFILES@|$UPDATEPOFILES|g" -e "s|@DUMMYPOFILES@|$DUMMYPOFILES|g" -e "s|@GMOFILES@|$GMOFILES|g" -e "s|@PROPERTIESFILES@|$PROPERTIESFILES|g" -e "s|@CLASSFILES@|$CLASSFILES|g" -e "s|@QMFILES@|$QMFILES|g" -e "s|@MSGFILES@|$MSGFILES|g" -e "s|@RESOURCESDLLFILES@|$RESOURCESDLLFILES|g" -e "s|@CATALOGS@|$CATALOGS|g" -e "s|@JAVACATALOGS@|$JAVACATALOGS|g" -e "s|@QTCATALOGS@|$QTCATALOGS|g" -e "s|@TCLCATALOGS@|$TCLCATALOGS|g" -e "s|@CSHARPCATALOGS@|$CSHARPCATALOGS|g" -e 's,^#distdir:,distdir:,' < "$ac_file" > "$ac_file.tmp"
  tab=`printf '\t'`
  if grep -l '@TCLCATALOGS@' "$ac_file" > /dev/null; then
    # Add dependencies that cannot be formulated as a simple suffix rule.
    for lang in $ALL_LINGUAS; do
      frobbedlang=`echo $lang | sed -e 's/\..*$//' -e 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
      cat >> "$ac_file.tmp" <<EOF
$frobbedlang.msg: $lang.po
${tab}@echo "\$(MSGFMT) -c --tcl -d \$(srcdir) -l $lang $srcdirpre$lang.po"; \
${tab}\$(MSGFMT) -c --tcl -d "\$(srcdir)" -l $lang $srcdirpre$lang.po || { rm -f "\$(srcdir)/$frobbedlang.msg"; exit 1; }
EOF
    done
  fi
  if grep -l '@CSHARPCATALOGS@' "$ac_file" > /dev/null; then
    # Add dependencies that cannot be formulated as a simple suffix rule.
    for lang in $ALL_LINGUAS; do
      frobbedlang=`echo $lang | sed -e 's/_/-/g' -e 's/^sr-CS/sr-SP/' -e 's/@latin$/-Latn/' -e 's/@cyrillic$/-Cyrl/' -e 's/^sr-SP$/sr-SP-Latn/' -e 's/^uz-UZ$/uz-UZ-Latn/'`
      cat >> "$ac_file.tmp" <<EOF
$frobbedlang/\$(DOMAIN).resources.dll: $lang.po
${tab}@echo "\$(MSGFMT) -c --csharp -d \$(srcdir) -l $lang $srcdirpre$lang.po -r \$(DOMAIN)"; \
${tab}\$(MSGFMT) -c --csharp -d "\$(srcdir)" -l $lang $srcdirpre$lang.po -r "\$(DOMAIN)" || { rm -f "\$(srcdir)/$frobbedlang.msg"; exit 1; }
EOF
    done
  fi
  if test -n "$POMAKEFILEDEPS"; then
    cat >> "$ac_file.tmp" <<EOF
Makefile: $POMAKEFILEDEPS
EOF
  fi
  mv "$ac_file.tmp" "$ac_file"
])
m4trace:config/po.m4:440: -1- AC_DEFUN([AM_XGETTEXT_OPTION_INIT], [
  XGETTEXT_EXTRA_OPTIONS=
])
m4trace:config/po.m4:446: -1- AC_DEFUN([AM_XGETTEXT_OPTION], [
  AC_REQUIRE([AM_XGETTEXT_OPTION_INIT])
  XGETTEXT_EXTRA_OPTIONS="$XGETTEXT_EXTRA_OPTIONS $1"
])
m4trace:config/progtest.m4:25: -1- AC_DEFUN([AM_PATH_PROG_WITH_TEST], [
# Prepare PATH_SEPARATOR.
# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  # Determine PATH_SEPARATOR by trying to find /bin/sh in a PATH which
  # contains only /bin. Note that ksh looks also at the FPATH variable,
  # so we have to set that as well for the test.
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 \
    && { (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 \
           || PATH_SEPARATOR=';'
       }
fi

# Find out how to test for executable files. Don't use a zero-byte file,
# as systems may use methods other than mode bits to determine executability.
cat >conf$$.file <<_ASEOF
#! /bin/sh
exit 0
_ASEOF
chmod +x conf$$.file
if test -x conf$$.file >/dev/null 2>&1; then
  ac_executable_p="test -x"
else
  ac_executable_p="test -f"
fi
rm -f conf$$.file

# Extract the first word of "$2", so it can be a program name with args.
set dummy $2; ac_word=[$]2
AC_MSG_CHECKING([for $ac_word])
AC_CACHE_VAL([ac_cv_path_$1],
[case "[$]$1" in
  [[\\/]]* | ?:[[\\/]]*)
    ac_cv_path_$1="[$]$1" # Let the user override the test with a path.
    ;;
  *)
    ac_save_IFS="$IFS"; IFS=$PATH_SEPARATOR
    for ac_dir in ifelse([$5], , $PATH, [$5]); do
      IFS="$ac_save_IFS"
      test -z "$ac_dir" && ac_dir=.
      for ac_exec_ext in '' $ac_executable_extensions; do
        if $ac_executable_p "$ac_dir/$ac_word$ac_exec_ext"; then
          echo "$as_me: trying $ac_dir/$ac_word..." >&AS_MESSAGE_LOG_FD
          if [$3]; then
            ac_cv_path_$1="$ac_dir/$ac_word$ac_exec_ext"
            break 2
          fi
        fi
      done
    done
    IFS="$ac_save_IFS"
dnl If no 4th arg is given, leave the cache variable unset,
dnl so AC_PATH_PROGS will keep looking.
ifelse([$4], , , [  test -z "[$]ac_cv_path_$1" && ac_cv_path_$1="$4"
])dnl
    ;;
esac])dnl
$1="$ac_cv_path_$1"
if test ifelse([$4], , [-n "[$]$1"], ["[$]$1" != "$4"]); then
  AC_MSG_RESULT([$][$1])
else
  AC_MSG_RESULT([no])
fi
AC_SUBST([$1])dnl
])
m4trace:config/toolchain-simd.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS_TOOLCHAIN_SIMD], [
	case "$host_cpu" in
		amd64 | x86_64 | x86 | i686)
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE2
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE3
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSSE3
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE4_1
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE4_2
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX2
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512F
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512CD
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512DQ
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512BW
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512IFMA
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512VBMI
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512PF
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512ER
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512VL
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AES
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_PCLMULQDQ
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_MOVBE
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVE
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVEOPT
			ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVES
			;;
	esac
])
m4trace:config/toolchain-simd.m4:37: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE], [
	AC_MSG_CHECKING([whether host toolchain supports SSE])

	AC_LINK_IFELSE([AC_LANG_SOURCE([[
		void main()
		{
			__asm__ __volatile__("xorps %xmm0, %xmm1");
		}
	]])], [
		AC_DEFINE([HAVE_SSE], 1, [Define if host toolchain supports SSE])
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:56: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE2], [
	AC_MSG_CHECKING([whether host toolchain supports SSE2])

	AC_LINK_IFELSE([AC_LANG_SOURCE([[
		void main()
		{
			__asm__ __volatile__("pxor %xmm0, %xmm1");
		}
	]])], [
		AC_DEFINE([HAVE_SSE2], 1, [Define if host toolchain supports SSE2])
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:75: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE3], [
	AC_MSG_CHECKING([whether host toolchain supports SSE3])

	AC_LINK_IFELSE([AC_LANG_SOURCE([[
		void main()
		{
			char v[16];
			__asm__ __volatile__("lddqu %0,%%xmm0" :: "m"(v[0]));
		}
	]])], [
		AC_DEFINE([HAVE_SSE3], 1, [Define if host toolchain supports SSE3])
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:95: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSSE3], [
	AC_MSG_CHECKING([whether host toolchain supports SSSE3])

	AC_LINK_IFELSE([AC_LANG_SOURCE([[
		void main()
		{
			__asm__ __volatile__("pshufb %xmm0,%xmm1");
		}
	]])], [
		AC_DEFINE([HAVE_SSSE3], 1, [Define if host toolchain supports SSSE3])
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:114: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE4_1], [
	AC_MSG_CHECKING([whether host toolchain supports SSE4.1])

	AC_LINK_IFELSE([AC_LANG_SOURCE([[
		void main()
		{
			__asm__ __volatile__("pmaxsb %xmm0,%xmm1");
		}
	]])], [
		AC_DEFINE([HAVE_SSE4_1], 1, [Define if host toolchain supports SSE4.1])
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:133: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE4_2], [
	AC_MSG_CHECKING([whether host toolchain supports SSE4.2])

	AC_LINK_IFELSE([AC_LANG_SOURCE([[
		void main()
		{
			__asm__ __volatile__("pcmpgtq %xmm0, %xmm1");
		}
	]])], [
		AC_DEFINE([HAVE_SSE4_2], 1, [Define if host toolchain supports SSE4.2])
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:152: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX], [
	AC_MSG_CHECKING([whether host toolchain supports AVX])

	AC_LINK_IFELSE([AC_LANG_SOURCE([[
		void main()
		{
			char v[32];
			__asm__ __volatile__("vmovdqa %0,%%ymm0" :: "m"(v[0]));
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX], 1, [Define if host toolchain supports AVX])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:172: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX2], [
	AC_MSG_CHECKING([whether host toolchain supports AVX2])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vpshufb %ymm0,%ymm1,%ymm2");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX2], 1, [Define if host toolchain supports AVX2])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:192: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512F], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512F])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vpandd %zmm0,%zmm1,%zmm2");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512F], 1, [Define if host toolchain supports AVX512F])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:212: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512CD], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512CD])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vplzcntd %zmm0,%zmm1");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512CD], 1, [Define if host toolchain supports AVX512CD])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:232: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512DQ], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512DQ])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vandpd %zmm0,%zmm1,%zmm2");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512DQ], 1, [Define if host toolchain supports AVX512DQ])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:252: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512BW], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512BW])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vpshufb %zmm0,%zmm1,%zmm2");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512BW], 1, [Define if host toolchain supports AVX512BW])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:272: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512IFMA], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512IFMA])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vpmadd52luq %zmm0,%zmm1,%zmm2");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512IFMA], 1, [Define if host toolchain supports AVX512IFMA])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:292: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512VBMI], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512VBMI])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vpermb %zmm0,%zmm1,%zmm2");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512VBMI], 1, [Define if host toolchain supports AVX512VBMI])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:312: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512PF], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512PF])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vgatherpf0dps (%rsi,%zmm0,4){%k1}");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512PF], 1, [Define if host toolchain supports AVX512PF])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:332: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512ER], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512ER])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vexp2pd %zmm0,%zmm1");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512ER], 1, [Define if host toolchain supports AVX512ER])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:352: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512VL], [
	AC_MSG_CHECKING([whether host toolchain supports AVX512VL])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("vpabsq %zmm0,%zmm1");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AVX512VL], 1, [Define if host toolchain supports AVX512VL])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:372: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AES], [
	AC_MSG_CHECKING([whether host toolchain supports AES])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("aesenc %xmm0, %xmm1");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_AES], 1, [Define if host toolchain supports AES])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:392: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_PCLMULQDQ], [
	AC_MSG_CHECKING([whether host toolchain supports PCLMULQDQ])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("pclmulqdq %0, %%xmm0, %%xmm1" :: "i"(0));
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_PCLMULQDQ], 1, [Define if host toolchain supports PCLMULQDQ])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:412: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_MOVBE], [
	AC_MSG_CHECKING([whether host toolchain supports MOVBE])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
			__asm__ __volatile__("movbe 0(%eax), %eax");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_MOVBE], 1, [Define if host toolchain supports MOVBE])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:432: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVE], [
	AC_MSG_CHECKING([whether host toolchain supports XSAVE])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
		  char b[4096] __attribute__ ((aligned (64)));
		  __asm__ __volatile__("xsave %[b]\n" : : [b] "m" (*b) : "memory");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_XSAVE], 1, [Define if host toolchain supports XSAVE])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:453: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVEOPT], [
	AC_MSG_CHECKING([whether host toolchain supports XSAVEOPT])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
		  char b[4096] __attribute__ ((aligned (64)));
		  __asm__ __volatile__("xsaveopt %[b]\n" : : [b] "m" (*b) : "memory");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_XSAVEOPT], 1, [Define if host toolchain supports XSAVEOPT])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/toolchain-simd.m4:474: -1- AC_DEFUN([ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVES], [
	AC_MSG_CHECKING([whether host toolchain supports XSAVES])

	AC_LINK_IFELSE([AC_LANG_SOURCE([
	[
		void main()
		{
		  char b[4096] __attribute__ ((aligned (64)));
		  __asm__ __volatile__("xsaves %[b]\n" : : [b] "m" (*b) : "memory");
		}
	]])], [
		AC_MSG_RESULT([yes])
		AC_DEFINE([HAVE_XSAVES], 1, [Define if host toolchain supports XSAVES])
	], [
		AC_MSG_RESULT([no])
	])
])
m4trace:config/user-aio.h.m4:5: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_AIO_H], [
	ZFS_AC_FIND_SYSTEM_LIBRARY(AIO_H, [], [aio.h], [], [rt], [lio_listio])
])
m4trace:config/user-clock_gettime.m4:5: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_CLOCK_GETTIME], [
	AC_CHECK_FUNC([clock_gettime], [], [
	    AC_CHECK_LIB([rt], [clock_gettime], [
		AC_SUBST([LIBCLOCK_GETTIME], [-lrt])], [
		AC_MSG_FAILURE([*** clock_gettime is missing in libc and librt])
	    ])
	])
])
m4trace:config/user-dracut.m4:1: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_DRACUT], [
	AC_MSG_CHECKING(for dracut directory)
	AC_ARG_WITH([dracutdir],
		AS_HELP_STRING([--with-dracutdir=DIR],
		[install dracut helpers @<:@default=check@:>@]),
		[dracutdir=$withval],
		[dracutdir=check])

	AS_IF([test "x$dracutdir" = xcheck], [
		path1=/usr/share/dracut
		path2=/usr/lib/dracut
		default=$path2

		AS_IF([test -d "$path1"], [dracutdir="$path1"], [
			AS_IF([test -d "$path2"], [dracutdir="$path2"],
				[dracutdir="$default"])
		])
	])

	AC_SUBST(dracutdir)
	AC_MSG_RESULT([$dracutdir])
])
m4trace:config/user-gettext.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_GETTEXT], [
    AM_GNU_GETTEXT([external])
])
m4trace:config/user-libaio.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_LIBAIO], [
	ZFS_AC_FIND_SYSTEM_LIBRARY(LIBAIO, [], [libaio.h], [], [aio], [], [user_libaio=yes], [user_libaio=no])
])
m4trace:config/user-libatomic.m4:5: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_LIBATOMIC], [
	AC_MSG_CHECKING([whether -latomic is required])

	saved_libs="$LIBS"
	LIBS="$LIBS -latomic"
	LIBATOMIC_LIBS=""

	AC_LINK_IFELSE([AC_LANG_PROGRAM([], [])], [
		LIBS="$saved_libs"
		saved_cflags="$CFLAGS"
		CFLAGS="$CFLAGS -isystem lib/libspl/include"
		AC_LINK_IFELSE([AC_LANG_PROGRAM([#include "lib/libspl/atomic.c"], [])], [], [LIBATOMIC_LIBS="-latomic"])
		CFLAGS="$saved_cflags"
	])

	if test -n "$LIBATOMIC_LIBS"; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
	fi

	LIBS="$saved_libs"
	AC_SUBST([LIBATOMIC_LIBS])
])
m4trace:config/user-libblkid.m4:5: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_LIBBLKID], [
	ZFS_AC_FIND_SYSTEM_LIBRARY(LIBBLKID, [blkid], [blkid/blkid.h], [], [blkid], [], [], [
		AC_MSG_FAILURE([
		*** blkid.h missing, libblkid-devel package required])])
])
m4trace:config/user-libcrypto.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_LIBCRYPTO], [
	ZFS_AC_FIND_SYSTEM_LIBRARY(LIBCRYPTO, [libcrypto], [openssl/evp.h], [], [crypto], [PKCS5_PBKDF2_HMAC_SHA1], [], [
		AC_MSG_FAILURE([
		*** evp.h missing, libssl-devel package required])])
])
m4trace:config/user-libexec.m4:1: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_ZFSEXEC], [
	AC_ARG_WITH(zfsexecdir,
		AS_HELP_STRING([--with-zfsexecdir=DIR],
		[install scripts [[@<:@libexecdir@:>@/zfs]]]),
		[zfsexecdir=$withval],
		[zfsexecdir="${libexecdir}/zfs"])

	AC_SUBST([zfsexecdir])
])
m4trace:config/user-libfetch.m4:16: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_LIBFETCH], [
	AC_MSG_CHECKING([for libfetch])
	LIBFETCH_LIBS=
	LIBFETCH_IS_FETCH=0
	LIBFETCH_IS_LIBCURL=0
	LIBFETCH_DYNAMIC=0
	LIBFETCH_SONAME=
	have_libfetch=

	saved_libs="$LIBS"
	LIBS="$LIBS -lfetch"
	AC_LINK_IFELSE([AC_LANG_PROGRAM([[
		#include <sys/param.h>
		#include <stdio.h>
		#include <fetch.h>
	]], [fetchGetURL("", "");])], [
		have_libfetch=1
		LIBFETCH_IS_FETCH=1
		LIBFETCH_DYNAMIC=1
		LIBFETCH_SONAME="libfetch.so.6"
		LIBFETCH_LIBS="-ldl"
		AC_MSG_RESULT([fetch(3)])
	], [])
	LIBS="$saved_libs"

	if test -z "$have_libfetch"; then
		if curl-config --protocols 2>/dev/null | grep -q HTTPS &&
		    test "$(printf "%u" "0x$(curl-config --vernum)")" -ge "$(printf "%u" "0x071000")"; then
			have_libfetch=1
			LIBFETCH_IS_LIBCURL=1
			if test "$(curl-config --built-shared)" = "yes"; then
				LIBFETCH_DYNAMIC=1
				LIBFETCH_SONAME="libcurl.so.4"
				LIBFETCH_LIBS="-ldl"
				AC_MSG_RESULT([libcurl])
			else
				LIBFETCH_LIBS="$(curl-config --libs)"
				AC_MSG_RESULT([libcurl (static)])
			fi

			CCFLAGS="$CCFLAGS $(curl-config --cflags)"
		fi
	fi

	if test -z "$have_libfetch"; then
		AC_MSG_RESULT([none])
	fi

	AC_SUBST([LIBFETCH_LIBS])
	AC_SUBST([LIBFETCH_DYNAMIC])
	AC_SUBST([LIBFETCH_SONAME])
	AC_DEFINE_UNQUOTED([LIBFETCH_IS_FETCH], [$LIBFETCH_IS_FETCH], [libfetch is fetch(3)])
	AC_DEFINE_UNQUOTED([LIBFETCH_IS_LIBCURL], [$LIBFETCH_IS_LIBCURL], [libfetch is libcurl])
	AC_DEFINE_UNQUOTED([LIBFETCH_DYNAMIC], [$LIBFETCH_DYNAMIC], [whether the chosen libfetch is to be loaded at run-time])
	AC_DEFINE_UNQUOTED([LIBFETCH_SONAME], ["$LIBFETCH_SONAME"], [soname of chosen libfetch])
])
m4trace:config/user-libtirpc.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_LIBTIRPC], [
	AC_ARG_WITH([tirpc],
	    [AS_HELP_STRING([--with-tirpc],
		[use tirpc for xdr encoding @<:@default=check@:>@])],
	    [],
	    [with_tirpc=check])

	have_xdr=

        AS_IF([test "x$with_tirpc" != "xyes"], [
	    AC_SEARCH_LIBS([xdrmem_create], [], [have_xdr=1], [
		AS_IF([test "x$with_tirpc" = "xno"], [
		    AC_MSG_FAILURE([xdrmem_create() requires sunrpc support in libc if not using libtirpc])
		])
	    ])
        ])

	AS_IF([test "x$have_xdr" = "x"], [
            ZFS_AC_FIND_SYSTEM_LIBRARY(LIBTIRPC, [libtirpc], [rpc/xdr.h], [tirpc], [tirpc], [xdrmem_create], [], [
		AS_IF([test "x$with_tirpc" = "xyes"], [
		    AC_MSG_FAILURE([--with-tirpc was given, but libtirpc is not available, try installing libtirpc-devel])
		],[dnl ELSE
		    AC_MSG_FAILURE([neither libc sunrpc support nor libtirpc is available, try installing libtirpc-devel])
		])
	    ])
	])
])
m4trace:config/user-libudev.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_LIBUDEV], [
	ZFS_AC_FIND_SYSTEM_LIBRARY(LIBUDEV, [libudev], [libudev.h], [], [udev], [], [user_libudev=yes], [user_libudev=no])

	AS_IF([test "x$user_libudev" = xyes], [
	    AX_SAVE_FLAGS

	    CFLAGS="$CFLAGS $LIBUDEV_CFLAGS"
	    LIBS="$LIBUDEV_LIBS $LIBS"

	    AC_CHECK_FUNCS([udev_device_get_is_initialized])

	    AX_RESTORE_FLAGS
	])
])
m4trace:config/user-libuuid.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_LIBUUID], [
	ZFS_AC_FIND_SYSTEM_LIBRARY(LIBUUID, [uuid], [uuid/uuid.h], [], [uuid], [uuid_generate uuid_is_null], [], [
	    AC_MSG_FAILURE([*** libuuid-devel package required])
	])
])
m4trace:config/user-makedev.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_MAKEDEV_IN_SYSMACROS], [
	AC_MSG_CHECKING([makedev() is declared in sys/sysmacros.h])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
		#include <sys/sysmacros.h>
	]], [[
		int k;
		k = makedev(0,0);
	]])],[
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_MAKEDEV_IN_SYSMACROS, 1,
		    [makedev() is declared in sys/sysmacros.h])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/user-makedev.m4:23: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_MAKEDEV_IN_MKDEV], [
	AC_MSG_CHECKING([makedev() is declared in sys/mkdev.h])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
		#include <sys/mkdev.h>
	]], [[
		int k;
		k = makedev(0,0);
	]])],[
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_MAKEDEV_IN_MKDEV, 1,
		    [makedev() is declared in sys/mkdev.h])
	],[
		AC_MSG_RESULT(no)
	])
])
m4trace:config/user-pam.m4:1: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_PAM], [
	AC_ARG_ENABLE([pam],
		AS_HELP_STRING([--enable-pam],
		[install pam_zfs_key module [[default: check]]]),
		[enable_pam=$enableval],
		[enable_pam=check])

	AC_ARG_WITH(pammoduledir,
		AS_HELP_STRING([--with-pammoduledir=DIR],
		[install pam module in dir [[$libdir/security]]]),
		[pammoduledir="$withval"],[pammoduledir=$libdir/security])

	AC_ARG_WITH(pamconfigsdir,
		AS_HELP_STRING([--with-pamconfigsdir=DIR],
		[install pam-config files in dir [DATADIR/pam-configs]]),
		[pamconfigsdir="$withval"],
		[pamconfigsdir='${datadir}/pam-configs'])

	AS_IF([test "x$enable_pam" != "xno"], [
		AC_CHECK_HEADERS([security/pam_modules.h], [
			enable_pam=yes
		], [
			AS_IF([test "x$enable_pam" = "xyes"], [
				AC_MSG_FAILURE([
	*** security/pam_modules.h missing, libpam0g-dev package required
				])
			],[
				enable_pam=no
			])
		])
	])
	AS_IF([test "x$enable_pam" = "xyes"], [
		DEFINE_PAM='--with pam'
	])
	AC_SUBST(DEFINE_PAM)
	AC_SUBST(pammoduledir)
	AC_SUBST(pamconfigsdir)
])
m4trace:config/user-runstatedir.m4:2: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_RUNSTATEDIR], [
	if test "x$runstatedir" = x; then
		AC_SUBST([runstatedir], ['${localstatedir}/run'])
	fi
])
m4trace:config/user-systemd.m4:1: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_SYSTEMD], [
	AC_ARG_ENABLE(systemd,
		AS_HELP_STRING([--enable-systemd],
		[install systemd unit/preset files [[default: yes]]]),
		[enable_systemd=$enableval],
		[enable_systemd=check])

	AC_ARG_WITH(systemdunitdir,
		AS_HELP_STRING([--with-systemdunitdir=DIR],
		[install systemd unit files in dir [[/usr/lib/systemd/system]]]),
		systemdunitdir=$withval,systemdunitdir=/usr/lib/systemd/system)

	AC_ARG_WITH(systemdpresetdir,
		AS_HELP_STRING([--with-systemdpresetdir=DIR],
		[install systemd preset files in dir [[/usr/lib/systemd/system-preset]]]),
		systemdpresetdir=$withval,systemdpresetdir=/usr/lib/systemd/system-preset)

	AC_ARG_WITH(systemdmodulesloaddir,
		AS_HELP_STRING([--with-systemdmodulesloaddir=DIR],
		[install systemd module load files into dir [[/usr/lib/modules-load.d]]]),
		systemdmodulesloaddir=$withval,systemdmodulesloaddir=/usr/lib/modules-load.d)

	AC_ARG_WITH(systemdgeneratordir,
		AS_HELP_STRING([--with-systemdgeneratordir=DIR],
		[install systemd generators in dir [[/usr/lib/systemd/system-generators]]]),
		systemdgeneratordir=$withval,systemdgeneratordir=/usr/lib/systemd/system-generators)

	AS_IF([test "x$enable_systemd" = xcheck], [
		AS_IF([systemctl --version >/dev/null 2>&1],
			[enable_systemd=yes],
			[enable_systemd=no])
	])

	AC_MSG_CHECKING(for systemd support)
	AC_MSG_RESULT([$enable_systemd])

	AS_IF([test "x$enable_systemd" = xyes], [
		DEFINE_SYSTEMD='--with systemd --define "_unitdir $(systemdunitdir)" --define "_presetdir $(systemdpresetdir)" --define "_generatordir $(systemdgeneratordir)"'
		modulesloaddir=$systemdmodulesloaddir
	],[
		DEFINE_SYSTEMD='--without systemd'
	])

	ZFS_INIT_SYSTEMD=$enable_systemd
	ZFS_WANT_MODULES_LOAD_D=$enable_systemd

	AC_SUBST(DEFINE_SYSTEMD)
	AC_SUBST(systemdunitdir)
	AC_SUBST(systemdpresetdir)
	AC_SUBST(systemdgeneratordir)
	AC_SUBST(modulesloaddir)
])
m4trace:config/user-sysvinit.m4:1: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_SYSVINIT], [
	AC_ARG_ENABLE(sysvinit,
		AS_HELP_STRING([--enable-sysvinit],
		[install SysV init scripts [default: yes]]),
		[], enable_sysvinit=yes)

	ZFS_INIT_SYSV=$enable_sysvinit
])
m4trace:config/user-udev.m4:1: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_UDEV], [
	AC_MSG_CHECKING(for udev directories)
	AC_ARG_WITH(udevdir,
		AS_HELP_STRING([--with-udevdir=DIR],
		[install udev helpers @<:@default=check@:>@]),
		[udevdir=$withval],
		[udevdir=check])

	AS_IF([test "x$udevdir" = xcheck], [
		path1=/lib/udev
		path2=/usr/lib/udev
		default=$path2

		AS_IF([test -d "$path1"], [udevdir="$path1"], [
			AS_IF([test -d "$path2"], [udevdir="$path2"],
				[udevdir="$default"])
		])
	])

	AC_ARG_WITH(udevruledir,
		AS_HELP_STRING([--with-udevruledir=DIR],
		[install udev rules [[UDEVDIR/rules.d]]]),
		[udevruledir=$withval],
		[udevruledir="${udevdir}/rules.d"])

	AC_SUBST(udevdir)
	AC_SUBST(udevruledir)
	AC_MSG_RESULT([$udevdir;$udevruledir])
])
m4trace:config/user-zlib.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER_ZLIB], [
	ZFS_AC_FIND_SYSTEM_LIBRARY(ZLIB, [zlib], [zlib.h], [], [z], [compress2 uncompress crc32], [], [
	    AC_MSG_FAILURE([*** zlib-devel package required])
	])
])
m4trace:config/user.m4:4: -1- AC_DEFUN([ZFS_AC_CONFIG_USER], [
	ZFS_AC_DKMS_INHIBIT
	ZFS_AC_CONFIG_USER_GETTEXT
	ZFS_AC_CONFIG_USER_MOUNT_HELPER
	ZFS_AC_CONFIG_USER_SYSVINIT
	ZFS_AC_CONFIG_USER_DRACUT
	AM_COND_IF([BUILD_FREEBSD], [
		PKG_INSTALLDIR(['${prefix}/libdata/pkgconfig'])], [
		PKG_INSTALLDIR
	])
	ZFS_AC_CONFIG_USER_ZLIB
	AM_COND_IF([BUILD_LINUX], [
		ZFS_AC_CONFIG_USER_UDEV
		ZFS_AC_CONFIG_USER_SYSTEMD
		ZFS_AC_CONFIG_USER_LIBUDEV
		ZFS_AC_CONFIG_USER_LIBUUID
		ZFS_AC_CONFIG_USER_LIBBLKID
	])
	ZFS_AC_CONFIG_USER_LIBTIRPC
	ZFS_AC_CONFIG_USER_LIBCRYPTO
	ZFS_AC_CONFIG_USER_LIBAIO
	ZFS_AC_CONFIG_USER_LIBATOMIC
	ZFS_AC_CONFIG_USER_LIBFETCH
	ZFS_AC_CONFIG_USER_AIO_H
	ZFS_AC_CONFIG_USER_CLOCK_GETTIME
	ZFS_AC_CONFIG_USER_PAM
	ZFS_AC_CONFIG_USER_RUNSTATEDIR
	ZFS_AC_CONFIG_USER_MAKEDEV_IN_SYSMACROS
	ZFS_AC_CONFIG_USER_MAKEDEV_IN_MKDEV
	ZFS_AC_CONFIG_USER_ZFSEXEC

	AC_CHECK_FUNCS([issetugid mlockall strlcat strlcpy])

	AC_SUBST(RM)
])
m4trace:config/zfs-build.m4:1: -1- AC_DEFUN([ZFS_AC_LICENSE], [
	AC_MSG_CHECKING([zfs author])
	AC_MSG_RESULT([$ZFS_META_AUTHOR])

	AC_MSG_CHECKING([zfs license])
	AC_MSG_RESULT([$ZFS_META_LICENSE])
])
m4trace:config/zfs-build.m4:9: -1- AC_DEFUN([ZFS_AC_DEBUG_ENABLE], [
	DEBUG_CFLAGS="-Werror"
	DEBUG_CPPFLAGS="-DDEBUG -UNDEBUG"
	DEBUG_LDFLAGS=""
	DEBUG_ZFS="_with_debug"
	WITH_DEBUG="true"
	AC_DEFINE(ZFS_DEBUG, 1, [zfs debugging enabled])

	KERNEL_DEBUG_CFLAGS="-Werror"
	KERNEL_DEBUG_CPPFLAGS="-DDEBUG -UNDEBUG"
])
m4trace:config/zfs-build.m4:21: -1- AC_DEFUN([ZFS_AC_DEBUG_DISABLE], [
	DEBUG_CFLAGS=""
	DEBUG_CPPFLAGS="-UDEBUG -DNDEBUG"
	DEBUG_LDFLAGS=""
	DEBUG_ZFS="_without_debug"
	WITH_DEBUG=""

	KERNEL_DEBUG_CFLAGS=""
	KERNEL_DEBUG_CPPFLAGS="-UDEBUG -DNDEBUG"
])
m4trace:config/zfs-build.m4:40: -1- AC_DEFUN([ZFS_AC_DEBUG], [
	AC_MSG_CHECKING([whether assertion support will be enabled])
	AC_ARG_ENABLE([debug],
		[AS_HELP_STRING([--enable-debug],
		[Enable compiler and code assertions @<:@default=no@:>@])],
		[],
		[enable_debug=no])

	AS_CASE(["x$enable_debug"],
		["xyes"],
		[ZFS_AC_DEBUG_ENABLE],
		["xno"],
		[ZFS_AC_DEBUG_DISABLE],
		[AC_MSG_ERROR([Unknown option $enable_debug])])

	AS_CASE(["x$enable_invariants"],
		["xyes"],
		[],
		["xno"],
		[],
		[ZFS_AC_DEBUG_INVARIANTS_DETECT])

	AS_CASE(["x$enable_invariants"],
		["xyes"],
		[ZFS_AC_DEBUG_ENABLE],
		["xno"],
		[],
		[AC_MSG_ERROR([Unknown option $enable_invariants])])

	AC_SUBST(DEBUG_CFLAGS)
	AC_SUBST(DEBUG_CPPFLAGS)
	AC_SUBST(DEBUG_LDFLAGS)
	AC_SUBST(DEBUG_ZFS)
	AC_SUBST(WITH_DEBUG)

	AC_SUBST(KERNEL_DEBUG_CFLAGS)
	AC_SUBST(KERNEL_DEBUG_CPPFLAGS)

	AC_MSG_RESULT([$enable_debug])
])
m4trace:config/zfs-build.m4:81: -1- AC_DEFUN([ZFS_AC_DEBUGINFO_ENABLE], [
	DEBUG_CFLAGS="$DEBUG_CFLAGS -g -fno-inline $NO_IPA_SRA"

	KERNEL_DEBUG_CFLAGS="$KERNEL_DEBUG_CFLAGS -fno-inline $KERNEL_NO_IPA_SRA"
	KERNEL_MAKE="$KERNEL_MAKE CONFIG_DEBUG_INFO=y"

	DEBUGINFO_ZFS="_with_debuginfo"
])
m4trace:config/zfs-build.m4:90: -1- AC_DEFUN([ZFS_AC_DEBUGINFO_DISABLE], [
	DEBUGINFO_ZFS="_without_debuginfo"
])
m4trace:config/zfs-build.m4:94: -1- AC_DEFUN([ZFS_AC_DEBUGINFO], [
	AC_MSG_CHECKING([whether debuginfo support will be forced])
	AC_ARG_ENABLE([debuginfo],
		[AS_HELP_STRING([--enable-debuginfo],
		[Force generation of debuginfo @<:@default=no@:>@])],
		[],
		[enable_debuginfo=no])

	AS_CASE(["x$enable_debuginfo"],
		["xyes"],
		[ZFS_AC_DEBUGINFO_ENABLE],
		["xno"],
		[ZFS_AC_DEBUGINFO_DISABLE],
		[AC_MSG_ERROR([Unknown option $enable_debuginfo])])

	AC_SUBST(DEBUG_CFLAGS)
	AC_SUBST(DEBUGINFO_ZFS)

	AC_SUBST(KERNEL_DEBUG_CFLAGS)
	AC_SUBST(KERNEL_MAKE)

	AC_MSG_RESULT([$enable_debuginfo])
])
m4trace:config/zfs-build.m4:124: -1- AC_DEFUN([ZFS_AC_DEBUG_KMEM], [
	AC_MSG_CHECKING([whether basic kmem accounting is enabled])
	AC_ARG_ENABLE([debug-kmem],
		[AS_HELP_STRING([--enable-debug-kmem],
		[Enable basic kmem accounting @<:@default=no@:>@])],
		[],
		[enable_debug_kmem=no])

	AS_IF([test "x$enable_debug_kmem" = xyes], [
		KERNEL_DEBUG_CPPFLAGS="${KERNEL_DEBUG_CPPFLAGS} -DDEBUG_KMEM"
		DEBUG_KMEM_ZFS="_with_debug_kmem"
	], [
		DEBUG_KMEM_ZFS="_without_debug_kmem"
	])

	AC_SUBST(KERNEL_DEBUG_CPPFLAGS)
	AC_SUBST(DEBUG_KMEM_ZFS)

	AC_MSG_RESULT([$enable_debug_kmem])
])
m4trace:config/zfs-build.m4:154: -1- AC_DEFUN([ZFS_AC_DEBUG_KMEM_TRACKING], [
	AC_MSG_CHECKING([whether detailed kmem tracking is enabled])
	AC_ARG_ENABLE([debug-kmem-tracking],
		[AS_HELP_STRING([--enable-debug-kmem-tracking],
		[Enable detailed kmem tracking  @<:@default=no@:>@])],
		[],
		[enable_debug_kmem_tracking=no])

	AS_IF([test "x$enable_debug_kmem_tracking" = xyes], [
		KERNEL_DEBUG_CPPFLAGS="${KERNEL_DEBUG_CPPFLAGS} -DDEBUG_KMEM_TRACKING"
		DEBUG_KMEM_TRACKING_ZFS="_with_debug_kmem_tracking"
	], [
		DEBUG_KMEM_TRACKING_ZFS="_without_debug_kmem_tracking"
	])

	AC_SUBST(KERNEL_DEBUG_CPPFLAGS)
	AC_SUBST(DEBUG_KMEM_TRACKING_ZFS)

	AC_MSG_RESULT([$enable_debug_kmem_tracking])
])
m4trace:config/zfs-build.m4:175: -1- AC_DEFUN([ZFS_AC_DEBUG_INVARIANTS_DETECT_FREEBSD], [
	AS_IF([sysctl -n kern.conftxt | grep -Fqx $'options\tINVARIANTS'],
		[enable_invariants="yes"],
		[enable_invariants="no"])
])
m4trace:config/zfs-build.m4:181: -1- AC_DEFUN([ZFS_AC_DEBUG_INVARIANTS_DETECT], [
	AM_COND_IF([BUILD_FREEBSD],
		[ZFS_AC_DEBUG_INVARIANTS_DETECT_FREEBSD],
		[enable_invariants="no"])
])
m4trace:config/zfs-build.m4:193: -1- AC_DEFUN([ZFS_AC_DEBUG_INVARIANTS], [
	AC_MSG_CHECKING([whether FreeBSD kernel INVARIANTS checks are enabled])
	AC_ARG_ENABLE([invariants],
		[AS_HELP_STRING([--enable-invariants],
		[Enable FreeBSD kernel INVARIANTS checks [[default: detect]]])],
		[], [ZFS_AC_DEBUG_INVARIANTS_DETECT])

	AS_IF([test "x$enable_invariants" = xyes],
		[WITH_INVARIANTS="true"],
		[WITH_INVARIANTS=""])
	AC_SUBST(WITH_INVARIANTS)

	AC_MSG_RESULT([$enable_invariants])
])
m4trace:config/zfs-build.m4:208: -1- AC_DEFUN([ZFS_AC_CONFIG_ALWAYS], [
	AX_COUNT_CPUS([])
	AC_SUBST(CPU_COUNT)

	ZFS_AC_CONFIG_ALWAYS_CC_NO_CLOBBERED
	ZFS_AC_CONFIG_ALWAYS_CC_INFINITE_RECURSION
	ZFS_AC_CONFIG_ALWAYS_KERNEL_CC_INFINITE_RECURSION
	ZFS_AC_CONFIG_ALWAYS_CC_IMPLICIT_FALLTHROUGH
	ZFS_AC_CONFIG_ALWAYS_CC_FRAME_LARGER_THAN
	ZFS_AC_CONFIG_ALWAYS_CC_NO_FORMAT_TRUNCATION
	ZFS_AC_CONFIG_ALWAYS_CC_NO_FORMAT_ZERO_LENGTH
	ZFS_AC_CONFIG_ALWAYS_CC_FORMAT_OVERFLOW
	ZFS_AC_CONFIG_ALWAYS_CC_NO_OMIT_FRAME_POINTER
	ZFS_AC_CONFIG_ALWAYS_CC_NO_IPA_SRA
	ZFS_AC_CONFIG_ALWAYS_KERNEL_CC_NO_IPA_SRA
	ZFS_AC_CONFIG_ALWAYS_CC_ASAN
	ZFS_AC_CONFIG_ALWAYS_CC_UBSAN
	ZFS_AC_CONFIG_ALWAYS_TOOLCHAIN_SIMD
	ZFS_AC_CONFIG_ALWAYS_SYSTEM
	ZFS_AC_CONFIG_ALWAYS_ARCH
	ZFS_AC_CONFIG_ALWAYS_PYTHON
	ZFS_AC_CONFIG_ALWAYS_PYZFS
	ZFS_AC_CONFIG_ALWAYS_SED
	ZFS_AC_CONFIG_ALWAYS_CPPCHECK
	ZFS_AC_CONFIG_ALWAYS_SHELLCHECK
	ZFS_AC_CONFIG_ALWAYS_PARALLEL
])
m4trace:config/zfs-build.m4:236: -1- AC_DEFUN([ZFS_AC_CONFIG], [

        dnl # Remove the previous build test directory.
        rm -Rf build

	ZFS_CONFIG=all
	AC_ARG_WITH([config],
		AS_HELP_STRING([--with-config=CONFIG],
		[Config file 'kernel|user|all|srpm']),
		[ZFS_CONFIG="$withval"])
	AC_ARG_ENABLE([linux-builtin],
		[AS_HELP_STRING([--enable-linux-builtin],
		[Configure for builtin in-tree kernel modules @<:@default=no@:>@])],
		[],
		[enable_linux_builtin=no])

	AC_MSG_CHECKING([zfs config])
	AC_MSG_RESULT([$ZFS_CONFIG]);
	AC_SUBST(ZFS_CONFIG)

	ZFS_AC_CONFIG_ALWAYS

	AM_COND_IF([BUILD_LINUX], [
		AC_ARG_VAR([TEST_JOBS], [simultaneous jobs during configure])
		if test "x$ac_cv_env_TEST_JOBS_set" != "xset"; then
			TEST_JOBS=$CPU_COUNT
		fi
		AC_SUBST(TEST_JOBS)
	])

	ZFS_INIT_SYSV=
	ZFS_INIT_SYSTEMD=
	ZFS_WANT_MODULES_LOAD_D=

	case "$ZFS_CONFIG" in
		kernel) ZFS_AC_CONFIG_KERNEL ;;
		user)	ZFS_AC_CONFIG_USER   ;;
		all)    ZFS_AC_CONFIG_USER
			ZFS_AC_CONFIG_KERNEL ;;
		dist)                        ;;
		srpm)                        ;;
		*)
		AC_MSG_RESULT([Error!])
		AC_MSG_ERROR([Bad value "$ZFS_CONFIG" for --with-config,
		              user kernel|user|all|srpm]) ;;
	esac

	AM_CONDITIONAL([INIT_SYSV],           [test "x$ZFS_INIT_SYSV" = "xyes"])
	AM_CONDITIONAL([INIT_SYSTEMD],        [test "x$ZFS_INIT_SYSTEMD" = "xyes"])
	AM_CONDITIONAL([WANT_MODULES_LOAD_D], [test "x$ZFS_WANT_MODULES_LOAD_D" = "xyes"])

	AM_CONDITIONAL([CONFIG_USER],
	    [test "$ZFS_CONFIG" = user -o "$ZFS_CONFIG" = all])
	AM_CONDITIONAL([CONFIG_KERNEL],
	    [test "$ZFS_CONFIG" = kernel -o "$ZFS_CONFIG" = all] &&
	    [test "x$enable_linux_builtin" != xyes ])
	AM_CONDITIONAL([CONFIG_QAT],
	    [test "$ZFS_CONFIG" = kernel -o "$ZFS_CONFIG" = all] &&
	    [test "x$qatsrc" != x ])
	AM_CONDITIONAL([WANT_DEVNAME2DEVID], [test "x$user_libudev" = xyes ])
	AM_CONDITIONAL([WANT_MMAP_LIBAIO], [test "x$user_libaio" = xyes ])
	AM_CONDITIONAL([PAM_ZFS_ENABLED], [test "x$enable_pam" = xyes])
])
m4trace:config/zfs-build.m4:310: -1- AC_DEFUN([ZFS_AC_RPM], [
	RPM=rpm
	RPMBUILD=rpmbuild

	AC_MSG_CHECKING([whether $RPM is available])
	AS_IF([tmp=$($RPM --version 2>/dev/null)], [
		RPM_VERSION=$(echo $tmp | $AWK '/RPM/ { print $[3] }')
		HAVE_RPM=yes
		AC_MSG_RESULT([$HAVE_RPM ($RPM_VERSION)])
	],[
		HAVE_RPM=no
		AC_MSG_RESULT([$HAVE_RPM])
	])

	AC_MSG_CHECKING([whether $RPMBUILD is available])
	AS_IF([tmp=$($RPMBUILD --version 2>/dev/null)], [
		RPMBUILD_VERSION=$(echo $tmp | $AWK '/RPM/ { print $[3] }')
		HAVE_RPMBUILD=yes
		AC_MSG_RESULT([$HAVE_RPMBUILD ($RPMBUILD_VERSION)])
	],[
		HAVE_RPMBUILD=no
		AC_MSG_RESULT([$HAVE_RPMBUILD])
	])

	RPM_DEFINE_COMMON='--define "$(DEBUG_ZFS) 1"'
	RPM_DEFINE_COMMON=${RPM_DEFINE_COMMON}' --define "$(DEBUGINFO_ZFS) 1"'
	RPM_DEFINE_COMMON=${RPM_DEFINE_COMMON}' --define "$(DEBUG_KMEM_ZFS) 1"'
	RPM_DEFINE_COMMON=${RPM_DEFINE_COMMON}' --define "$(DEBUG_KMEM_TRACKING_ZFS) 1"'
	RPM_DEFINE_COMMON=${RPM_DEFINE_COMMON}' --define "$(ASAN_ZFS) 1"'
	RPM_DEFINE_COMMON=${RPM_DEFINE_COMMON}' --define "$(UBSAN_ZFS) 1"'

	AS_IF([test "x$enable_debuginfo" = xyes], [
		RPM_DEFINE_COMMON=${RPM_DEFINE_COMMON}' --define "__strip /bin/true"'
	])

	RPM_DEFINE_UTIL=' --define "_initconfdir $(initconfdir)"'

	dnl # Make the next three RPM_DEFINE_UTIL additions conditional, since
	dnl # their values may not be set when running:
	dnl #
	dnl #	./configure --with-config=srpm
	dnl #
	AS_IF([test -n "$dracutdir" ], [
		RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' --define "_dracutdir $(dracutdir)"'
	])
	AS_IF([test -n "$udevdir" ], [
		RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' --define "_udevdir $(udevdir)"'
	])
	AS_IF([test -n "$udevruledir" ], [
		RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' --define "_udevruledir $(udevruledir)"'
	])
	RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' $(DEFINE_SYSTEMD)'
	RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' $(DEFINE_PYZFS)'
	RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' $(DEFINE_PAM)'
	RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' $(DEFINE_PYTHON_VERSION)'
	RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' $(DEFINE_PYTHON_PKG_VERSION)'

	dnl # Override default lib directory on Debian/Ubuntu systems.  The
	dnl # provided /usr/lib/rpm/platform/<arch>/macros files do not
	dnl # specify the correct path for multiarch systems as described
	dnl # by the packaging guidelines.
	dnl #
	dnl # https://wiki.ubuntu.com/MultiarchSpec
	dnl # https://wiki.debian.org/Multiarch/Implementation
	dnl #
	AS_IF([test "$DEFAULT_PACKAGE" = "deb"], [
		MULTIARCH_LIBDIR="lib/$(dpkg-architecture -qDEB_HOST_MULTIARCH)"
		RPM_DEFINE_UTIL=${RPM_DEFINE_UTIL}' --define "_lib $(MULTIARCH_LIBDIR)"'
		AC_SUBST(MULTIARCH_LIBDIR)
	])

	dnl # Make RPM_DEFINE_KMOD additions conditional on CONFIG_KERNEL,
	dnl # since the values will not be set otherwise. The spec files
	dnl # provide defaults for them.
	dnl #
	RPM_DEFINE_KMOD='--define "_wrong_version_format_terminate_build 0"'
	AM_COND_IF([CONFIG_KERNEL], [
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kernels $(LINUX_VERSION)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "ksrc $(LINUX)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kobj $(LINUX_OBJ)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kernel_cc KERNEL_CC=$(KERNEL_CC)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kernel_ld KERNEL_LD=$(KERNEL_LD)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kernel_llvm KERNEL_LLVM=$(KERNEL_LLVM)"'
	])

	RPM_DEFINE_DKMS=''

	SRPM_DEFINE_COMMON='--define "build_src_rpm 1"'
	SRPM_DEFINE_UTIL=
	SRPM_DEFINE_KMOD=
	SRPM_DEFINE_DKMS=

	RPM_SPEC_DIR="rpm/generic"
	AC_ARG_WITH([spec],
		AS_HELP_STRING([--with-spec=SPEC],
		[Spec files 'generic|redhat']),
		[RPM_SPEC_DIR="rpm/$withval"])

	AC_MSG_CHECKING([whether spec files are available])
	AC_MSG_RESULT([yes ($RPM_SPEC_DIR/*.spec.in)])

	AC_SUBST(HAVE_RPM)
	AC_SUBST(RPM)
	AC_SUBST(RPM_VERSION)

	AC_SUBST(HAVE_RPMBUILD)
	AC_SUBST(RPMBUILD)
	AC_SUBST(RPMBUILD_VERSION)

	AC_SUBST(RPM_SPEC_DIR)
	AC_SUBST(RPM_DEFINE_UTIL)
	AC_SUBST(RPM_DEFINE_KMOD)
	AC_SUBST(RPM_DEFINE_DKMS)
	AC_SUBST(RPM_DEFINE_COMMON)
	AC_SUBST(SRPM_DEFINE_UTIL)
	AC_SUBST(SRPM_DEFINE_KMOD)
	AC_SUBST(SRPM_DEFINE_DKMS)
	AC_SUBST(SRPM_DEFINE_COMMON)
])
m4trace:config/zfs-build.m4:435: -1- AC_DEFUN([ZFS_AC_DPKG], [
	DPKG=dpkg
	DPKGBUILD=dpkg-buildpackage

	AC_MSG_CHECKING([whether $DPKG is available])
	AS_IF([tmp=$($DPKG --version 2>/dev/null)], [
		DPKG_VERSION=$(echo $tmp | $AWK '/Debian/ { print $[7] }')
		HAVE_DPKG=yes
		AC_MSG_RESULT([$HAVE_DPKG ($DPKG_VERSION)])
	],[
		HAVE_DPKG=no
		AC_MSG_RESULT([$HAVE_DPKG])
	])

	AC_MSG_CHECKING([whether $DPKGBUILD is available])
	AS_IF([tmp=$($DPKGBUILD --version 2>/dev/null)], [
		DPKGBUILD_VERSION=$(echo $tmp | \
		    $AWK '/Debian/ { print $[4] }' | cut -f-4 -d'.')
		HAVE_DPKGBUILD=yes
		AC_MSG_RESULT([$HAVE_DPKGBUILD ($DPKGBUILD_VERSION)])
	],[
		HAVE_DPKGBUILD=no
		AC_MSG_RESULT([$HAVE_DPKGBUILD])
	])

	AC_SUBST(HAVE_DPKG)
	AC_SUBST(DPKG)
	AC_SUBST(DPKG_VERSION)

	AC_SUBST(HAVE_DPKGBUILD)
	AC_SUBST(DPKGBUILD)
	AC_SUBST(DPKGBUILD_VERSION)
	AC_SUBST([CFGOPTS], ["$CFGOPTS"])
])
m4trace:config/zfs-build.m4:476: -1- AC_DEFUN([ZFS_AC_ALIEN], [
	ALIEN=alien

	AC_MSG_CHECKING([whether $ALIEN is available])
	AS_IF([tmp=$($ALIEN --version 2>/dev/null)], [
		ALIEN_VERSION=$(echo $tmp | $AWK '{ print $[3] }')
		ALIEN_MAJOR=$(echo ${ALIEN_VERSION} | $AWK -F'.' '{ print $[1] }')
		ALIEN_MINOR=$(echo ${ALIEN_VERSION} | $AWK -F'.' '{ print $[2] }')
		ALIEN_POINT=$(echo ${ALIEN_VERSION} | $AWK -F'.' '{ print $[3] }')
		HAVE_ALIEN=yes
		AC_MSG_RESULT([$HAVE_ALIEN ($ALIEN_VERSION)])
	],[
		HAVE_ALIEN=no
		AC_MSG_RESULT([$HAVE_ALIEN])
	])

	AC_SUBST(HAVE_ALIEN)
	AC_SUBST(ALIEN)
	AC_SUBST(ALIEN_VERSION)
	AC_SUBST(ALIEN_MAJOR)
	AC_SUBST(ALIEN_MINOR)
	AC_SUBST(ALIEN_POINT)
])
m4trace:config/zfs-build.m4:504: -1- AC_DEFUN([ZFS_AC_DEFAULT_PACKAGE], [
	AC_MSG_CHECKING([os distribution])
	AC_ARG_WITH([vendor],
		[AS_HELP_STRING([--with-vendor],
			[Distribution vendor @<:@default=check@:>@])],
		[with_vendor=$withval],
		[with_vendor=check])
	AS_IF([test "x$with_vendor" = "xcheck"],[
		if test -f /etc/toss-release ; then
			VENDOR=toss ;
		elif test -f /etc/fedora-release ; then
			VENDOR=fedora ;
		elif test -f /etc/redhat-release ; then
			VENDOR=redhat ;
		elif test -f /etc/gentoo-release ; then
			VENDOR=gentoo ;
		elif test -f /etc/arch-release ; then
			VENDOR=arch ;
		elif test -f /etc/SuSE-release ; then
			VENDOR=sles ;
		elif test -f /etc/slackware-version ; then
			VENDOR=slackware ;
		elif test -f /etc/lunar.release ; then
			VENDOR=lunar ;
		elif test -f /etc/lsb-release ; then
			VENDOR=ubuntu ;
		elif test -f /etc/debian_version ; then
			VENDOR=debian ;
		elif test -f /etc/alpine-release ; then
			VENDOR=alpine ;
		elif test -f /bin/freebsd-version ; then
			VENDOR=freebsd ;
		elif test -f /etc/openEuler-release ; then
			VENDOR=openeuler ;
		else
			VENDOR= ;
		fi],
		[ test "x${with_vendor}" != x],[
			VENDOR="$with_vendor" ],
		[ VENDOR= ; ]
	)
	AC_MSG_RESULT([$VENDOR])
	AC_SUBST(VENDOR)

	AC_MSG_CHECKING([default package type])
	case "$VENDOR" in
		toss)       DEFAULT_PACKAGE=rpm  ;;
		redhat)     DEFAULT_PACKAGE=rpm  ;;
		fedora)     DEFAULT_PACKAGE=rpm  ;;
		gentoo)     DEFAULT_PACKAGE=tgz  ;;
		alpine)     DEFAULT_PACKAGE=tgz  ;;
		arch)       DEFAULT_PACKAGE=tgz  ;;
		sles)       DEFAULT_PACKAGE=rpm  ;;
		slackware)  DEFAULT_PACKAGE=tgz  ;;
		lunar)      DEFAULT_PACKAGE=tgz  ;;
		ubuntu)     DEFAULT_PACKAGE=deb  ;;
		debian)     DEFAULT_PACKAGE=deb  ;;
		freebsd)    DEFAULT_PACKAGE=pkg  ;;
		openeuler)  DEFAULT_PACKAGE=rpm  ;;
		*)          DEFAULT_PACKAGE=rpm  ;;
	esac
	AC_MSG_RESULT([$DEFAULT_PACKAGE])
	AC_SUBST(DEFAULT_PACKAGE)

	AC_MSG_CHECKING([default init directory])
	case "$VENDOR" in
		freebsd)    initdir=$sysconfdir/rc.d  ;;
		*)          initdir=$sysconfdir/init.d;;
	esac
	AC_MSG_RESULT([$initdir])
	AC_SUBST(initdir)

	AC_MSG_CHECKING([default shell])
	case "$VENDOR" in
		gentoo)     DEFAULT_INIT_SHELL="/sbin/openrc-run";;
		alpine)     DEFAULT_INIT_SHELL="/sbin/openrc-run";;
		*)          DEFAULT_INIT_SHELL="/bin/sh"         ;;
	esac

	AC_MSG_RESULT([$DEFAULT_INIT_SHELL])
	AC_SUBST(DEFAULT_INIT_SHELL)

	AC_MSG_CHECKING([default nfs server init script])
	AS_IF([test "$VENDOR" = "debian"],
		[DEFAULT_INIT_NFS_SERVER="nfs-kernel-server"],
		[DEFAULT_INIT_NFS_SERVER="nfs"]
	)
	AC_MSG_RESULT([$DEFAULT_INIT_NFS_SERVER])
	AC_SUBST(DEFAULT_INIT_NFS_SERVER)

	AC_MSG_CHECKING([default init config directory])
	case "$VENDOR" in
		alpine)     initconfdir=/etc/conf.d    ;;
		gentoo)     initconfdir=/etc/conf.d    ;;
		toss)       initconfdir=/etc/sysconfig ;;
		redhat)     initconfdir=/etc/sysconfig ;;
		fedora)     initconfdir=/etc/sysconfig ;;
		sles)       initconfdir=/etc/sysconfig ;;
		openeuler)  initconfdir=/etc/sysconfig ;;
		ubuntu)     initconfdir=/etc/default   ;;
		debian)     initconfdir=/etc/default   ;;
		freebsd)    initconfdir=$sysconfdir/rc.conf.d;;
		*)          initconfdir=/etc/default   ;;
	esac
	AC_MSG_RESULT([$initconfdir])
	AC_SUBST(initconfdir)

	AC_MSG_CHECKING([whether initramfs-tools is available])
	if test -d /usr/share/initramfs-tools ; then
		RPM_DEFINE_INITRAMFS='--define "_initramfs 1"'
		AC_MSG_RESULT([yes])
	else
		RPM_DEFINE_INITRAMFS=''
		AC_MSG_RESULT([no])
	fi
	AC_SUBST(RPM_DEFINE_INITRAMFS)
])
m4trace:config/zfs-build.m4:625: -1- AC_DEFUN([ZFS_AC_PACKAGE], [
	ZFS_AC_DEFAULT_PACKAGE
	AS_IF([test x$VENDOR != xfreebsd], [
		ZFS_AC_RPM
		ZFS_AC_DPKG
		ZFS_AC_ALIEN
	])
])
m4trace:config/zfs-meta.m4:34: -1- AC_DEFUN([ZFS_AC_META], [

	AH_BOTTOM([
#undef PACKAGE
#undef PACKAGE_BUGREPORT
#undef PACKAGE_NAME
#undef PACKAGE_STRING
#undef PACKAGE_TARNAME
#undef PACKAGE_VERSION
#undef STDC_HEADERS
#undef VERSION])

	AC_PROG_AWK
	AC_MSG_CHECKING([metadata])

	META="$srcdir/META"
	_zfs_ac_meta_type="none"
	if test -f "$META"; then
		_zfs_ac_meta_type="META file"
		_dpkg_parsechangelog=$(dpkg-parsechangelog 2>/dev/null)

		ZFS_META_NAME=_ZFS_AC_META_GETVAL([(Name|Project|Package)]);
		if test -n "$ZFS_META_NAME"; then
			AC_DEFINE_UNQUOTED([ZFS_META_NAME], ["$ZFS_META_NAME"],
				[Define the project name.]
			)
			AC_SUBST([ZFS_META_NAME])
		fi

		ZFS_META_VERSION=_ZFS_AC_META_GETVAL([Version]);
		if test -n "$ZFS_META_VERSION"; then
			AC_DEFINE_UNQUOTED([ZFS_META_VERSION],
			    ["$ZFS_META_VERSION"],
			    [Define the project version.])
			AC_DEFINE_UNQUOTED([SPL_META_VERSION],
			    [ZFS_META_VERSION],
			    [Defined for legacy compatibility.])
			AC_SUBST([ZFS_META_VERSION])
		fi

		if test -n "${_dpkg_parsechangelog}"; then
			_dpkg_version=$(echo "${_dpkg_parsechangelog}" \
				| $AWK '$[]1 == "Version:" { print $[]2; }' | cut -d- -f1)
			if test "${_dpkg_version}" != "$ZFS_META_VERSION"; then
				AC_MSG_ERROR([
	*** Version $ZFS_META_VERSION in the META file is different than
	*** version $_dpkg_version in the debian/changelog file. DKMS and DEB
	*** packaging require that these files have the same version.
				])
			fi
		fi

		ZFS_META_RELEASE=_ZFS_AC_META_GETVAL([Release]);

		if test -n "${_dpkg_parsechangelog}"; then
			_dpkg_release=$(echo "${_dpkg_parsechangelog}" \
				| $AWK '$[]1 == "Version:" { print $[]2; }' \
				| cut -d- -f2-)
			if test -n "${_dpkg_release}"; then
				ZFS_META_RELEASE=${_dpkg_release}
				_zfs_ac_meta_type="dpkg-parsechangelog"
			fi
		elif test ! -f ".nogitrelease" && git rev-parse --git-dir > /dev/null 2>&1; then
			_match="${ZFS_META_NAME}-${ZFS_META_VERSION}"
			_alias=$(git describe --match=${_match} 2>/dev/null)
			_release=$(echo ${_alias}|sed "s/${ZFS_META_NAME}//"|cut -f3- -d'-'|tr - _)
			if test -n "${_release}"; then
				ZFS_META_RELEASE=${_release}
				_zfs_ac_meta_type="git describe"
			else
				_match="${ZFS_META_NAME}-${ZFS_META_VERSION}-${ZFS_META_RELEASE}"
	                        _alias=$(git describe --match=${_match} 2>/dev/null)
				_release=$(echo ${_alias}|sed 's/${ZFS_META_NAME}//'|cut -f3- -d'-'|tr - _)
				if test -n "${_release}"; then
					ZFS_META_RELEASE=${_release}
					_zfs_ac_meta_type="git describe"
				fi
			fi
		fi

		if test -n "$ZFS_META_RELEASE"; then
			AC_DEFINE_UNQUOTED([ZFS_META_RELEASE],
			     ["$ZFS_META_RELEASE"],
			     [Define the project release.])
			AC_DEFINE_UNQUOTED([SPL_META_RELEASE],
			    [ZFS_META_RELEASE],
			    [Defined for legacy compatibility.])
			AC_SUBST([ZFS_META_RELEASE])

			RELEASE="$ZFS_META_RELEASE"
			AC_SUBST([RELEASE])
		fi

		ZFS_META_LICENSE=_ZFS_AC_META_GETVAL([License]);
		if test -n "$ZFS_META_LICENSE"; then
			AC_DEFINE_UNQUOTED([ZFS_META_LICENSE], ["$ZFS_META_LICENSE"],
				[Define the project license.]
			)
			AC_SUBST([ZFS_META_LICENSE])
		fi

		if test -n "$ZFS_META_NAME" -a -n "$ZFS_META_VERSION"; then
				ZFS_META_ALIAS="$ZFS_META_NAME-$ZFS_META_VERSION"
				test -n "$ZFS_META_RELEASE" && 
				        ZFS_META_ALIAS="$ZFS_META_ALIAS-$ZFS_META_RELEASE"
				AC_DEFINE_UNQUOTED([ZFS_META_ALIAS],
				    ["$ZFS_META_ALIAS"],
				    [Define the project alias string.])
				AC_DEFINE_UNQUOTED([SPL_META_ALIAS],
				    [ZFS_META_ALIAS],
				    [Defined for legacy compatibility.])
				AC_SUBST([ZFS_META_ALIAS])
		fi

		ZFS_META_DATA=_ZFS_AC_META_GETVAL([Date]);
		if test -n "$ZFS_META_DATA"; then
			AC_DEFINE_UNQUOTED([ZFS_META_DATA], ["$ZFS_META_DATA"],
				[Define the project release date.] 
			)
			AC_SUBST([ZFS_META_DATA])
		fi

		ZFS_META_AUTHOR=_ZFS_AC_META_GETVAL([Author]);
		if test -n "$ZFS_META_AUTHOR"; then
			AC_DEFINE_UNQUOTED([ZFS_META_AUTHOR], ["$ZFS_META_AUTHOR"],
				[Define the project author.]
			)
			AC_SUBST([ZFS_META_AUTHOR])
		fi

		ZFS_META_KVER_MIN=_ZFS_AC_META_GETVAL([Linux-Minimum]);
		if test -n "$ZFS_META_KVER_MIN"; then
			AC_DEFINE_UNQUOTED([ZFS_META_KVER_MIN],
			    ["$ZFS_META_KVER_MIN"],
			    [Define the minimum compatible kernel version.]
			)
			AC_SUBST([ZFS_META_KVER_MIN])
		fi

		ZFS_META_KVER_MAX=_ZFS_AC_META_GETVAL([Linux-Maximum]);
		if test -n "$ZFS_META_KVER_MAX"; then
			AC_DEFINE_UNQUOTED([ZFS_META_KVER_MAX],
			    ["$ZFS_META_KVER_MAX"],
			    [Define the maximum compatible kernel version.]
			)
			AC_SUBST([ZFS_META_KVER_MAX])
		fi

		m4_pattern_allow([^LT_(CURRENT|REVISION|AGE)$])
		ZFS_META_LT_CURRENT=_ZFS_AC_META_GETVAL([LT_Current]);
		ZFS_META_LT_REVISION=_ZFS_AC_META_GETVAL([LT_Revision]);
		ZFS_META_LT_AGE=_ZFS_AC_META_GETVAL([LT_Age]);
		if test -n "$ZFS_META_LT_CURRENT" \
				 -o -n "$ZFS_META_LT_REVISION" \
				 -o -n "$ZFS_META_LT_AGE"; then
			test -n "$ZFS_META_LT_CURRENT" || ZFS_META_LT_CURRENT="0"
			test -n "$ZFS_META_LT_REVISION" || ZFS_META_LT_REVISION="0"
			test -n "$ZFS_META_LT_AGE" || ZFS_META_LT_AGE="0"
			AC_DEFINE_UNQUOTED([ZFS_META_LT_CURRENT],
				["$ZFS_META_LT_CURRENT"],
				[Define the libtool library 'current'
				 version information.]
			)
			AC_DEFINE_UNQUOTED([ZFS_META_LT_REVISION],
				["$ZFS_META_LT_REVISION"],
				[Define the libtool library 'revision'
				 version information.]
			)
			AC_DEFINE_UNQUOTED([ZFS_META_LT_AGE], ["$ZFS_META_LT_AGE"],
				[Define the libtool library 'age' 
				 version information.]
			)
			AC_SUBST([ZFS_META_LT_CURRENT])
			AC_SUBST([ZFS_META_LT_REVISION])
			AC_SUBST([ZFS_META_LT_AGE])
		fi
	fi

	AC_MSG_RESULT([$_zfs_ac_meta_type])
	
])
m4trace:config/zfs-meta.m4:228: -1- AC_DEFUN([_ZFS_AC_META_GETVAL], [`$AWK -F ':@<:@ \t@:>@+' '$[]1 ~ /^ *$1$/ { print $[]2; exit }' $META`])
m4trace:configure.ac:33: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:33: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:33: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:33: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:33: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:33: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:33: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:33: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^runstatedir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:33: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:37: -1- ZFS_AC_META
m4trace:configure.ac:37: -1- m4_pattern_allow([^AWK$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([(Name|Project|Package)])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_NAME$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_NAME$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([Version])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_VERSION$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^SPL_META_VERSION$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_VERSION$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([Release])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_RELEASE$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^SPL_META_RELEASE$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_RELEASE$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^RELEASE$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([License])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_LICENSE$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_LICENSE$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_ALIAS$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^SPL_META_ALIAS$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_ALIAS$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([Date])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_DATA$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_DATA$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([Author])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_AUTHOR$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_AUTHOR$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([Linux-Minimum])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_KVER_MIN$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_KVER_MIN$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([Linux-Maximum])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_KVER_MAX$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_KVER_MAX$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^LT_(CURRENT|REVISION|AGE)$])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([LT_Current])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([LT_Revision])
m4trace:configure.ac:37: -1- _ZFS_AC_META_GETVAL([LT_Age])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_LT_CURRENT$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_LT_REVISION$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_LT_AGE$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_LT_CURRENT$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_LT_REVISION$])
m4trace:configure.ac:37: -1- m4_pattern_allow([^ZFS_META_LT_AGE$])
m4trace:configure.ac:39: -1- AC_CONFIG_MACRO_DIR([config])
m4trace:configure.ac:39: -1- AC_CONFIG_MACRO_DIR_TRACE([config])
m4trace:configure.ac:40: -1- m4_pattern_allow([^build$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^build_cpu$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^build_vendor$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^build_os$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^host$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^host_cpu$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^host_vendor$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^host_os$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^target$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^target_cpu$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^target_vendor$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^target_os$])
m4trace:configure.ac:41: -1- AM_MAINTAINER_MODE
m4trace:configure.ac:41: -1- AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])
m4trace:configure.ac:41: -1- m4_pattern_allow([^MAINTAINER_MODE_TRUE$])
m4trace:configure.ac:41: -1- m4_pattern_allow([^MAINTAINER_MODE_FALSE$])
m4trace:configure.ac:41: -1- _AM_SUBST_NOTMAKE([MAINTAINER_MODE_TRUE])
m4trace:configure.ac:41: -1- _AM_SUBST_NOTMAKE([MAINTAINER_MODE_FALSE])
m4trace:configure.ac:41: -1- m4_pattern_allow([^MAINT$])
m4trace:configure.ac:42: -1- AM_SILENT_RULES([yes])
m4trace:configure.ac:42: -1- m4_pattern_allow([^AM_V$])
m4trace:configure.ac:42: -1- AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:42: -1- _AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:42: -1- m4_pattern_allow([^AM_DEFAULT_V$])
m4trace:configure.ac:42: -1- AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:42: -1- _AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:42: -1- m4_pattern_allow([^AM_DEFAULT_VERBOSITY$])
m4trace:configure.ac:42: -1- m4_pattern_allow([^AM_BACKSLASH$])
m4trace:configure.ac:42: -1- _AM_SUBST_NOTMAKE([AM_BACKSLASH])
m4trace:configure.ac:43: -1- AM_INIT_AUTOMAKE([subdir-objects foreign])
m4trace:configure.ac:43: -1- m4_pattern_allow([^AM_[A-Z]+FLAGS$])
m4trace:configure.ac:43: -1- AM_SET_CURRENT_AUTOMAKE_VERSION
m4trace:configure.ac:43: -1- AM_AUTOMAKE_VERSION([1.16.5])
m4trace:configure.ac:43: -1- _AM_AUTOCONF_VERSION([2.71])
m4trace:configure.ac:43: -1- m4_pattern_allow([^INSTALL_PROGRAM$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^INSTALL_SCRIPT$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^INSTALL_DATA$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^am__isrc$])
m4trace:configure.ac:43: -1- _AM_SUBST_NOTMAKE([am__isrc])
m4trace:configure.ac:43: -1- m4_pattern_allow([^CYGPATH_W$])
m4trace:configure.ac:43: -1- _AM_SET_OPTIONS([subdir-objects foreign])
m4trace:configure.ac:43: -1- _AM_SET_OPTION([subdir-objects])
m4trace:configure.ac:43: -2- _AM_MANGLE_OPTION([subdir-objects])
m4trace:configure.ac:43: -1- _AM_SET_OPTION([foreign])
m4trace:configure.ac:43: -2- _AM_MANGLE_OPTION([foreign])
m4trace:configure.ac:43: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:43: -1- _AM_IF_OPTION([no-define], [], [AC_DEFINE_UNQUOTED([PACKAGE], ["$PACKAGE"], [Name of package])
 AC_DEFINE_UNQUOTED([VERSION], ["$VERSION"], [Version number of package])])
m4trace:configure.ac:43: -2- _AM_MANGLE_OPTION([no-define])
m4trace:configure.ac:43: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:43: -1- AM_SANITY_CHECK
m4trace:configure.ac:43: -1- AM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])
m4trace:configure.ac:43: -1- AM_MISSING_HAS_RUN
m4trace:configure.ac:43: -1- AM_AUX_DIR_EXPAND
m4trace:configure.ac:43: -1- m4_pattern_allow([^ACLOCAL$])
m4trace:configure.ac:43: -1- AM_MISSING_PROG([AUTOCONF], [autoconf])
m4trace:configure.ac:43: -1- m4_pattern_allow([^AUTOCONF$])
m4trace:configure.ac:43: -1- AM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])
m4trace:configure.ac:43: -1- m4_pattern_allow([^AUTOMAKE$])
m4trace:configure.ac:43: -1- AM_MISSING_PROG([AUTOHEADER], [autoheader])
m4trace:configure.ac:43: -1- m4_pattern_allow([^AUTOHEADER$])
m4trace:configure.ac:43: -1- AM_MISSING_PROG([MAKEINFO], [makeinfo])
m4trace:configure.ac:43: -1- m4_pattern_allow([^MAKEINFO$])
m4trace:configure.ac:43: -1- AM_PROG_INSTALL_SH
m4trace:configure.ac:43: -1- m4_pattern_allow([^install_sh$])
m4trace:configure.ac:43: -1- AM_PROG_INSTALL_STRIP
m4trace:configure.ac:43: -1- m4_pattern_allow([^STRIP$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^INSTALL_STRIP_PROGRAM$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^MKDIR_P$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^mkdir_p$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^SET_MAKE$])
m4trace:configure.ac:43: -1- AM_SET_LEADING_DOT
m4trace:configure.ac:43: -1- m4_pattern_allow([^am__leading_dot$])
m4trace:configure.ac:43: -1- _AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])], [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
			     [_AM_PROG_TAR([v7])])])
m4trace:configure.ac:43: -2- _AM_MANGLE_OPTION([tar-ustar])
m4trace:configure.ac:43: -1- _AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])], [_AM_PROG_TAR([v7])])
m4trace:configure.ac:43: -2- _AM_MANGLE_OPTION([tar-pax])
m4trace:configure.ac:43: -1- _AM_PROG_TAR([v7])
m4trace:configure.ac:43: -1- m4_pattern_allow([^AMTAR$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^am__tar$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^am__untar$])
m4trace:configure.ac:43: -1- _AM_IF_OPTION([no-dependencies], [], [AC_PROVIDE_IFELSE([AC_PROG_CC],
		  [_AM_DEPENDENCIES([CC])],
		  [m4_define([AC_PROG_CC],
			     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_CXX],
		  [_AM_DEPENDENCIES([CXX])],
		  [m4_define([AC_PROG_CXX],
			     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJC],
		  [_AM_DEPENDENCIES([OBJC])],
		  [m4_define([AC_PROG_OBJC],
			     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],
		  [_AM_DEPENDENCIES([OBJCXX])],
		  [m4_define([AC_PROG_OBJCXX],
			     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl
])
m4trace:configure.ac:43: -2- _AM_MANGLE_OPTION([no-dependencies])
m4trace:configure.ac:43: -1- m4_pattern_allow([^CTAGS$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^ETAGS$])
m4trace:configure.ac:43: -1- m4_pattern_allow([^CSCOPE$])
m4trace:configure.ac:49: -1- LT_INIT
m4trace:configure.ac:49: -1- m4_pattern_forbid([^_?LT_[A-Z_]+$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])
m4trace:configure.ac:49: -1- LTOPTIONS_VERSION
m4trace:configure.ac:49: -1- LTSUGAR_VERSION
m4trace:configure.ac:49: -1- LTVERSION_VERSION
m4trace:configure.ac:49: -1- LTOBSOLETE_VERSION
m4trace:configure.ac:49: -1- _LT_PROG_LTMAIN
m4trace:configure.ac:49: -1- m4_pattern_allow([^LIBTOOL$])
m4trace:configure.ac:49: -1- _LT_PREPARE_SED_QUOTE_VARS
m4trace:configure.ac:49: -1- _LT_PROG_ECHO_BACKSLASH
m4trace:configure.ac:49: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:49: -1- _AM_PROG_CC_C_O
m4trace:configure.ac:49: -1- AM_RUN_LOG([$CC -c conftest.$ac_ext -o conftest2.$ac_objext])
m4trace:configure.ac:49: -1- _AM_DEPENDENCIES([CC])
m4trace:configure.ac:49: -1- AM_SET_DEPDIR
m4trace:configure.ac:49: -1- m4_pattern_allow([^DEPDIR$])
m4trace:configure.ac:49: -1- AM_OUTPUT_DEPENDENCY_COMMANDS
m4trace:configure.ac:49: -1- AM_MAKE_INCLUDE
m4trace:configure.ac:49: -1- AM_RUN_LOG([${MAKE-make} -f confmf.$s && cat confinc.out])
m4trace:configure.ac:49: -1- m4_pattern_allow([^am__include$])
m4trace:configure.ac:49: -1- AM_DEP_TRACK
m4trace:configure.ac:49: -1- AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
m4trace:configure.ac:49: -1- m4_pattern_allow([^AMDEP_TRUE$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^AMDEP_FALSE$])
m4trace:configure.ac:49: -1- _AM_SUBST_NOTMAKE([AMDEP_TRUE])
m4trace:configure.ac:49: -1- _AM_SUBST_NOTMAKE([AMDEP_FALSE])
m4trace:configure.ac:49: -1- m4_pattern_allow([^AMDEPBACKSLASH$])
m4trace:configure.ac:49: -1- _AM_SUBST_NOTMAKE([AMDEPBACKSLASH])
m4trace:configure.ac:49: -1- m4_pattern_allow([^am__nodep$])
m4trace:configure.ac:49: -1- _AM_SUBST_NOTMAKE([am__nodep])
m4trace:configure.ac:49: -1- m4_pattern_allow([^CCDEPMODE$])
m4trace:configure.ac:49: -1- AM_CONDITIONAL([am__fastdepCC], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CC_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:49: -1- m4_pattern_allow([^am__fastdepCC_TRUE$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^am__fastdepCC_FALSE$])
m4trace:configure.ac:49: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_TRUE])
m4trace:configure.ac:49: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_FALSE])
m4trace:configure.ac:49: -1- LT_PATH_LD
m4trace:configure.ac:49: -1- m4_pattern_allow([^SED$])
m4trace:configure.ac:49: -1- AC_PROG_EGREP
m4trace:configure.ac:49: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^FGREP$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^LD$])
m4trace:configure.ac:49: -1- LT_PATH_NM
m4trace:configure.ac:49: -1- m4_pattern_allow([^DUMPBIN$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^ac_ct_DUMPBIN$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^DUMPBIN$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^NM$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^LN_S$])
m4trace:configure.ac:49: -1- LT_CMD_MAX_LEN
m4trace:configure.ac:49: -1- m4_pattern_allow([^OBJDUMP$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^OBJDUMP$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^DLLTOOL$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^DLLTOOL$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^ac_ct_AR$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^STRIP$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^RANLIB$])
m4trace:configure.ac:49: -1- _LT_WITH_SYSROOT
m4trace:configure.ac:49: -1- m4_pattern_allow([LT_OBJDIR])
m4trace:configure.ac:49: -1- m4_pattern_allow([^LT_OBJDIR$])
m4trace:configure.ac:49: -1- _LT_CC_BASENAME([$compiler])
m4trace:configure.ac:49: -1- _LT_PATH_TOOL_PREFIX([${ac_tool_prefix}file], [/usr/bin$PATH_SEPARATOR$PATH])
m4trace:configure.ac:49: -1- _LT_PATH_TOOL_PREFIX([file], [/usr/bin$PATH_SEPARATOR$PATH])
m4trace:configure.ac:49: -1- LT_SUPPORTED_TAG([CC])
m4trace:configure.ac:49: -1- _LT_COMPILER_BOILERPLATE
m4trace:configure.ac:49: -1- _LT_LINKER_BOILERPLATE
m4trace:configure.ac:49: -1- _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions], [lt_cv_prog_compiler_rtti_exceptions], [-fno-rtti -fno-exceptions], [], [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, )="$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, ) -fno-rtti -fno-exceptions"])
m4trace:configure.ac:49: -1- _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, ) works], [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, )], [$_LT_TAGVAR(lt_prog_compiler_pic, )@&t@m4_if([],[],[ -DPIC],[m4_if([],[CXX],[ -DPIC],[])])], [], [case $_LT_TAGVAR(lt_prog_compiler_pic, ) in
     "" | " "*) ;;
     *) _LT_TAGVAR(lt_prog_compiler_pic, )=" $_LT_TAGVAR(lt_prog_compiler_pic, )" ;;
     esac], [_LT_TAGVAR(lt_prog_compiler_pic, )=
     _LT_TAGVAR(lt_prog_compiler_can_build_shared, )=no])
m4trace:configure.ac:49: -1- _LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works], [lt_cv_prog_compiler_static_works], [$lt_tmp_static_flag], [], [_LT_TAGVAR(lt_prog_compiler_static, )=])
m4trace:configure.ac:49: -1- m4_pattern_allow([^MANIFEST_TOOL$])
m4trace:configure.ac:49: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:49: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:49: -1- _LT_REQUIRED_DARWIN_CHECKS
m4trace:configure.ac:49: -1- m4_pattern_allow([^DSYMUTIL$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^NMEDIT$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^LIPO$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^OTOOL$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^OTOOL64$])
m4trace:configure.ac:49: -1- _LT_LINKER_OPTION([if $CC understands -b], [lt_cv_prog_compiler__b], [-b], [_LT_TAGVAR(archive_cmds, )='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'], [_LT_TAGVAR(archive_cmds, )='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])
m4trace:configure.ac:49: -1- m4_pattern_allow([^LT_SYS_LIBRARY_PATH$])
m4trace:configure.ac:49: -1- LT_SYS_DLOPEN_SELF
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_stdio_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" stdio.h ]AS_TR_SH([stdio.h]) AS_TR_CPP([HAVE_stdio.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_stdlib_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" stdlib.h ]AS_TR_SH([stdlib.h]) AS_TR_CPP([HAVE_stdlib.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_string_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" string.h ]AS_TR_SH([string.h]) AS_TR_CPP([HAVE_string.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_inttypes_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" inttypes.h ]AS_TR_SH([inttypes.h]) AS_TR_CPP([HAVE_inttypes.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_stdint_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" stdint.h ]AS_TR_SH([stdint.h]) AS_TR_CPP([HAVE_stdint.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_strings_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" strings.h ]AS_TR_SH([strings.h]) AS_TR_CPP([HAVE_strings.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_sys_stat_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" sys/stat.h ]AS_TR_SH([sys/stat.h]) AS_TR_CPP([HAVE_sys/stat.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_sys_types_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" sys/types.h ]AS_TR_SH([sys/types.h]) AS_TR_CPP([HAVE_sys/types.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- AC_DEFUN([_AC_Header_unistd_h], [m4_divert_text([INIT_PREPARE],
  [AS_VAR_APPEND([ac_header_]]_AC_LANG_ABBREV[[_list],
  [" unistd.h ]AS_TR_SH([unistd.h]) AS_TR_CPP([HAVE_unistd.h])["])])_AC_HEADERS_EXPANSION(_AC_LANG_ABBREV)])
m4trace:configure.ac:49: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:49: -1- m4_pattern_allow([^HAVE_DLFCN_H$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:51: -1- _AM_PROG_CC_C_O
m4trace:configure.ac:51: -1- AM_RUN_LOG([$CC -c conftest.$ac_ext -o conftest2.$ac_objext])
m4trace:configure.ac:51: -1- _AM_DEPENDENCIES([CC])
m4trace:configure.ac:51: -1- m4_pattern_allow([^CCDEPMODE$])
m4trace:configure.ac:51: -1- AM_CONDITIONAL([am__fastdepCC], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CC_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:51: -1- m4_pattern_allow([^am__fastdepCC_TRUE$])
m4trace:configure.ac:51: -1- m4_pattern_allow([^am__fastdepCC_FALSE$])
m4trace:configure.ac:51: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_TRUE])
m4trace:configure.ac:51: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_FALSE])
m4trace:configure.ac:52: -1- m4_pattern_allow([^LN_S$])
m4trace:configure.ac:53: -1- PKG_PROG_PKG_CONFIG
m4trace:configure.ac:53: -1- m4_pattern_forbid([^_?PKG_[A-Z_]+$])
m4trace:configure.ac:53: -1- m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])
m4trace:configure.ac:53: -1- m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])
m4trace:configure.ac:53: -1- m4_pattern_allow([^PKG_CONFIG$])
m4trace:configure.ac:53: -1- m4_pattern_allow([^PKG_CONFIG_PATH$])
m4trace:configure.ac:53: -1- m4_pattern_allow([^PKG_CONFIG_LIBDIR$])
m4trace:configure.ac:53: -1- m4_pattern_allow([^PKG_CONFIG$])
m4trace:configure.ac:54: -1- AM_PROG_AS
m4trace:configure.ac:54: -1- m4_pattern_allow([^CCAS$])
m4trace:configure.ac:54: -1- m4_pattern_allow([^CCASFLAGS$])
m4trace:configure.ac:54: -1- _AM_IF_OPTION([no-dependencies], [], [_AM_DEPENDENCIES([CCAS])])
m4trace:configure.ac:54: -2- _AM_MANGLE_OPTION([no-dependencies])
m4trace:configure.ac:54: -1- _AM_DEPENDENCIES([CCAS])
m4trace:configure.ac:54: -1- m4_pattern_allow([^CCASDEPMODE$])
m4trace:configure.ac:54: -1- AM_CONDITIONAL([am__fastdepCCAS], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CCAS_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:54: -1- m4_pattern_allow([^am__fastdepCCAS_TRUE$])
m4trace:configure.ac:54: -1- m4_pattern_allow([^am__fastdepCCAS_FALSE$])
m4trace:configure.ac:54: -1- _AM_SUBST_NOTMAKE([am__fastdepCCAS_TRUE])
m4trace:configure.ac:54: -1- _AM_SUBST_NOTMAKE([am__fastdepCCAS_FALSE])
m4trace:configure.ac:55: -1- AM_PROG_CC_C_O
m4trace:configure.ac:56: -1- AX_CODE_COVERAGE
m4trace:configure.ac:56: -1- AM_CONDITIONAL([CODE_COVERAGE_ENABLED], [test x$enable_code_coverage = xyes])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_ENABLED_TRUE$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_ENABLED_FALSE$])
m4trace:configure.ac:56: -1- _AM_SUBST_NOTMAKE([CODE_COVERAGE_ENABLED_TRUE])
m4trace:configure.ac:56: -1- _AM_SUBST_NOTMAKE([CODE_COVERAGE_ENABLED_FALSE])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_ENABLED$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^GCOV$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^GCOV$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^LCOV$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^GENHTML$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_CPPFLAGS$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_CFLAGS$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_CXXFLAGS$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_LIBS$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_LDFLAGS$])
m4trace:configure.ac:56: -1- m4_pattern_allow([^CODE_COVERAGE_RULES$])
m4trace:configure.ac:56: -1- _AM_SUBST_NOTMAKE([CODE_COVERAGE_RULES])
m4trace:configure.ac:57: -1- _AM_PROG_TAR([pax])
m4trace:configure.ac:57: -1- m4_pattern_allow([^AMTAR$])
m4trace:configure.ac:57: -1- AM_RUN_LOG([$_am_tar --version])
m4trace:configure.ac:57: -1- AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
m4trace:configure.ac:57: -1- AM_RUN_LOG([$am__untar <conftest.tar])
m4trace:configure.ac:57: -1- AM_RUN_LOG([cat conftest.dir/file])
m4trace:configure.ac:57: -1- m4_pattern_allow([^am__tar$])
m4trace:configure.ac:57: -1- m4_pattern_allow([^am__untar$])
m4trace:configure.ac:59: -1- ZFS_AC_LICENSE
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_CONFIG$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS
m4trace:configure.ac:60: -1- AX_COUNT_CPUS([])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CPU_COUNT$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_NO_CLOBBERED
m4trace:configure.ac:60: -1- m4_pattern_allow([^NO_CLOBBERED$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_INFINITE_RECURSION
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INFINITE_RECURSION$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INFINITE_RECURSION$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_KERNEL_CC_INFINITE_RECURSION
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_INFINITE_RECURSION$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_INFINITE_RECURSION$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_IMPLICIT_FALLTHROUGH
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IMPLICIT_FALLTHROUGH$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^IMPLICIT_FALLTHROUGH$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_FRAME_LARGER_THAN
m4trace:configure.ac:60: -1- m4_pattern_allow([^FRAME_LARGER_THAN$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_NO_FORMAT_TRUNCATION
m4trace:configure.ac:60: -1- m4_pattern_allow([^NO_FORMAT_TRUNCATION$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_NO_FORMAT_ZERO_LENGTH
m4trace:configure.ac:60: -1- m4_pattern_allow([^NO_FORMAT_ZERO_LENGTH$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_FORMAT_OVERFLOW
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FORMAT_OVERFLOW$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^FORMAT_OVERFLOW$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_NO_OMIT_FRAME_POINTER
m4trace:configure.ac:60: -1- m4_pattern_allow([^NO_OMIT_FRAME_POINTER$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_NO_IPA_SRA
m4trace:configure.ac:60: -1- m4_pattern_allow([^NO_IPA_SRA$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_KERNEL_CC_NO_IPA_SRA
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_NO_IPA_SRA$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_ASAN
m4trace:configure.ac:60: -1- AM_CONDITIONAL([ASAN_ENABLED], [test x$enable_asan = xyes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ASAN_ENABLED_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ASAN_ENABLED_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([ASAN_ENABLED_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([ASAN_ENABLED_FALSE])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ASAN_ENABLED$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ASAN_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ASAN_LDFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ASAN_ZFS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CC_UBSAN
m4trace:configure.ac:60: -1- AM_CONDITIONAL([UBSAN_ENABLED], [test x$enable_ubsan = xyes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^UBSAN_ENABLED_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^UBSAN_ENABLED_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([UBSAN_ENABLED_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([UBSAN_ENABLED_FALSE])
m4trace:configure.ac:60: -1- m4_pattern_allow([^UBSAN_ENABLED$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^UBSAN_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^UBSAN_LDFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^UBSAN_ZFS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_TOOLCHAIN_SIMD
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SSE$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE2
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SSE2$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE3
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SSE3$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSSE3
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SSSE3$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE4_1
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SSE4_1$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_SSE4_2
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SSE4_2$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX2
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX2$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512F
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512F$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512CD
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512CD$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512DQ
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512DQ$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512BW
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512BW$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512IFMA
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512IFMA$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512VBMI
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512VBMI$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512PF
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512PF$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512ER
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512ER$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AVX512VL
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AVX512VL$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_AES
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AES$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_PCLMULQDQ
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PCLMULQDQ$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_MOVBE
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MOVBE$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVE
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XSAVE$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVEOPT
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XSAVEOPT$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_TOOLCHAIN_CAN_BUILD_XSAVES
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XSAVES$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_SYSTEM
m4trace:configure.ac:60: -1- m4_pattern_allow([^SYSTEM_LINUX$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SYSTEM_FREEBSD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ac_system$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ac_system_l$])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([BUILD_LINUX], [test "x$ac_system" = "xLinux"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^BUILD_LINUX_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^BUILD_LINUX_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([BUILD_LINUX_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([BUILD_LINUX_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([BUILD_FREEBSD], [test "x$ac_system" = "xFreeBSD"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^BUILD_FREEBSD_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^BUILD_FREEBSD_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([BUILD_FREEBSD_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([BUILD_FREEBSD_FALSE])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_ARCH
m4trace:configure.ac:60: -1- AM_CONDITIONAL([TARGET_CPU_AARCH64], [test $TARGET_CPU = aarch64])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_AARCH64_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_AARCH64_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_AARCH64_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_AARCH64_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([TARGET_CPU_X86_64], [test $TARGET_CPU = x86_64])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_X86_64_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_X86_64_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_X86_64_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_X86_64_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([TARGET_CPU_POWERPC], [test $TARGET_CPU = powerpc])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_POWERPC_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_POWERPC_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_POWERPC_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_POWERPC_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([TARGET_CPU_SPARC64], [test $TARGET_CPU = sparc64])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_SPARC64_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_SPARC64_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_SPARC64_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_SPARC64_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([TARGET_CPU_ARM], [test $TARGET_CPU = arm])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_ARM_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TARGET_CPU_ARM_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_ARM_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([TARGET_CPU_ARM_FALSE])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_PYTHON
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON$])
m4trace:configure.ac:60: -1- AM_PATH_PYTHON([], [], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_VERSION$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_PLATFORM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_PREFIX$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_EXEC_PREFIX$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pythondir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pkgpythondir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pyexecdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pkgpyexecdir$])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([USING_PYTHON], [test "$PYTHON" != :])
m4trace:configure.ac:60: -1- m4_pattern_allow([^USING_PYTHON_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^USING_PYTHON_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([USING_PYTHON_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([USING_PYTHON_FALSE])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_SHEBANG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^DEFINE_PYTHON_VERSION$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^DEFINE_PYTHON_PKG_VERSION$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_PYZFS
m4trace:configure.ac:60: -1- m4_pattern_allow([^DEFINE_PYZFS$])
m4trace:configure.ac:60: -1- ZFS_AC_PYTHON_MODULE([packaging], [], [
			ZFS_AC_PYTHON_MODULE([distlib], [], [
				AS_IF([test "x$enable_pyzfs" = xyes], [
					AC_MSG_ERROR("Python $PYTHON_VERSION packaging and distlib modules are not installed")
				], [test "x$enable_pyzfs" != xno], [
					enable_pyzfs=no
				])
			])
		])
m4trace:configure.ac:60: -1- ZFS_AC_PYTHON_MODULE([distlib], [], [
				AS_IF([test "x$enable_pyzfs" = xyes], [
					AC_MSG_ERROR("Python $PYTHON_VERSION packaging and distlib modules are not installed")
				], [test "x$enable_pyzfs" != xno], [
					enable_pyzfs=no
				])
			])
m4trace:configure.ac:60: -1- AX_PYTHON_DEVEL([$PYTHON_REQUIRED_VERSION], [
			AS_IF([test "x$enable_pyzfs" = xyes], [
				AC_MSG_ERROR("Python $PYTHON_REQUIRED_VERSION development library is not installed")
			], [test "x$enable_pyzfs" != xno], [
				enable_pyzfs=no
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_VERSION$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_CPPFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PYTHON$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_SITE_PKG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_EXTRA_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYTHON_EXTRA_LDFLAGS$])
m4trace:configure.ac:60: -1- ZFS_AC_PYTHON_MODULE([setuptools], [], [
			AS_IF([test "x$enable_pyzfs" = xyes], [
				AC_MSG_ERROR("Python $PYTHON_VERSION setuptools is not installed")
			], [test "x$enable_pyzfs" != xno], [
				enable_pyzfs=no
			])
		])
m4trace:configure.ac:60: -1- ZFS_AC_PYTHON_MODULE([cffi], [], [
			AS_IF([test "x$enable_pyzfs" = xyes], [
				AC_MSG_ERROR("Python $PYTHON_VERSION cffi is not installed")
			], [test "x$enable_pyzfs" != xno], [
				enable_pyzfs=no
			])
		])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([PYZFS_ENABLED], [test "x$enable_pyzfs" = xyes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYZFS_ENABLED_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYZFS_ENABLED_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([PYZFS_ENABLED_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([PYZFS_ENABLED_FALSE])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PYZFS_ENABLED$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pythonsitedir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_SED
m4trace:configure.ac:60: -1- m4_pattern_allow([^ac_inplace$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_CPPCHECK
m4trace:configure.ac:60: -1- m4_pattern_allow([^CPPCHECK$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_SHELLCHECK
m4trace:configure.ac:60: -1- m4_pattern_allow([^SHELLCHECK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CHECKBASHISMS$])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([HAVE_SHELLCHECK], [test "x$SHELLCHECK" = "xyes"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SHELLCHECK_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SHELLCHECK_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([HAVE_SHELLCHECK_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([HAVE_SHELLCHECK_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([HAVE_CHECKBASHISMS], [test "x$CHECKBASHISMS" = "xyes"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CHECKBASHISMS_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CHECKBASHISMS_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([HAVE_CHECKBASHISMS_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([HAVE_CHECKBASHISMS_FALSE])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_ALWAYS_PARALLEL
m4trace:configure.ac:60: -1- m4_pattern_allow([^PARALLEL$])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([HAVE_PARALLEL], [test "x$PARALLEL" = "xyes"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PARALLEL_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PARALLEL_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([HAVE_PARALLEL_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([HAVE_PARALLEL_FALSE])
m4trace:configure.ac:60: -1- AM_COND_IF([BUILD_LINUX], [
		AC_ARG_VAR([TEST_JOBS], [simultaneous jobs during configure])
		if test "x$ac_cv_env_TEST_JOBS_set" != "xset"; then
			TEST_JOBS=$CPU_COUNT
		fi
		AC_SUBST(TEST_JOBS)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TEST_JOBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^TEST_JOBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_KERNEL
m4trace:configure.ac:60: -1- AM_COND_IF([BUILD_LINUX], [
		dnl # Setup the kernel build environment.
		ZFS_AC_KERNEL
		ZFS_AC_QAT

		dnl # Sanity checks for module building and CONFIG_* defines
		ZFS_AC_KERNEL_CONFIG_DEFINED
		ZFS_AC_MODULE_SYMVERS

		dnl # Sequential ZFS_LINUX_TRY_COMPILE tests
		ZFS_AC_KERNEL_FPU_HEADER
		ZFS_AC_KERNEL_OBJTOOL_HEADER
		ZFS_AC_KERNEL_WAIT_QUEUE_ENTRY_T
		ZFS_AC_KERNEL_MISC_MINOR
		ZFS_AC_KERNEL_DECLARE_EVENT_CLASS

		dnl # Parallel ZFS_LINUX_TEST_SRC / ZFS_LINUX_TEST_RESULT tests
		ZFS_AC_KERNEL_TEST_SRC
		ZFS_AC_KERNEL_TEST_RESULT

		AS_IF([test "$LINUX_OBJ" != "$LINUX"], [
			KERNEL_MAKE="$KERNEL_MAKE O=$LINUX_OBJ"
		])

		AC_SUBST(KERNEL_MAKE)
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL
m4trace:configure.ac:60: -1- m4_pattern_allow([^LINUX$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LINUX_OBJ$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LINUX_VERSION$])
m4trace:configure.ac:60: -1- ZFS_AC_QAT
m4trace:configure.ac:60: -1- m4_pattern_allow([^QAT_SRC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^QAT_OBJ$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_QAT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^QAT_SYMBOLS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_DEFINED
m4trace:configure.ac:60: -1- _m4_warn([cross], [AC_RUN_IFELSE called without default to allow cross compiling], [./lib/autoconf/general.m4:2981: AC_RUN_IFELSE is expanded from...
lib/m4sugar/m4sh.m4:699: AS_IF is expanded from...
config/kernel-config-defined.m4:6: ZFS_AC_KERNEL_CONFIG_DEFINED is expanded from...
/usr/share/aclocal-1.16/cond-if.m4:23: AM_COND_IF is expanded from...
config/kernel.m4:4: ZFS_AC_CONFIG_KERNEL is expanded from...
config/zfs-build.m4:236: ZFS_AC_CONFIG is expanded from...
configure.ac:60: the top level])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_IS_GPL_COMPATIBLE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_MODULES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_modules], [
		#if !defined(CONFIG_MODULES)
		#error CONFIG_MODULES not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if !defined(CONFIG_MODULES)
		#error CONFIG_MODULES not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_modules])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_modules], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if !defined(CONFIG_MODULES)
		#error CONFIG_MODULES not defined
		#endif
	]], [[]], [[]])], [config_modules_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_modules_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_BLOCK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_block], [
		#if !defined(CONFIG_BLOCK)
		#error CONFIG_BLOCK not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if !defined(CONFIG_BLOCK)
		#error CONFIG_BLOCK not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_block])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_block], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if !defined(CONFIG_BLOCK)
		#error CONFIG_BLOCK not defined
		#endif
	]], [[]], [[]])], [config_block_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_block_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_DEBUG_LOCK_ALLOC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_debug_lock_alloc], [
		#include <linux/mutex.h>
	], [
		struct mutex lock;

		mutex_init(&lock);
		mutex_lock(&lock);
		mutex_unlock(&lock);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mutex.h>
	]], [[
		struct mutex lock;

		mutex_init(&lock);
		mutex_lock(&lock);
		mutex_unlock(&lock);
	]],
	    [["Dual BSD/GPL"]])], [config_debug_lock_alloc])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_debug_lock_alloc], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mutex.h>
	]], [[
		struct mutex lock;

		mutex_init(&lock);
		mutex_lock(&lock);
		mutex_unlock(&lock);
	]], [[ZFS_META_LICENSE]])], [config_debug_lock_alloc_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_debug_lock_alloc_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_TRIM_UNUSED_KSYMS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_trim_unusued_ksyms], [
		#if defined(CONFIG_TRIM_UNUSED_KSYMS)
		#error CONFIG_TRIM_UNUSED_KSYMS not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if defined(CONFIG_TRIM_UNUSED_KSYMS)
		#error CONFIG_TRIM_UNUSED_KSYMS not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_trim_unusued_ksyms])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_trim_unusued_ksyms], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if defined(CONFIG_TRIM_UNUSED_KSYMS)
		#error CONFIG_TRIM_UNUSED_KSYMS not defined
		#endif
	]], [[]], [[]])], [config_trim_unusued_ksyms_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_trim_unusued_ksyms_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_ZLIB_DEFLATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_zlib_deflate], [
		#if !defined(CONFIG_ZLIB_DEFLATE) && \
		    !defined(CONFIG_ZLIB_DEFLATE_MODULE)
		#error CONFIG_ZLIB_DEFLATE not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if !defined(CONFIG_ZLIB_DEFLATE) && \
		    !defined(CONFIG_ZLIB_DEFLATE_MODULE)
		#error CONFIG_ZLIB_DEFLATE not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_zlib_deflate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_zlib_deflate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if !defined(CONFIG_ZLIB_DEFLATE) && \
		    !defined(CONFIG_ZLIB_DEFLATE_MODULE)
		#error CONFIG_ZLIB_DEFLATE not defined
		#endif
	]], [[]], [[]])], [config_zlib_deflate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_zlib_deflate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_ZLIB_INFLATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_zlib_inflate], [
		#if !defined(CONFIG_ZLIB_INFLATE) && \
		    !defined(CONFIG_ZLIB_INFLATE_MODULE)
		#error CONFIG_ZLIB_INFLATE not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if !defined(CONFIG_ZLIB_INFLATE) && \
		    !defined(CONFIG_ZLIB_INFLATE_MODULE)
		#error CONFIG_ZLIB_INFLATE not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_zlib_inflate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_zlib_inflate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if !defined(CONFIG_ZLIB_INFLATE) && \
		    !defined(CONFIG_ZLIB_INFLATE_MODULE)
		#error CONFIG_ZLIB_INFLATE not defined
		#endif
	]], [[]], [[]])], [config_zlib_inflate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_zlib_inflate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_COMPILE_ALL([config])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_COMPILE([config], [build])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build], [test -f build/build.log], [
		mv build/Makefile build/Makefile.compile.config
		mv build/build.log build/build.log.config
	], [
	        AC_MSG_ERROR([
        *** Unable to compile test source to determine kernel interfaces.])
	], [yes], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_MODPOST([config], [build/$name])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/$name], [test -f build/$name/build.log], [
		mv build/$name/Makefile build/$name/Makefile.modpost.config
		cat build/$name/build.log >>build/build.log.config
	], [
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_MODPOST([config], [build])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build], [test -f build/build.log], [
		mv build/Makefile build/Makefile.modpost.config
		cat build/build.log >>build/build.log.config
	], [
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_MODULES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_modules], [
			AC_MSG_RESULT([yes])
		], [
			AC_MSG_RESULT([no])
			AC_MSG_ERROR([
		*** This kernel does not include the required loadable module
		*** support!
		***
		*** To build OpenZFS as a loadable Linux kernel module
		*** enable loadable module support by setting
		*** `CONFIG_MODULES=y` in the kernel configuration and run
		*** `make modules_prepare` in the Linux source tree.
		***
		*** If you don't intend to enable loadable kernel module
		*** support, please compile OpenZFS as a Linux kernel built-in.
		***
		*** Prepare the Linux source tree by running `make prepare`,
		*** use the OpenZFS `--enable-linux-builtin` configure option,
		*** copy the OpenZFS sources into the Linux source tree using
		*** `./copy-builtin <linux source directory>`,
		*** set `CONFIG_ZFS=y` in the kernel configuration and compile
		*** kernel as usual.
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([], [], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[]], [[]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[]], [[]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[]], [[]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[]], [[]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_BLOCK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_block], [
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required block device support.
	*** Rebuild the kernel with CONFIG_BLOCK=y set.])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_DEBUG_LOCK_ALLOC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_debug_lock_alloc_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_MSG_ERROR([
	*** Kernel built with CONFIG_DEBUG_LOCK_ALLOC which is incompatible
	*** with the CDDL license and will prevent the module linking stage
	*** from succeeding.  You must rebuild your kernel without this
	*** option enabled.])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_TRIM_UNUSED_KSYMS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_trim_unusued_ksyms], [
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
		AS_IF([test "x$enable_linux_builtin" != xyes], [
			AC_MSG_ERROR([
	*** This kernel has unused symbols trimming enabled, please disable.
	*** Rebuild the kernel with CONFIG_TRIM_UNUSED_KSYMS=n set.])
		])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_ZLIB_DEFLATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_zlib_deflate], [
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required zlib deflate support.
	*** Rebuild the kernel with CONFIG_ZLIB_DEFLATE=y|m set.])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_ZLIB_INFLATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_zlib_inflate], [
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required zlib inflate support.
	*** Rebuild the kernel with CONFIG_ZLIB_INFLATE=y|m set.])
	])
m4trace:configure.ac:60: -1- ZFS_AC_MODULE_SYMVERS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LINUX_SYMBOLS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FPU_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	], [
	], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_API_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		], [
		], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_API_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		], [
		], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_OBJTOOL_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
		#include <linux/objtool.h>
	], [
	], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/objtool.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/objtool.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_OBJTOOL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/objtool.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/objtool.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_OBJTOOL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WAIT_QUEUE_ENTRY_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
		#include <linux/wait.h>
	], [
		wait_queue_entry_t *entry __attribute__ ((unused));
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		wait_queue_entry_t *entry __attribute__ ((unused));
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		wait_queue_entry_t *entry __attribute__ ((unused));
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WAIT_QUEUE_ENTRY_T$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		wait_queue_entry_t *entry __attribute__ ((unused));
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		wait_queue_entry_t *entry __attribute__ ((unused));
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WAIT_QUEUE_ENTRY_T$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_MISC_MINOR
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_DEVICE_MINOR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DECLARE_EVENT_CLASS
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE_HEADER([
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	], [
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	]], [[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	]], [[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DECLARE_EVENT_CLASS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	]], [[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	]], [[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DECLARE_EVENT_CLASS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TEST_SRC
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_OBJTOOL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([objtool], [
		#undef __ASSEMBLY__
		#include <asm/ptrace.h>
		#include <asm/frame.h>
	], [
		#if !defined(FRAME_BEGIN)
		#error "FRAME_BEGIN is not defined"
		#endif
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#undef __ASSEMBLY__
		#include <asm/ptrace.h>
		#include <asm/frame.h>
	]], [[
		#if !defined(FRAME_BEGIN)
		#error "FRAME_BEGIN is not defined"
		#endif
	]],
	    [["Dual BSD/GPL"]])], [objtool])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([objtool], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#undef __ASSEMBLY__
		#include <asm/ptrace.h>
		#include <asm/frame.h>
	]], [[
		#if !defined(FRAME_BEGIN)
		#error "FRAME_BEGIN is not defined"
		#endif
	]], [[]])], [objtool_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([objtool_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([stack_frame_non_standard], [
		#ifdef HAVE_KERNEL_OBJTOOL_HEADER
		#include <linux/objtool.h>
		#else
		#include <linux/frame.h>
		#endif
	], [
		#if !defined(STACK_FRAME_NON_STANDARD)
		#error "STACK_FRAME_NON_STANDARD is not defined."
		#endif
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#ifdef HAVE_KERNEL_OBJTOOL_HEADER
		#include <linux/objtool.h>
		#else
		#include <linux/frame.h>
		#endif
	]], [[
		#if !defined(STACK_FRAME_NON_STANDARD)
		#error "STACK_FRAME_NON_STANDARD is not defined."
		#endif
	]],
	    [["Dual BSD/GPL"]])], [stack_frame_non_standard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([stack_frame_non_standard], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#ifdef HAVE_KERNEL_OBJTOOL_HEADER
		#include <linux/objtool.h>
		#else
		#include <linux/frame.h>
		#endif
	]], [[
		#if !defined(STACK_FRAME_NON_STANDARD)
		#error "STACK_FRAME_NON_STANDARD is not defined."
		#endif
	]], [[]])], [stack_frame_non_standard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([stack_frame_non_standard_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GLOBAL_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GLOBAL_NODE_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([global_node_page_state], [
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	], [
		(void) global_node_page_state(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	]], [[
		(void) global_node_page_state(0);
	]],
	    [["Dual BSD/GPL"]])], [global_node_page_state])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([global_node_page_state], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	]], [[
		(void) global_node_page_state(0);
	]], [[]])], [global_node_page_state_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([global_node_page_state_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GLOBAL_ZONE_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([global_zone_page_state], [
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	], [
		(void) global_zone_page_state(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	]], [[
		(void) global_zone_page_state(0);
	]],
	    [["Dual BSD/GPL"]])], [global_zone_page_state])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([global_zone_page_state], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	]], [[
		(void) global_zone_page_state(0);
	]], [[]])], [global_zone_page_state_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([global_zone_page_state_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ACCESS_OK_TYPE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([access_ok_type], [
		#include <linux/uaccess.h>
	], [
		const void __user __attribute__((unused)) *addr =
		    (void *) 0xdeadbeef;
		unsigned long __attribute__((unused)) size = 1;
		int error __attribute__((unused)) = access_ok(0, addr, size);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/uaccess.h>
	]], [[
		const void __user __attribute__((unused)) *addr =
		    (void *) 0xdeadbeef;
		unsigned long __attribute__((unused)) size = 1;
		int error __attribute__((unused)) = access_ok(0, addr, size);
	]],
	    [["Dual BSD/GPL"]])], [access_ok_type])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([access_ok_type], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/uaccess.h>
	]], [[
		const void __user __attribute__((unused)) *addr =
		    (void *) 0xdeadbeef;
		unsigned long __attribute__((unused)) size = 1;
		int error __attribute__((unused)) = access_ok(0, addr, size);
	]], [[]])], [access_ok_type_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([access_ok_type_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PDE_DATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([pde_data], [
		#include <linux/proc_fs.h>
	], [
		pde_data(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/proc_fs.h>
	]], [[
		pde_data(NULL);
	]],
	    [["Dual BSD/GPL"]])], [pde_data])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([pde_data], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/proc_fs.h>
	]], [[
		pde_data(NULL);
	]], [[]])], [pde_data_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([pde_data_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FALLOCATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_fallocate], [
		#include <linux/fs.h>

		long test_fallocate(struct file *file, int mode,
		    loff_t offset, loff_t len) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fallocate = test_fallocate,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		long test_fallocate(struct file *file, int mode,
		    loff_t offset, loff_t len) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fallocate = test_fallocate,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_fallocate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_fallocate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		long test_fallocate(struct file *file, int mode,
		    loff_t offset, loff_t len) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fallocate = test_fallocate,
		};
	]], [[]], [[]])], [file_fallocate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_fallocate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([falloc_fl_zero_range], [
		#include <linux/falloc.h>
	], [
		int flags __attribute__ ((unused));
		flags = FALLOC_FL_ZERO_RANGE;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/falloc.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = FALLOC_FL_ZERO_RANGE;
	]],
	    [["Dual BSD/GPL"]])], [falloc_fl_zero_range])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([falloc_fl_zero_range], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/falloc.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = FALLOC_FL_ZERO_RANGE;
	]], [[]])], [falloc_fl_zero_range_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([falloc_fl_zero_range_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FADVISE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_fadvise], [
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fadvise = NULL,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fadvise = NULL,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_fadvise])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_fadvise], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fadvise = NULL,
		};
	]], [[]], [[]])], [file_fadvise_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_fadvise_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_FADVISE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_fadvise], [
		#include <linux/fs.h>
	], [
		struct file *fp __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t len __attribute__ ((unused)) = 0;
		int advise __attribute__ ((unused)) = 0;
		generic_fadvise(fp, offset, len, advise);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *fp __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t len __attribute__ ((unused)) = 0;
		int advise __attribute__ ((unused)) = 0;
		generic_fadvise(fp, offset, len, advise);
	]],
	    [["Dual BSD/GPL"]])], [generic_fadvise])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fadvise], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *fp __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t len __attribute__ ((unused)) = 0;
		int advise __attribute__ ((unused)) = 0;
		generic_fadvise(fp, offset, len, advise);
	]], [[]])], [generic_fadvise_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fadvise_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([2args_zlib_deflate_workspacesize], [
		#include <linux/zlib.h>
	], [
		return zlib_deflate_workspacesize(MAX_WBITS, MAX_MEM_LEVEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/zlib.h>
	]], [[
		return zlib_deflate_workspacesize(MAX_WBITS, MAX_MEM_LEVEL);
	]],
	    [["Dual BSD/GPL"]])], [2args_zlib_deflate_workspacesize])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([2args_zlib_deflate_workspacesize], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/zlib.h>
	]], [[
		return zlib_deflate_workspacesize(MAX_WBITS, MAX_MEM_LEVEL);
	]], [[]])], [2args_zlib_deflate_workspacesize_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([2args_zlib_deflate_workspacesize_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RWSEM
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RWSEM_ACTIVITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([rwsem_activity], [
		#include <linux/rwsem.h>
	], [
		struct rw_semaphore dummy_semaphore __attribute__ ((unused));
		dummy_semaphore.activity = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/rwsem.h>
	]], [[
		struct rw_semaphore dummy_semaphore __attribute__ ((unused));
		dummy_semaphore.activity = 0;
	]],
	    [["Dual BSD/GPL"]])], [rwsem_activity])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([rwsem_activity], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/rwsem.h>
	]], [[
		struct rw_semaphore dummy_semaphore __attribute__ ((unused));
		dummy_semaphore.activity = 0;
	]], [[]])], [rwsem_activity_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([rwsem_activity_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RWSEM_ATOMIC_LONG_COUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([rwsem_atomic_long_count], [
		#include <linux/rwsem.h>
	], [
		DECLARE_RWSEM(dummy_semaphore);
		(void) atomic_long_read(&dummy_semaphore.count);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/rwsem.h>
	]], [[
		DECLARE_RWSEM(dummy_semaphore);
		(void) atomic_long_read(&dummy_semaphore.count);
	]],
	    [["Dual BSD/GPL"]])], [rwsem_atomic_long_count])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([rwsem_atomic_long_count], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/rwsem.h>
	]], [[
		DECLARE_RWSEM(dummy_semaphore);
		(void) atomic_long_read(&dummy_semaphore.count);
	]], [[]])], [rwsem_atomic_long_count_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([rwsem_atomic_long_count_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SCHED
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SCHED_RT_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([sched_rt_header], [
		#include <linux/sched.h>
		#include <linux/sched/rt.h>
	], [
		return 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
		#include <linux/sched/rt.h>
	]], [[
		return 0;
	]],
	    [["Dual BSD/GPL"]])], [sched_rt_header])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sched_rt_header], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
		#include <linux/sched/rt.h>
	]], [[
		return 0;
	]], [[]])], [sched_rt_header_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sched_rt_header_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SCHED_SIGNAL_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([sched_signal_header], [
		#include <linux/sched.h>
		#include <linux/sched/signal.h>
	], [
		return 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
		#include <linux/sched/signal.h>
	]], [[
		return 0;
	]],
	    [["Dual BSD/GPL"]])], [sched_signal_header])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sched_signal_header], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
		#include <linux/sched/signal.h>
	]], [[
		return 0;
	]], [[]])], [sched_signal_header_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sched_signal_header_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_IO_SCHEDULE_TIMEOUT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([io_schedule_timeout], [
		#include <linux/sched.h>
	], [
		(void) io_schedule_timeout(1);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
	]], [[
		(void) io_schedule_timeout(1);
	]],
	    [["Dual BSD/GPL"]])], [io_schedule_timeout])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([io_schedule_timeout], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
	]], [[
		(void) io_schedule_timeout(1);
	]], [[]])], [io_schedule_timeout_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([io_schedule_timeout_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_USLEEP_RANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([usleep_range], [
		#include <linux/delay.h>
	], [
		usleep_range(0, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/delay.h>
	]], [[
		usleep_range(0, 0);
	]],
	    [["Dual BSD/GPL"]])], [usleep_range])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([usleep_range], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/delay.h>
	]], [[
		usleep_range(0, 0);
	]], [[]])], [usleep_range_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([usleep_range_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KMEM_CACHE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KMEM_CACHE_CREATE_USERCOPY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kmem_cache_create_usercopy], [
		#include <linux/slab.h>
		static void ctor(void *foo) { /* fake ctor */ }
	], [
		struct kmem_cache *skc_linux_cache;
		const char *name = "test";
		size_t size = 4096;
		size_t align = 8;
		unsigned long flags = 0;
		size_t useroffset = 0;
		size_t usersize = size - useroffset;

		skc_linux_cache = kmem_cache_create_usercopy(
		    name, size, align, flags, useroffset, usersize, ctor);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/slab.h>
		static void ctor(void *foo) { /* fake ctor */ }
	]], [[
		struct kmem_cache *skc_linux_cache;
		const char *name = "test";
		size_t size = 4096;
		size_t align = 8;
		unsigned long flags = 0;
		size_t useroffset = 0;
		size_t usersize = size - useroffset;

		skc_linux_cache = kmem_cache_create_usercopy(
		    name, size, align, flags, useroffset, usersize, ctor);
	]],
	    [["Dual BSD/GPL"]])], [kmem_cache_create_usercopy])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kmem_cache_create_usercopy], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/slab.h>
		static void ctor(void *foo) { /* fake ctor */ }
	]], [[
		struct kmem_cache *skc_linux_cache;
		const char *name = "test";
		size_t size = 4096;
		size_t align = 8;
		unsigned long flags = 0;
		size_t useroffset = 0;
		size_t usersize = size - useroffset;

		skc_linux_cache = kmem_cache_create_usercopy(
		    name, size, align, flags, useroffset, usersize, ctor);
	]], [[]])], [kmem_cache_create_usercopy_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kmem_cache_create_usercopy_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KVMALLOC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kvmalloc], [
		#include <linux/mm.h>
		#include <linux/slab.h>
	], [
		void *p __attribute__ ((unused));

		p = kvmalloc(0, GFP_KERNEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		#include <linux/slab.h>
	]], [[
		void *p __attribute__ ((unused));

		p = kvmalloc(0, GFP_KERNEL);
	]],
	    [["Dual BSD/GPL"]])], [kvmalloc])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kvmalloc], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		#include <linux/slab.h>
	]], [[
		void *p __attribute__ ((unused));

		p = kvmalloc(0, GFP_KERNEL);
	]], [[]])], [kvmalloc_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kvmalloc_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VMALLOC_PAGE_KERNEL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([__vmalloc], [
		#include <linux/mm.h>
		#include <linux/vmalloc.h>
	], [
		void *p __attribute__ ((unused));

		p = __vmalloc(0, GFP_KERNEL, PAGE_KERNEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		#include <linux/vmalloc.h>
	]], [[
		void *p __attribute__ ((unused));

		p = __vmalloc(0, GFP_KERNEL, PAGE_KERNEL);
	]],
	    [["Dual BSD/GPL"]])], [__vmalloc])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__vmalloc], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		#include <linux/vmalloc.h>
	]], [[
		void *p __attribute__ ((unused));

		p = __vmalloc(0, GFP_KERNEL, PAGE_KERNEL);
	]], [[]])], [__vmalloc_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__vmalloc_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WAIT
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WAIT_ON_BIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([wait_on_bit], [
		#include <linux/wait.h>
	], [
		int (*action)(void *) = NULL;
		wait_on_bit(NULL, 0, action, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		int (*action)(void *) = NULL;
		wait_on_bit(NULL, 0, action, 0);
	]],
	    [["Dual BSD/GPL"]])], [wait_on_bit])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([wait_on_bit], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/wait.h>
	]], [[
		int (*action)(void *) = NULL;
		wait_on_bit(NULL, 0, action, 0);
	]], [[]])], [wait_on_bit_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([wait_on_bit_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WAIT_QUEUE_HEAD_ENTRY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([wait_queue_head_entry], [
		#include <linux/wait.h>

		#ifdef HAVE_WAIT_QUEUE_ENTRY_T
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_entry_t	spl_wait_queue_entry_t;
		#else
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_t		spl_wait_queue_entry_t;
		#endif
	], [
		spl_wait_queue_head_t wq_head;
		spl_wait_queue_entry_t wq_entry;
		struct list_head *head __attribute__ ((unused));
		struct list_head *entry __attribute__ ((unused));

		head = &wq_head.head;
		entry = &wq_entry.entry;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>

		#ifdef HAVE_WAIT_QUEUE_ENTRY_T
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_entry_t	spl_wait_queue_entry_t;
		#else
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_t		spl_wait_queue_entry_t;
		#endif
	]], [[
		spl_wait_queue_head_t wq_head;
		spl_wait_queue_entry_t wq_entry;
		struct list_head *head __attribute__ ((unused));
		struct list_head *entry __attribute__ ((unused));

		head = &wq_head.head;
		entry = &wq_entry.entry;
	]],
	    [["Dual BSD/GPL"]])], [wait_queue_head_entry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([wait_queue_head_entry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/wait.h>

		#ifdef HAVE_WAIT_QUEUE_ENTRY_T
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_entry_t	spl_wait_queue_entry_t;
		#else
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_t		spl_wait_queue_entry_t;
		#endif
	]], [[
		spl_wait_queue_head_t wq_head;
		spl_wait_queue_entry_t wq_entry;
		struct list_head *head __attribute__ ((unused));
		struct list_head *entry __attribute__ ((unused));

		head = &wq_head.head;
		entry = &wq_entry.entry;
	]], [[]])], [wait_queue_head_entry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([wait_queue_head_entry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_TIMES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([timestamp_truncate], [
		#include <linux/fs.h>
	], [
		struct timespec64 ts;
		struct inode ip;

		memset(&ts, 0, sizeof(ts));
		ts = timestamp_truncate(ts, &ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct timespec64 ts;
		struct inode ip;

		memset(&ts, 0, sizeof(ts));
		ts = timestamp_truncate(ts, &ip);
	]],
	    [["Dual BSD/GPL"]])], [timestamp_truncate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timestamp_truncate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct timespec64 ts;
		struct inode ip;

		memset(&ts, 0, sizeof(ts));
		ts = timestamp_truncate(ts, &ip);
	]], [[]])], [timestamp_truncate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timestamp_truncate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_times], [
		#include <linux/fs.h>
	], [
		struct inode ip;
		struct timespec ts;

		memset(&ip, 0, sizeof(ip));
		ts = ip.i_mtime;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode ip;
		struct timespec ts;

		memset(&ip, 0, sizeof(ip));
		ts = ip.i_mtime;
	]],
	    [["Dual BSD/GPL"]])], [inode_times])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_times], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode ip;
		struct timespec ts;

		memset(&ip, 0, sizeof(ip));
		ts = ip.i_mtime;
	]], [[]])], [inode_times_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_times_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_LOCK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_lock], [
		#include <linux/fs.h>
	], [
		struct inode *inode = NULL;
		inode_lock_shared(inode);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode *inode = NULL;
		inode_lock_shared(inode);
	]],
	    [["Dual BSD/GPL"]])], [inode_lock])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_lock], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode *inode = NULL;
		inode_lock_shared(inode);
	]], [[]])], [inode_lock_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_lock_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GROUP_INFO_GID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([group_info_gid], [
		#include <linux/cred.h>
	], [
		struct group_info gi __attribute__ ((unused)) = {};
		gi.gid[0] = KGIDT_INIT(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
	]], [[
		struct group_info gi __attribute__ ((unused)) = {};
		gi.gid[0] = KGIDT_INIT(0);
	]],
	    [["Dual BSD/GPL"]])], [group_info_gid])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([group_info_gid], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
	]], [[
		struct group_info gi __attribute__ ((unused)) = {};
		gi.gid[0] = KGIDT_INIT(0);
	]], [[]])], [group_info_gid_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([group_info_gid_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RW
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WRITE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kernel_write], [
		#include <linux/fs.h>
	], [
		struct file *file = NULL;
		const void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_write(file, buf, count, pos);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *file = NULL;
		const void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_write(file, buf, count, pos);
	]],
	    [["Dual BSD/GPL"]])], [kernel_write])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_write], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *file = NULL;
		const void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_write(file, buf, count, pos);
	]], [[]])], [kernel_write_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_write_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_READ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kernel_read], [
		#include <linux/fs.h>
	], [
		struct file *file = NULL;
		void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_read(file, buf, count, pos);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *file = NULL;
		void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_read(file, buf, count, pos);
	]],
	    [["Dual BSD/GPL"]])], [kernel_read])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_read], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *file = NULL;
		void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_read(file, buf, count, pos);
	]], [[]])], [kernel_read_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_read_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TIMER_SETUP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([timer_setup], [
		#include <linux/timer.h>

		struct my_task_timer {
			struct timer_list timer;
			int data;
		};

		void task_expire(struct timer_list *tl)
		{
			struct my_task_timer *task_timer =
			    from_timer(task_timer, tl, timer);
			task_timer->data = 42;
		}
	], [
		struct my_task_timer task_timer;
		timer_setup(&task_timer.timer, task_expire, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/timer.h>

		struct my_task_timer {
			struct timer_list timer;
			int data;
		};

		void task_expire(struct timer_list *tl)
		{
			struct my_task_timer *task_timer =
			    from_timer(task_timer, tl, timer);
			task_timer->data = 42;
		}
	]], [[
		struct my_task_timer task_timer;
		timer_setup(&task_timer.timer, task_expire, 0);
	]],
	    [["Dual BSD/GPL"]])], [timer_setup])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_setup], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/timer.h>

		struct my_task_timer {
			struct timer_list timer;
			int data;
		};

		void task_expire(struct timer_list *tl)
		{
			struct my_task_timer *task_timer =
			    from_timer(task_timer, tl, timer);
			task_timer->data = 42;
		}
	]], [[
		struct my_task_timer task_timer;
		timer_setup(&task_timer.timer, task_expire, 0);
	]], [[]])], [timer_setup_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_setup_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([timer_list_function], [
		#include <linux/timer.h>
		void task_expire(struct timer_list *tl) {}
	], [
		struct timer_list tl;
		tl.function = task_expire;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/timer.h>
		void task_expire(struct timer_list *tl) {}
	]], [[
		struct timer_list tl;
		tl.function = task_expire;
	]],
	    [["Dual BSD/GPL"]])], [timer_list_function])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_list_function], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/timer.h>
		void task_expire(struct timer_list *tl) {}
	]], [[
		struct timer_list tl;
		tl.function = task_expire;
	]], [[]])], [timer_list_function_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_list_function_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([timer_list_flags], [
		#include <linux/timer.h>
	], [
		struct timer_list tl;
		tl.flags = 2;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/timer.h>
	]], [[
		struct timer_list tl;
		tl.flags = 2;
	]],
	    [["Dual BSD/GPL"]])], [timer_list_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_list_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/timer.h>
	]], [[
		struct timer_list tl;
		tl.flags = 2;
	]], [[]])], [timer_list_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_list_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SUPER_USER_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_user_ns], [
		#include <linux/fs.h>
		#include <linux/user_namespace.h>
	], [
		struct super_block super;
		super.s_user_ns = (struct user_namespace *)NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/user_namespace.h>
	]], [[
		struct super_block super;
		super.s_user_ns = (struct user_namespace *)NULL;
	]],
	    [["Dual BSD/GPL"]])], [super_user_ns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_user_ns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/user_namespace.h>
	]], [[
		struct super_block super;
		super.s_user_ns = (struct user_namespace *)NULL;
	]], [[]])], [super_user_ns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_user_ns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PROC_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([proc_ops_struct], [
		#include <linux/proc_fs.h>

		int test_open(struct inode *ip, struct file *fp) { return 0; }
		ssize_t test_read(struct file *fp, char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		ssize_t test_write(struct file *fp, const char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		loff_t test_lseek(struct file *fp, loff_t off, int flag)
		    { return 0; }
		int test_release(struct inode *ip, struct file *fp)
		    { return 0; }

		const struct proc_ops test_ops __attribute__ ((unused)) = {
			.proc_open      = test_open,
			.proc_read      = test_read,
			.proc_write	= test_write,
			.proc_lseek     = test_lseek,
			.proc_release   = test_release,
		};
	], [
		struct proc_dir_entry *entry __attribute__ ((unused)) =
		    proc_create_data("test", 0444, NULL, &test_ops, NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/proc_fs.h>

		int test_open(struct inode *ip, struct file *fp) { return 0; }
		ssize_t test_read(struct file *fp, char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		ssize_t test_write(struct file *fp, const char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		loff_t test_lseek(struct file *fp, loff_t off, int flag)
		    { return 0; }
		int test_release(struct inode *ip, struct file *fp)
		    { return 0; }

		const struct proc_ops test_ops __attribute__ ((unused)) = {
			.proc_open      = test_open,
			.proc_read      = test_read,
			.proc_write	= test_write,
			.proc_lseek     = test_lseek,
			.proc_release   = test_release,
		};
	]], [[
		struct proc_dir_entry *entry __attribute__ ((unused)) =
		    proc_create_data("test", 0444, NULL, &test_ops, NULL);
	]],
	    [["Dual BSD/GPL"]])], [proc_ops_struct])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([proc_ops_struct], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/proc_fs.h>

		int test_open(struct inode *ip, struct file *fp) { return 0; }
		ssize_t test_read(struct file *fp, char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		ssize_t test_write(struct file *fp, const char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		loff_t test_lseek(struct file *fp, loff_t off, int flag)
		    { return 0; }
		int test_release(struct inode *ip, struct file *fp)
		    { return 0; }

		const struct proc_ops test_ops __attribute__ ((unused)) = {
			.proc_open      = test_open,
			.proc_read      = test_read,
			.proc_write	= test_write,
			.proc_lseek     = test_lseek,
			.proc_release   = test_release,
		};
	]], [[
		struct proc_dir_entry *entry __attribute__ ((unused)) =
		    proc_create_data("test", 0444, NULL, &test_ops, NULL);
	]], [[]])], [proc_ops_struct_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([proc_ops_struct_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_CHECK_EVENTS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([block_device_operations_check_events], [
		#include <linux/blkdev.h>

		unsigned int blk_check_events(struct gendisk *disk,
		    unsigned int clearing) {
			(void) disk, (void) clearing;
			return (0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.check_events	= blk_check_events,
		};
	], [], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>

		unsigned int blk_check_events(struct gendisk *disk,
		    unsigned int clearing) {
			(void) disk, (void) clearing;
			return (0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.check_events	= blk_check_events,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [block_device_operations_check_events])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_check_events], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>

		unsigned int blk_check_events(struct gendisk *disk,
		    unsigned int clearing) {
			(void) disk, (void) clearing;
			return (0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.check_events	= blk_check_events,
		};
	]], [[]], [[]])], [block_device_operations_check_events_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_check_events_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_RELEASE_VOID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([block_device_operations_release_void], [
		#include <linux/blkdev.h>

		void blk_release(struct gendisk *g, fmode_t mode) {
			(void) g, (void) mode;
			return;
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.open		= NULL,
			.release	= blk_release,
			.ioctl		= NULL,
			.compat_ioctl	= NULL,
		};
	], [], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>

		void blk_release(struct gendisk *g, fmode_t mode) {
			(void) g, (void) mode;
			return;
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.open		= NULL,
			.release	= blk_release,
			.ioctl		= NULL,
			.compat_ioctl	= NULL,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [block_device_operations_release_void])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_release_void], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>

		void blk_release(struct gendisk *g, fmode_t mode) {
			(void) g, (void) mode;
			return;
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.open		= NULL,
			.release	= blk_release,
			.ioctl		= NULL,
			.compat_ioctl	= NULL,
		};
	]], [[]], [[]])], [block_device_operations_release_void_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_release_void_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([block_device_operations_revalidate_disk], [
		#include <linux/blkdev.h>

		int blk_revalidate_disk(struct gendisk *disk) {
			(void) disk;
			return(0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.revalidate_disk	= blk_revalidate_disk,
		};
	], [], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>

		int blk_revalidate_disk(struct gendisk *disk) {
			(void) disk;
			return(0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.revalidate_disk	= blk_revalidate_disk,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [block_device_operations_revalidate_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_revalidate_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>

		int blk_revalidate_disk(struct gendisk *disk) {
			(void) disk;
			return(0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.revalidate_disk	= blk_revalidate_disk,
		};
	]], [[]], [[]])], [block_device_operations_revalidate_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_revalidate_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_REQ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_failfast_mask], [
		#include <linux/bio.h>
	], [
		int flags __attribute__ ((unused));
		flags = REQ_FAILFAST_MASK;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_FAILFAST_MASK;
	]],
	    [["Dual BSD/GPL"]])], [req_failfast_mask])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_failfast_mask], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_FAILFAST_MASK;
	]], [[]])], [req_failfast_mask_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_failfast_mask_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_discard], [
		#include <linux/bio.h>
	], [
		int flags __attribute__ ((unused));
		flags = REQ_DISCARD;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_DISCARD;
	]],
	    [["Dual BSD/GPL"]])], [req_discard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_discard], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_DISCARD;
	]], [[]])], [req_discard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_discard_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_flush], [
		#include <linux/bio.h>
	], [
		int flags __attribute__ ((unused));
		flags = REQ_FLUSH;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_FLUSH;
	]],
	    [["Dual BSD/GPL"]])], [req_flush])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_flush], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_FLUSH;
	]], [[]])], [req_flush_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_flush_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_preflush], [
		#include <linux/bio.h>
	], [
		int flags __attribute__ ((unused));
		flags = REQ_PREFLUSH;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_PREFLUSH;
	]],
	    [["Dual BSD/GPL"]])], [req_preflush])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_preflush], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_PREFLUSH;
	]], [[]])], [req_preflush_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_preflush_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_OPS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_op_discard], [
		#include <linux/blk_types.h>
	], [
		int op __attribute__ ((unused)) = REQ_OP_DISCARD;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_DISCARD;
	]],
	    [["Dual BSD/GPL"]])], [req_op_discard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_discard], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_DISCARD;
	]], [[]])], [req_op_discard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_discard_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_op_secure_erase], [
		#include <linux/blk_types.h>
	], [
		int op __attribute__ ((unused)) = REQ_OP_SECURE_ERASE;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_SECURE_ERASE;
	]],
	    [["Dual BSD/GPL"]])], [req_op_secure_erase])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_secure_erase], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_SECURE_ERASE;
	]], [[]])], [req_op_secure_erase_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_secure_erase_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_op_flush], [
		#include <linux/blk_types.h>
	], [
		int op __attribute__ ((unused)) = REQ_OP_FLUSH;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_FLUSH;
	]],
	    [["Dual BSD/GPL"]])], [req_op_flush])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_flush], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_FLUSH;
	]], [[]])], [req_op_flush_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_flush_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bi_opf], [
		#include <linux/bio.h>
	], [
		struct bio bio __attribute__ ((unused));
		bio.bi_opf = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio bio __attribute__ ((unused));
		bio.bi_opf = 0;
	]],
	    [["Dual BSD/GPL"]])], [bio_bi_opf])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bi_opf], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio bio __attribute__ ((unused));
		bio.bi_opf = 0;
	]], [[]])], [bio_bi_opf_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bi_opf_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_set_op_attrs], [
		#include <linux/bio.h>
	], [
		struct bio *bio __attribute__ ((unused)) = NULL;
		bio_set_op_attrs(bio, 0, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio *bio __attribute__ ((unused)) = NULL;
		bio_set_op_attrs(bio, 0, 0);
	]],
	    [["Dual BSD/GPL"]])], [bio_set_op_attrs])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_op_attrs], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio *bio __attribute__ ((unused)) = NULL;
		bio_set_op_attrs(bio, 0, 0);
	]], [[]])], [bio_set_op_attrs_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_op_attrs_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_SET_DEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_set_dev], [
		#include <linux/bio.h>
		#include <linux/fs.h>
	], [
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		bio_set_dev(bio, bdev);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		bio_set_dev(bio, bdev);
	]],
	    [["Dual BSD/GPL"]])], [bio_set_dev])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_dev], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		bio_set_dev(bio, bdev);
	]], [[ZFS_META_LICENSE]])], [bio_set_dev_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_dev_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_END_IO_T_ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_end_io_t_args], [
		#include <linux/bio.h>
		void wanted_end_io(struct bio *bio) { return; }
		bio_end_io_t *end_io __attribute__ ((unused)) = wanted_end_io;
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
		void wanted_end_io(struct bio *bio) { return; }
		bio_end_io_t *end_io __attribute__ ((unused)) = wanted_end_io;
	]], [[]],
	    [["Dual BSD/GPL"]])], [bio_end_io_t_args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_end_io_t_args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
		void wanted_end_io(struct bio *bio) { return; }
		bio_end_io_t *end_io __attribute__ ((unused)) = wanted_end_io;
	]], [[]], [[]])], [bio_end_io_t_args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_end_io_t_args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_BI_STATUS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bi_status], [
		#include <linux/bio.h>
	], [
		struct bio bio __attribute__ ((unused));
		blk_status_t status __attribute__ ((unused)) = BLK_STS_OK;
		bio.bi_status = status;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio bio __attribute__ ((unused));
		blk_status_t status __attribute__ ((unused)) = BLK_STS_OK;
		bio.bi_status = status;
	]],
	    [["Dual BSD/GPL"]])], [bio_bi_status])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bi_status], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio bio __attribute__ ((unused));
		blk_status_t status __attribute__ ((unused)) = BLK_STS_OK;
		bio.bi_status = status;
	]], [[]])], [bio_bi_status_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bi_status_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_BVEC_ITER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bvec_iter], [
		#include <linux/bio.h>
	], [
		struct bio bio;
		bio.bi_iter.bi_sector = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio bio;
		bio.bi_iter.bi_sector = 0;
	]],
	    [["Dual BSD/GPL"]])], [bio_bvec_iter])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bvec_iter], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio bio;
		bio.bi_iter.bi_sector = 0;
	]], [[]])], [bio_bvec_iter_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bvec_iter_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_SUBMIT_BIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([submit_bio], [
		#include <linux/bio.h>
	], [
		struct bio *bio = NULL;
		(void) submit_bio(bio);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio *bio = NULL;
		(void) submit_bio(bio);
	]],
	    [["Dual BSD/GPL"]])], [submit_bio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([submit_bio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio *bio = NULL;
		(void) submit_bio(bio);
	]], [[]])], [submit_bio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([submit_bio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_CURRENT_BIO_LIST
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([current_bio_list], [
		#include <linux/sched.h>
	], [
		current->bio_list = (struct bio_list *) NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
	]], [[
		current->bio_list = (struct bio_list *) NULL;
	]],
	    [["Dual BSD/GPL"]])], [current_bio_list])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([current_bio_list], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
	]], [[
		current->bio_list = (struct bio_list *) NULL;
	]], [[]])], [current_bio_list_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([current_bio_list_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKG_TRYGET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkg_tryget], [
		#include <linux/blk-cgroup.h>
		#include <linux/bio.h>
		#include <linux/fs.h>
	], [
		struct blkcg_gq blkg __attribute__ ((unused)) = {};
		bool rc __attribute__ ((unused));
		rc = blkg_tryget(&blkg);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk-cgroup.h>
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		struct blkcg_gq blkg __attribute__ ((unused)) = {};
		bool rc __attribute__ ((unused));
		rc = blkg_tryget(&blkg);
	]],
	    [["Dual BSD/GPL"]])], [blkg_tryget])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkg_tryget], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk-cgroup.h>
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		struct blkcg_gq blkg __attribute__ ((unused)) = {};
		bool rc __attribute__ ((unused));
		rc = blkg_tryget(&blkg);
	]], [[ZFS_META_LICENSE]])], [blkg_tryget_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkg_tryget_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_BDEV_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bdev_disk], [
		#include <linux/blk_types.h>
		#include <linux/blkdev.h>
	], [
		struct bio *b = NULL;
		struct gendisk *d = b->bi_bdev->bd_disk;
		blk_register_queue(d);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk_types.h>
		#include <linux/blkdev.h>
	]], [[
		struct bio *b = NULL;
		struct gendisk *d = b->bi_bdev->bd_disk;
		blk_register_queue(d);
	]],
	    [["Dual BSD/GPL"]])], [bio_bdev_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bdev_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk_types.h>
		#include <linux/blkdev.h>
	]], [[
		struct bio *b = NULL;
		struct gendisk *d = b->bi_bdev->bd_disk;
		blk_register_queue(d);
	]], [[]])], [bio_bdev_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bdev_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BDEV_SUBMIT_BIO_RETURNS_VOID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bdev_submit_bio_void], [
		#include <linux/blkdev.h>
	], [
		struct block_device_operations *bdev = NULL;
		__attribute__((unused)) void(*f)(struct bio *) = bdev->submit_bio;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device_operations *bdev = NULL;
		__attribute__((unused)) void(*f)(struct bio *) = bdev->submit_bio;
	]],
	    [["Dual BSD/GPL"]])], [bio_bdev_submit_bio_void])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bdev_submit_bio_void], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device_operations *bdev = NULL;
		__attribute__((unused)) void(*f)(struct bio *) = bdev->submit_bio;
	]], [[]])], [bio_bdev_submit_bio_void_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bdev_submit_bio_void_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_SET_DEV_MACRO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_set_dev_macro], [
		#include <linux/bio.h>
		#include <linux/fs.h>
	], [
		#ifndef bio_set_dev
		#error Not a macro
		#endif
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		#ifndef bio_set_dev
		#error Not a macro
		#endif
	]],
	    [["Dual BSD/GPL"]])], [bio_set_dev_macro])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_dev_macro], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		#ifndef bio_set_dev
		#error Not a macro
		#endif
	]], [[ZFS_META_LICENSE]])], [bio_set_dev_macro_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_dev_macro_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_CGROUP_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_cgroup_header], [
		#include <linux/blk-cgroup.h>
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk-cgroup.h>
	]], [[]],
	    [["Dual BSD/GPL"]])], [blk_cgroup_header])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_cgroup_header], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk-cgroup.h>
	]], [[]], [[]])], [blk_cgroup_header_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_cgroup_header_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_ALLOC_4ARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_alloc_4arg], [
		#include <linux/bio.h>
	], [
		gfp_t gfp_mask = 0;
		unsigned short nr_iovecs = 0;
		struct block_device *bdev = NULL;
		unsigned int opf = 0;

		struct bio *__attribute__((unused)) allocated = bio_alloc(bdev, nr_iovecs, opf, gfp_mask);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		gfp_t gfp_mask = 0;
		unsigned short nr_iovecs = 0;
		struct block_device *bdev = NULL;
		unsigned int opf = 0;

		struct bio *__attribute__((unused)) allocated = bio_alloc(bdev, nr_iovecs, opf, gfp_mask);
	]],
	    [["Dual BSD/GPL"]])], [bio_alloc_4arg])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_alloc_4arg], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		gfp_t gfp_mask = 0;
		unsigned short nr_iovecs = 0;
		struct block_device *bdev = NULL;
		unsigned int opf = 0;

		struct bio *__attribute__((unused)) allocated = bio_alloc(bdev, nr_iovecs, opf, gfp_mask);
	]], [[]])], [bio_alloc_4arg_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_alloc_4arg_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_GET_BY_PATH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_get_by_path], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		const char *path = "path";
		fmode_t mode = 0;
		void *holder = NULL;

		bdev = blkdev_get_by_path(path, mode, holder);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		const char *path = "path";
		fmode_t mode = 0;
		void *holder = NULL;

		bdev = blkdev_get_by_path(path, mode, holder);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_get_by_path])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_get_by_path], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		const char *path = "path";
		fmode_t mode = 0;
		void *holder = NULL;

		bdev = blkdev_get_by_path(path, mode, holder);
	]], [[]])], [blkdev_get_by_path_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_get_by_path_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_PUT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_put], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		fmode_t mode = 0;

		blkdev_put(bdev, mode);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		fmode_t mode = 0;

		blkdev_put(bdev, mode);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_put])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_put], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		fmode_t mode = 0;

		blkdev_put(bdev, mode);
	]], [[]])], [blkdev_put_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_put_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_REREAD_PART
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_reread_part], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		int error;

		error = blkdev_reread_part(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		int error;

		error = blkdev_reread_part(bdev);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_reread_part])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_reread_part], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		int error;

		error = blkdev_reread_part(bdev);
	]], [[]])], [blkdev_reread_part_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_reread_part_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_INVALIDATE_BDEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([invalidate_bdev], [
		#include <linux/buffer_head.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		invalidate_bdev(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/buffer_head.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		invalidate_bdev(bdev);
	]],
	    [["Dual BSD/GPL"]])], [invalidate_bdev])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([invalidate_bdev], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/buffer_head.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		invalidate_bdev(bdev);
	]], [[]])], [invalidate_bdev_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([invalidate_bdev_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_LOOKUP_BDEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lookup_bdev_devt], [
		#include <linux/blkdev.h>
	], [
		int error __attribute__ ((unused));
		const char path[] = "/example/path";
		dev_t dev;

		error = lookup_bdev(path, &dev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		int error __attribute__ ((unused));
		const char path[] = "/example/path";
		dev_t dev;

		error = lookup_bdev(path, &dev);
	]],
	    [["Dual BSD/GPL"]])], [lookup_bdev_devt])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_devt], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		int error __attribute__ ((unused));
		const char path[] = "/example/path";
		dev_t dev;

		error = lookup_bdev(path, &dev);
	]], [[]])], [lookup_bdev_devt_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_devt_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lookup_bdev_1arg], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path);
	]],
	    [["Dual BSD/GPL"]])], [lookup_bdev_1arg])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_1arg], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path);
	]], [[]])], [lookup_bdev_1arg_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_1arg_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lookup_bdev_mode], [
		#include <linux/fs.h>
	], [
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path, FMODE_READ);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path, FMODE_READ);
	]],
	    [["Dual BSD/GPL"]])], [lookup_bdev_mode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_mode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path, FMODE_READ);
	]], [[]])], [lookup_bdev_mode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_mode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_LOGICAL_BLOCK_SIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_logical_block_size], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_logical_block_size(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_logical_block_size(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_logical_block_size])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_logical_block_size], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_logical_block_size(bdev);
	]], [[]])], [bdev_logical_block_size_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_logical_block_size_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_PHYSICAL_BLOCK_SIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_physical_block_size], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_physical_block_size(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_physical_block_size(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_physical_block_size])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_physical_block_size], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_physical_block_size(bdev);
	]], [[]])], [bdev_physical_block_size_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_physical_block_size_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_CHECK_DISK_CHANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([check_disk_change], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		bool error;

		error = check_disk_change(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		bool error;

		error = check_disk_change(bdev);
	]],
	    [["Dual BSD/GPL"]])], [check_disk_change])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([check_disk_change], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		bool error;

		error = check_disk_change(bdev);
	]], [[]])], [check_disk_change_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([check_disk_change_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_CHECK_MEDIA_CHANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_check_media_change], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		int error;

		error = bdev_check_media_change(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		int error;

		error = bdev_check_media_change(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_check_media_change])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_check_media_change], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		int error;

		error = bdev_check_media_change(bdev);
	]], [[]])], [bdev_check_media_change_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_check_media_change_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_WHOLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_whole], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		bdev = bdev_whole(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		bdev = bdev_whole(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_whole])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_whole], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		bdev = bdev_whole(bdev);
	]], [[]])], [bdev_whole_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_whole_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEVNAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdevname], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		char path[BDEVNAME_SIZE];

		(void) bdevname(bdev, path);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		char path[BDEVNAME_SIZE];

		(void) bdevname(bdev, path);
	]],
	    [["Dual BSD/GPL"]])], [bdevname])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdevname], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		char path[BDEVNAME_SIZE];

		(void) bdevname(bdev, path);
	]], [[]])], [bdevname_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdevname_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_ISSUE_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_issue_secure_erase], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_secure_erase(bdev,
		    sector, nr_sects, GFP_KERNEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_secure_erase(bdev,
		    sector, nr_sects, GFP_KERNEL);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_issue_secure_erase])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_issue_secure_erase], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_secure_erase(bdev,
		    sector, nr_sects, GFP_KERNEL);
	]], [[]])], [blkdev_issue_secure_erase_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_issue_secure_erase_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_issue_discard_flags], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		unsigned long flags = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_discard(bdev,
		    sector, nr_sects, GFP_KERNEL, flags);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		unsigned long flags = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_discard(bdev,
		    sector, nr_sects, GFP_KERNEL, flags);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_issue_discard_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_issue_discard_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		unsigned long flags = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_discard(bdev,
		    sector, nr_sects, GFP_KERNEL, flags);
	]], [[]])], [blkdev_issue_discard_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_issue_discard_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_KOBJ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_kobj], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
		#include <linux/kobject.h>
	], [
		struct block_device *bdev = NULL;
		struct kobject *disk_kobj;
		disk_kobj = bdev_kobj(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
		#include <linux/kobject.h>
	]], [[
		struct block_device *bdev = NULL;
		struct kobject *disk_kobj;
		disk_kobj = bdev_kobj(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_kobj])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_kobj], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
		#include <linux/kobject.h>
	]], [[
		struct block_device *bdev = NULL;
		struct kobject *disk_kobj;
		disk_kobj = bdev_kobj(bdev);
	]], [[]])], [bdev_kobj_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_kobj_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_PART_TO_DEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([part_to_dev], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct hd_struct *p = NULL;
		struct device *pdev;
		pdev = part_to_dev(p);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct hd_struct *p = NULL;
		struct device *pdev;
		pdev = part_to_dev(p);
	]],
	    [["Dual BSD/GPL"]])], [part_to_dev])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([part_to_dev], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct hd_struct *p = NULL;
		struct device *pdev;
		pdev = part_to_dev(p);
	]], [[]])], [part_to_dev_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([part_to_dev_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_PLUG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_plug], [
		#include <linux/blkdev.h>
	], [
		struct blk_plug plug __attribute__ ((unused));

		blk_start_plug(&plug);
		blk_finish_plug(&plug);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct blk_plug plug __attribute__ ((unused));

		blk_start_plug(&plug);
		blk_finish_plug(&plug);
	]],
	    [["Dual BSD/GPL"]])], [blk_plug])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_plug], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct blk_plug plug __attribute__ ((unused));

		blk_start_plug(&plug);
		blk_finish_plug(&plug);
	]], [[]])], [blk_plug_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_plug_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_BDI
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_bdi], [
		#include <linux/blkdev.h>
	], [
		struct request_queue q;
		struct backing_dev_info bdi;
		q.backing_dev_info = &bdi;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue q;
		struct backing_dev_info bdi;
		q.backing_dev_info = &bdi;
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_bdi])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_bdi], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue q;
		struct backing_dev_info bdi;
		q.backing_dev_info = &bdi;
	]], [[]])], [blk_queue_bdi_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_bdi_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_UPDATE_READAHEAD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_update_readahead], [
		#include <linux/blkdev.h>
	], [
		struct request_queue q;
		blk_queue_update_readahead(&q);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue q;
		blk_queue_update_readahead(&q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_update_readahead])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_update_readahead], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue q;
		blk_queue_update_readahead(&q);
	]], [[]])], [blk_queue_update_readahead_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_update_readahead_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([disk_update_readahead], [
		#include <linux/blkdev.h>
	], [
		struct gendisk disk;
		disk_update_readahead(&disk);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk disk;
		disk_update_readahead(&disk);
	]],
	    [["Dual BSD/GPL"]])], [disk_update_readahead])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([disk_update_readahead], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk disk;
		disk_update_readahead(&disk);
	]], [[]])], [disk_update_readahead_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([disk_update_readahead_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_DISCARD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_max_discard_sectors], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_discard_sectors(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_discard_sectors(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_max_discard_sectors])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_max_discard_sectors], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_discard_sectors(bdev);
	]], [[]])], [bdev_max_discard_sectors_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_max_discard_sectors_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_discard], [
		#include <linux/blkdev.h>
	], [
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_discard(q);
	], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_discard(q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_discard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_discard], [yes], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_discard(q);
	]], [[]])], [blk_queue_discard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_discard_license], [yes], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_max_secure_erase_sectors], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_secure_erase_sectors(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_secure_erase_sectors(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_max_secure_erase_sectors])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_max_secure_erase_sectors], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_secure_erase_sectors(bdev);
	]], [[]])], [bdev_max_secure_erase_sectors_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_max_secure_erase_sectors_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_secure_erase], [
		#include <linux/blkdev.h>
	], [
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secure_erase(q);
	], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secure_erase(q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_secure_erase])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_secure_erase], [yes], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secure_erase(q);
	]], [[]])], [blk_queue_secure_erase_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_secure_erase_license], [yes], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_secdiscard], [
		#include <linux/blkdev.h>
	], [
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secdiscard(q);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secdiscard(q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_secdiscard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_secdiscard], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secdiscard(q);
	]], [[]])], [blk_queue_secdiscard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_secdiscard_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLAG_SET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_flag_set], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	], [
		struct request_queue *q = NULL;
		blk_queue_flag_set(0, q);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q = NULL;
		blk_queue_flag_set(0, q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_flag_set])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flag_set], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q = NULL;
		blk_queue_flag_set(0, q);
	]], [[]])], [blk_queue_flag_set_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flag_set_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLAG_CLEAR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_flag_clear], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	], [
		struct request_queue *q = NULL;
		blk_queue_flag_clear(0, q);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q = NULL;
		blk_queue_flag_clear(0, q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_flag_clear])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flag_clear], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q = NULL;
		blk_queue_flag_clear(0, q);
	]], [[]])], [blk_queue_flag_clear_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flag_clear_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_flush], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_flush(q, REQ_FLUSH);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_flush(q, REQ_FLUSH);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_flush])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flush], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_flush(q, REQ_FLUSH);
	]], [[ZFS_META_LICENSE]])], [blk_queue_flush_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flush_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_write_cache], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		blk_queue_write_cache(q, true, true);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		blk_queue_write_cache(q, true, true);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_write_cache])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_write_cache], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		blk_queue_write_cache(q, true, true);
	]], [[ZFS_META_LICENSE]])], [blk_queue_write_cache_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_write_cache_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_MAX_HW_SECTORS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_max_hw_sectors], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_hw_sectors(q, BLK_SAFE_MAX_SECTORS);
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_hw_sectors(q, BLK_SAFE_MAX_SECTORS);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_max_hw_sectors])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_max_hw_sectors], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_hw_sectors(q, BLK_SAFE_MAX_SECTORS);
	]], [[]])], [blk_queue_max_hw_sectors_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_max_hw_sectors_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_MAX_SEGMENTS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_max_segments], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_segments(q, BLK_MAX_SEGMENTS);
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_segments(q, BLK_MAX_SEGMENTS);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_max_segments])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_max_segments], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_segments(q, BLK_MAX_SEGMENTS);
	]], [[]])], [blk_queue_max_segments_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_max_segments_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_MQ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_mq], [
		#include <linux/blk-mq.h>
	], [
		struct blk_mq_tag_set tag_set __attribute__ ((unused)) = {0};
		(void) blk_mq_alloc_tag_set(&tag_set);
		return BLK_STS_OK;
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk-mq.h>
	]], [[
		struct blk_mq_tag_set tag_set __attribute__ ((unused)) = {0};
		(void) blk_mq_alloc_tag_set(&tag_set);
		return BLK_STS_OK;
	]],
	    [["Dual BSD/GPL"]])], [blk_mq])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_mq], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk-mq.h>
	]], [[
		struct blk_mq_tag_set tag_set __attribute__ ((unused)) = {0};
		(void) blk_mq_alloc_tag_set(&tag_set);
		return BLK_STS_OK;
	]], [[]])], [blk_mq_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_mq_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENHD_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([genhd_fl_ext_devt], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_EXT_DEVT;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_EXT_DEVT;
	]],
	    [["Dual BSD/GPL"]])], [genhd_fl_ext_devt])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_ext_devt], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_EXT_DEVT;
	]], [[]])], [genhd_fl_ext_devt_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_ext_devt_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([genhd_fl_no_part], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART;
	]],
	    [["Dual BSD/GPL"]])], [genhd_fl_no_part])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_no_part], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART;
	]], [[]])], [genhd_fl_no_part_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_no_part_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([genhd_fl_no_part_scan], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART_SCAN;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART_SCAN;
	]],
	    [["Dual BSD/GPL"]])], [genhd_fl_no_part_scan])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_no_part_scan], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART_SCAN;
	]], [[]])], [genhd_fl_no_part_scan_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_no_part_scan_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_REVALIDATE_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([revalidate_disk_size], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		(void) revalidate_disk_size(disk, false);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		(void) revalidate_disk_size(disk, false);
	]],
	    [["Dual BSD/GPL"]])], [revalidate_disk_size])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([revalidate_disk_size], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		(void) revalidate_disk_size(disk, false);
	]], [[]])], [revalidate_disk_size_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([revalidate_disk_size_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([revalidate_disk], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		(void) revalidate_disk(disk);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		(void) revalidate_disk(disk);
	]],
	    [["Dual BSD/GPL"]])], [revalidate_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([revalidate_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		(void) revalidate_disk(disk);
	]], [[]])], [revalidate_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([revalidate_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GET_DISK_RO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([get_disk_ro], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk __attribute__ ((unused)) = NULL;
		(void) get_disk_ro(disk);
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk __attribute__ ((unused)) = NULL;
		(void) get_disk_ro(disk);
	]],
	    [["Dual BSD/GPL"]])], [get_disk_ro])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([get_disk_ro], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk __attribute__ ((unused)) = NULL;
		(void) get_disk_ro(disk);
	]], [[]])], [get_disk_ro_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([get_disk_ro_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_READLINK_GLOBAL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_readlink_global], [
		#include <linux/fs.h>
	], [
		int i __attribute__ ((unused));
		i = generic_readlink(NULL, NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		int i __attribute__ ((unused));
		i = generic_readlink(NULL, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [generic_readlink_global])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_readlink_global], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		int i __attribute__ ((unused));
		i = generic_readlink(NULL, NULL, 0);
	]], [[]])], [generic_readlink_global_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_readlink_global_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_DISCARD_GRANULARITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([discard_granularity], [
		#include <linux/blkdev.h>
	], [
		struct queue_limits ql __attribute__ ((unused));
		ql.discard_granularity = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct queue_limits ql __attribute__ ((unused));
		ql.discard_granularity = 0;
	]],
	    [["Dual BSD/GPL"]])], [discard_granularity])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([discard_granularity], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct queue_limits ql __attribute__ ((unused));
		ql.discard_granularity = 0;
	]], [[]])], [discard_granularity_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([discard_granularity_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_OWNER_OR_CAPABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_owner_or_capable], [
		#include <linux/fs.h>
	], [
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(ip);
	]],
	    [["Dual BSD/GPL"]])], [inode_owner_or_capable])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(ip);
	]], [[]])], [inode_owner_or_capable_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_owner_or_capable_userns], [
		#include <linux/fs.h>
	], [
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&init_user_ns, ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&init_user_ns, ip);
	]],
	    [["Dual BSD/GPL"]])], [inode_owner_or_capable_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&init_user_ns, ip);
	]], [[]])], [inode_owner_or_capable_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_owner_or_capable_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/mnt_idmapping.h>
	], [
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&nop_mnt_idmap, ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/mnt_idmapping.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&nop_mnt_idmap, ip);
	]],
	    [["Dual BSD/GPL"]])], [inode_owner_or_capable_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/mnt_idmapping.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&nop_mnt_idmap, ip);
	]], [[]])], [inode_owner_or_capable_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONST_XATTR_HANDLER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([const_xattr_handler], [
		#include <linux/fs.h>
		#include <linux/xattr.h>

		const struct xattr_handler xattr_test_handler = {
			.prefix	= "test",
			.get	= NULL,
			.set	= NULL,
		};

		const struct xattr_handler *xattr_handlers[] = {
			&xattr_test_handler,
		};

		const struct super_block sb __attribute__ ((unused)) = {
			.s_xattr = xattr_handlers,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/xattr.h>

		const struct xattr_handler xattr_test_handler = {
			.prefix	= "test",
			.get	= NULL,
			.set	= NULL,
		};

		const struct xattr_handler *xattr_handlers[] = {
			&xattr_test_handler,
		};

		const struct super_block sb __attribute__ ((unused)) = {
			.s_xattr = xattr_handlers,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [const_xattr_handler])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([const_xattr_handler], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/xattr.h>

		const struct xattr_handler xattr_test_handler = {
			.prefix	= "test",
			.get	= NULL,
			.set	= NULL,
		};

		const struct xattr_handler *xattr_handlers[] = {
			&xattr_test_handler,
		};

		const struct super_block sb __attribute__ ((unused)) = {
			.s_xattr = xattr_handlers,
		};
	]], [[]], [[]])], [const_xattr_handler_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([const_xattr_handler_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR_HANDLER_NAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_name], [
		#include <linux/xattr.h>

		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.name = XATTR_NAME_POSIX_ACL_ACCESS,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.name = XATTR_NAME_POSIX_ACL_ACCESS,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_name])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_name], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.name = XATTR_NAME_POSIX_ACL_ACCESS,
		};
	]], [[]], [[]])], [xattr_handler_name_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_name_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR_HANDLER_GET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry_inode], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_get_dentry_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]], [[]])], [xattr_handler_get_dentry_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_get_xattr_handler], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_get_xattr_handler])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_xattr_handler], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]], [[]])], [xattr_handler_get_xattr_handler_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_xattr_handler_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry], [
		#include <linux/xattr.h>

		int get(struct dentry *dentry, const char *name,
		    void *buffer, size_t size, int handler_flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int get(struct dentry *dentry, const char *name,
		    void *buffer, size_t size, int handler_flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_get_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int get(struct dentry *dentry, const char *name,
		    void *buffer, size_t size, int handler_flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]], [[]])], [xattr_handler_get_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry_inode_flags], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer,
		    size_t size, int flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer,
		    size_t size, int flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_get_dentry_inode_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_inode_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer,
		    size_t size, int flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]], [[]])], [xattr_handler_get_dentry_inode_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_inode_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR_HANDLER_SET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_mnt_idmap], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct mnt_idmap *idmap,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct mnt_idmap *idmap,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct mnt_idmap *idmap,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_userns], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct user_namespace *mnt_userns,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct user_namespace *mnt_userns,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct user_namespace *mnt_userns,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_dentry_inode], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, const void *buffer,
		    size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, const void *buffer,
		    size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_dentry_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_dentry_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, const void *buffer,
		    size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_dentry_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_dentry_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_xattr_handler], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_xattr_handler])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_xattr_handler], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_xattr_handler_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_xattr_handler_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_dentry], [
		#include <linux/xattr.h>

		int set(struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR_HANDLER_LIST
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_list_simple], [
		#include <linux/xattr.h>

		bool list(struct dentry *dentry) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		bool list(struct dentry *dentry) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_list_simple])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_simple], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		bool list(struct dentry *dentry) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]], [[]])], [xattr_handler_list_simple_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_simple_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_list_xattr_handler], [
		#include <linux/xattr.h>

		size_t list(const struct xattr_handler *handler,
		    struct dentry *dentry, char *list, size_t list_size,
		    const char *name, size_t name_len) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		size_t list(const struct xattr_handler *handler,
		    struct dentry *dentry, char *list, size_t list_size,
		    const char *name, size_t name_len) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_list_xattr_handler])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_xattr_handler], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		size_t list(const struct xattr_handler *handler,
		    struct dentry *dentry, char *list, size_t list_size,
		    const char *name, size_t name_len) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]], [[]])], [xattr_handler_list_xattr_handler_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_xattr_handler_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_list_dentry], [
		#include <linux/xattr.h>

		size_t list(struct dentry *dentry,
		    char *list, size_t list_size,
		    const char *name, size_t name_len,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		size_t list(struct dentry *dentry,
		    char *list, size_t list_size,
		    const char *name, size_t name_len,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_list_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		size_t list(struct dentry *dentry,
		    char *list, size_t list_size,
		    const char *name, size_t name_len,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]], [[]])], [xattr_handler_list_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_FROM_XATTR_USERNS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_from_xattr_userns], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl_xattr.h>
	], [
		posix_acl_from_xattr(&init_user_ns, NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl_xattr.h>
	]], [[
		posix_acl_from_xattr(&init_user_ns, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_from_xattr_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_from_xattr_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl_xattr.h>
	]], [[
		posix_acl_from_xattr(&init_user_ns, NULL, 0);
	]], [[]])], [posix_acl_from_xattr_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_from_xattr_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_SETXATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([have_generic_setxattr], [
		#include <linux/fs.h>
		#include <linux/xattr.h>

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setxattr = generic_setxattr
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/xattr.h>

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setxattr = generic_setxattr
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [have_generic_setxattr])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([have_generic_setxattr], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/xattr.h>

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setxattr = generic_setxattr
		};
	]], [[]], [[]])], [have_generic_setxattr_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([have_generic_setxattr_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ACL
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_RELEASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_release], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		struct posix_acl *tmp = posix_acl_alloc(1, 0);
		posix_acl_release(tmp);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct posix_acl *tmp = posix_acl_alloc(1, 0);
		posix_acl_release(tmp);
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_release])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_release], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct posix_acl *tmp = posix_acl_alloc(1, 0);
		posix_acl_release(tmp);
	]], [[ZFS_META_LICENSE]])], [posix_acl_release_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_release_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SET_CACHED_ACL_USABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([set_cached_acl], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		struct inode *ip = NULL;
		struct posix_acl *acl = posix_acl_alloc(1, 0);
		set_cached_acl(ip, ACL_TYPE_ACCESS, acl);
		forget_cached_acl(ip, ACL_TYPE_ACCESS);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct inode *ip = NULL;
		struct posix_acl *acl = posix_acl_alloc(1, 0);
		set_cached_acl(ip, ACL_TYPE_ACCESS, acl);
		forget_cached_acl(ip, ACL_TYPE_ACCESS);
	]],
	    [["Dual BSD/GPL"]])], [set_cached_acl])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_cached_acl], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct inode *ip = NULL;
		struct posix_acl *acl = posix_acl_alloc(1, 0);
		set_cached_acl(ip, ACL_TYPE_ACCESS, acl);
		forget_cached_acl(ip, ACL_TYPE_ACCESS);
	]], [[ZFS_META_LICENSE]])], [set_cached_acl_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_cached_acl_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_CHMOD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_chmod], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		posix_acl_chmod(NULL, 0, 0)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		posix_acl_chmod(NULL, 0, 0)
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_chmod])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_chmod], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		posix_acl_chmod(NULL, 0, 0)
	]], [[]])], [posix_acl_chmod_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_chmod_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([__posix_acl_chmod], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		__posix_acl_chmod(NULL, 0, 0)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		__posix_acl_chmod(NULL, 0, 0)
	]],
	    [["Dual BSD/GPL"]])], [__posix_acl_chmod])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__posix_acl_chmod], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		__posix_acl_chmod(NULL, 0, 0)
	]], [[]])], [__posix_acl_chmod_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__posix_acl_chmod_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_EQUIV_MODE_WANTS_UMODE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_equiv_mode], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		umode_t tmp;
		posix_acl_equiv_mode(NULL, &tmp);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		umode_t tmp;
		posix_acl_equiv_mode(NULL, &tmp);
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_equiv_mode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_equiv_mode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		umode_t tmp;
		posix_acl_equiv_mode(NULL, &tmp);
	]], [[]])], [posix_acl_equiv_mode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_equiv_mode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_VALID_WITH_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_valid_with_ns], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		struct user_namespace *user_ns = NULL;
		const struct posix_acl *acl = NULL;
		int error;

		error = posix_acl_valid(user_ns, acl);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct user_namespace *user_ns = NULL;
		const struct posix_acl *acl = NULL;
		int error;

		error = posix_acl_valid(user_ns, acl);
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_valid_with_ns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_valid_with_ns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct user_namespace *user_ns = NULL;
		const struct posix_acl *acl = NULL;
		int error;

		error = posix_acl_valid(user_ns, acl);
	]], [[]])], [posix_acl_valid_with_ns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_valid_with_ns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_OPERATIONS_GET_ACL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_acl], [
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type)
		    { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type)
		    { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_acl])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_acl], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type)
		    { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_get_acl_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_acl_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_acl_rcu], [
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_acl_rcu])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_acl_rcu], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_get_acl_rcu_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_acl_rcu_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_inode_acl], [
		#include <linux/fs.h>

		struct posix_acl *get_inode_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_inode_acl = get_inode_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		struct posix_acl *get_inode_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_inode_acl = get_inode_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_inode_acl])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_inode_acl], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		struct posix_acl *get_inode_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_inode_acl = get_inode_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_get_inode_acl_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_inode_acl_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_OPERATIONS_SET_ACL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_set_acl_mnt_idmap_dentry], [
		#include <linux/fs.h>

		int set_acl_fn(struct mnt_idmap *idmap,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int set_acl_fn(struct mnt_idmap *idmap,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_set_acl_mnt_idmap_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_mnt_idmap_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int set_acl_fn(struct mnt_idmap *idmap,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_set_acl_mnt_idmap_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_mnt_idmap_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_set_acl_userns_dentry], [
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_set_acl_userns_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_userns_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_set_acl_userns_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_userns_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_set_acl_userns], [
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_set_acl_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_set_acl_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_set_acl], [
		#include <linux/fs.h>

		int set_acl_fn(struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int set_acl_fn(struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_set_acl])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int set_acl_fn(struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_set_acl_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GET_ACL_HANDLE_CACHE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([get_acl_handle_cache], [
		#include <linux/fs.h>
	], [
		void *sentinel __attribute__ ((unused)) =
		    uncached_acl_sentinel(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		void *sentinel __attribute__ ((unused)) =
		    uncached_acl_sentinel(NULL);
	]],
	    [["Dual BSD/GPL"]])], [get_acl_handle_cache])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([get_acl_handle_cache], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		void *sentinel __attribute__ ((unused)) =
		    uncached_acl_sentinel(NULL);
	]], [[]])], [get_acl_handle_cache_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([get_acl_handle_cache_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ACL_HAS_REFCOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([acl_refcount], [
		#include <linux/backing-dev.h>
		#include <linux/refcount.h>
		#include <linux/posix_acl.h>
	], [
		struct posix_acl acl;
		refcount_t *r __attribute__ ((unused)) = &acl.a_refcount;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/backing-dev.h>
		#include <linux/refcount.h>
		#include <linux/posix_acl.h>
	]], [[
		struct posix_acl acl;
		refcount_t *r __attribute__ ((unused)) = &acl.a_refcount;
	]],
	    [["Dual BSD/GPL"]])], [acl_refcount])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([acl_refcount], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/backing-dev.h>
		#include <linux/refcount.h>
		#include <linux/posix_acl.h>
	]], [[
		struct posix_acl acl;
		refcount_t *r __attribute__ ((unused)) = &acl.a_refcount;
	]], [[]])], [acl_refcount_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([acl_refcount_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_SETATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_setattr_mnt_idmap], [
		#include <linux/fs.h>

		int test_setattr(
		    struct mnt_idmap *idmap,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_setattr(
		    struct mnt_idmap *idmap,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_setattr_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_setattr(
		    struct mnt_idmap *idmap,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]], [[]])], [inode_operations_setattr_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_setattr_userns], [
		#include <linux/fs.h>

		int test_setattr(
		    struct user_namespace *userns,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_setattr(
		    struct user_namespace *userns,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_setattr_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_setattr(
		    struct user_namespace *userns,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]], [[]])], [inode_operations_setattr_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_setattr], [
		#include <linux/fs.h>

		int test_setattr(
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_setattr(
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_setattr])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_setattr(
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]], [[]])], [inode_operations_setattr_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_GETATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_getattr_mnt_idmap], [
		#include <linux/fs.h>

		int test_getattr(
		    struct mnt_idmap *idmap,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_getattr(
		    struct mnt_idmap *idmap,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_getattr_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_getattr(
		    struct mnt_idmap *idmap,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]], [[]])], [inode_operations_getattr_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_getattr_userns], [
		#include <linux/fs.h>

		int test_getattr(
			struct user_namespace *userns,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_getattr(
			struct user_namespace *userns,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_getattr_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_getattr(
			struct user_namespace *userns,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]], [[]])], [inode_operations_getattr_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_getattr_path], [
		#include <linux/fs.h>

		int test_getattr(
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_getattr(
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_getattr_path])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_path], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_getattr(
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]], [[]])], [inode_operations_getattr_path_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_path_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_getattr_vfsmount], [
		#include <linux/fs.h>

		int test_getattr(
		    struct vfsmount *mnt, struct dentry *d,
		    struct kstat *k)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_getattr(
		    struct vfsmount *mnt, struct dentry *d,
		    struct kstat *k)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_getattr_vfsmount])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_vfsmount], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_getattr(
		    struct vfsmount *mnt, struct dentry *d,
		    struct kstat *k)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]], [[]])], [inode_operations_getattr_vfsmount_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_vfsmount_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_SET_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_set_flags], [
		#include <linux/fs.h>
	], [
		struct inode inode;
		inode_set_flags(&inode, S_IMMUTABLE, S_IMMUTABLE);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode inode;
		inode_set_flags(&inode, S_IMMUTABLE, S_IMMUTABLE);
	]],
	    [["Dual BSD/GPL"]])], [inode_set_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_set_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode inode;
		inode_set_flags(&inode, S_IMMUTABLE, S_IMMUTABLE);
	]], [[]])], [inode_set_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_set_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_SET_IVERSION
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_set_iversion], [
		#include <linux/iversion.h>
	], [
		struct inode inode;
		inode_set_iversion(&inode, 1);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/iversion.h>
	]], [[
		struct inode inode;
		inode_set_iversion(&inode, 1);
	]],
	    [["Dual BSD/GPL"]])], [inode_set_iversion])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_set_iversion], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/iversion.h>
	]], [[
		struct inode inode;
		inode_set_iversion(&inode, 1);
	]], [[]])], [inode_set_iversion_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_set_iversion_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHOW_OPTIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_operations_show_options], [
		#include <linux/fs.h>

		int show_options(struct seq_file * x, struct dentry * y) {
			return 0;
		};

		static struct super_operations sops __attribute__ ((unused)) = {
			.show_options = show_options,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int show_options(struct seq_file * x, struct dentry * y) {
			return 0;
		};

		static struct super_operations sops __attribute__ ((unused)) = {
			.show_options = show_options,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [super_operations_show_options])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_operations_show_options], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int show_options(struct seq_file * x, struct dentry * y) {
			return 0;
		};

		static struct super_operations sops __attribute__ ((unused)) = {
			.show_options = show_options,
		};
	]], [[]], [[]])], [super_operations_show_options_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_operations_show_options_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FILE_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_inode], [
		#include <linux/fs.h>
	], [
		struct file *f = NULL;
		file_inode(f);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *f = NULL;
		file_inode(f);
	]],
	    [["Dual BSD/GPL"]])], [file_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *f = NULL;
		file_inode(f);
	]], [[]])], [file_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FILE_DENTRY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_dentry], [
		#include <linux/fs.h>
	], [
		struct file *f = NULL;
		file_dentry(f);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *f = NULL;
		file_dentry(f);
	]],
	    [["Dual BSD/GPL"]])], [file_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *f = NULL;
		file_dentry(f);
	]], [[]])], [file_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FSYNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([fsync_without_dentry], [
		#include <linux/fs.h>

		int test_fsync(struct file *f, int x) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_fsync(struct file *f, int x) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [fsync_without_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fsync_without_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_fsync(struct file *f, int x) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	]], [[]], [[]])], [fsync_without_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fsync_without_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([fsync_range], [
		#include <linux/fs.h>

		int test_fsync(struct file *f, loff_t a, loff_t b, int c)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_fsync(struct file *f, loff_t a, loff_t b, int c)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [fsync_range])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fsync_range], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_fsync(struct file *f, loff_t a, loff_t b, int c)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	]], [[]], [[]])], [fsync_range_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fsync_range_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_AIO_FSYNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([aio_fsync], [
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.aio_fsync = NULL,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.aio_fsync = NULL,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [aio_fsync])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([aio_fsync], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.aio_fsync = NULL,
		};
	]], [[]], [[]])], [aio_fsync_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([aio_fsync_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_EVICT_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([evict_inode], [
		#include <linux/fs.h>
		void evict_inode (struct inode * t) { return; }
		static struct super_operations sops __attribute__ ((unused)) = {
			.evict_inode = evict_inode,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		void evict_inode (struct inode * t) { return; }
		static struct super_operations sops __attribute__ ((unused)) = {
			.evict_inode = evict_inode,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [evict_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([evict_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		void evict_inode (struct inode * t) { return; }
		static struct super_operations sops __attribute__ ((unused)) = {
			.evict_inode = evict_inode,
		};
	]], [[]], [[]])], [evict_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([evict_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_DIRTY_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dirty_inode_with_flags], [
		#include <linux/fs.h>

		void dirty_inode(struct inode *a, int b) { return; }

		static const struct super_operations
		    sops __attribute__ ((unused)) = {
			.dirty_inode = dirty_inode,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		void dirty_inode(struct inode *a, int b) { return; }

		static const struct super_operations
		    sops __attribute__ ((unused)) = {
			.dirty_inode = dirty_inode,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [dirty_inode_with_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dirty_inode_with_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		void dirty_inode(struct inode *a, int b) { return; }

		static const struct super_operations
		    sops __attribute__ ((unused)) = {
			.dirty_inode = dirty_inode,
		};
	]], [[]], [[]])], [dirty_inode_with_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dirty_inode_with_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHRINKER
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SUPER_BLOCK_S_SHRINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_block_s_shrink], [
		#include <linux/fs.h>

		int shrink(struct shrinker *s, struct shrink_control *sc)
		    { return 0; }

		static const struct super_block
		    sb __attribute__ ((unused)) = {
			.s_shrink.seeks = DEFAULT_SEEKS,
			.s_shrink.batch = 0,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int shrink(struct shrinker *s, struct shrink_control *sc)
		    { return 0; }

		static const struct super_block
		    sb __attribute__ ((unused)) = {
			.s_shrink.seeks = DEFAULT_SEEKS,
			.s_shrink.batch = 0,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [super_block_s_shrink])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_block_s_shrink], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int shrink(struct shrinker *s, struct shrink_control *sc)
		    { return 0; }

		static const struct super_block
		    sb __attribute__ ((unused)) = {
			.s_shrink.seeks = DEFAULT_SEEKS,
			.s_shrink.batch = 0,
		};
	]], [[]], [[]])], [super_block_s_shrink_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_block_s_shrink_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHRINK_CONTROL_HAS_NID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([shrink_control_nid], [
		#include <linux/fs.h>
	], [
		struct shrink_control sc __attribute__ ((unused));
		unsigned long scnidsize __attribute__ ((unused)) =
		    sizeof(sc.nid);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct shrink_control sc __attribute__ ((unused));
		unsigned long scnidsize __attribute__ ((unused)) =
		    sizeof(sc.nid);
	]],
	    [["Dual BSD/GPL"]])], [shrink_control_nid])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrink_control_nid], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct shrink_control sc __attribute__ ((unused));
		unsigned long scnidsize __attribute__ ((unused)) =
		    sizeof(sc.nid);
	]], [[]])], [shrink_control_nid_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrink_control_nid_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHRINKER_CALLBACK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([shrinker_cb_shrink_control], [
		#include <linux/mm.h>
		int shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	], [
		struct shrinker cache_shrinker = {
			.shrink = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		int shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.shrink = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	]],
	    [["Dual BSD/GPL"]])], [shrinker_cb_shrink_control])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrinker_cb_shrink_control], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		int shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.shrink = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	]], [[]])], [shrinker_cb_shrink_control_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrinker_cb_shrink_control_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([shrinker_cb_shrink_control_split], [
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	], [
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	]],
	    [["Dual BSD/GPL"]])], [shrinker_cb_shrink_control_split])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrinker_cb_shrink_control_split], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	]], [[]])], [shrinker_cb_shrink_control_split_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrinker_cb_shrink_control_split_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHRINK_CONTROL_STRUCT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([shrink_control_struct], [
		#include <linux/mm.h>
	], [
		struct shrink_control sc __attribute__ ((unused));

		sc.nr_to_scan = 0;
		sc.gfp_mask = GFP_KERNEL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		struct shrink_control sc __attribute__ ((unused));

		sc.nr_to_scan = 0;
		sc.gfp_mask = GFP_KERNEL;
	]],
	    [["Dual BSD/GPL"]])], [shrink_control_struct])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrink_control_struct], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		struct shrink_control sc __attribute__ ((unused));

		sc.nr_to_scan = 0;
		sc.gfp_mask = GFP_KERNEL;
	]], [[]])], [shrink_control_struct_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrink_control_struct_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_REGISTER_SHRINKER_VARARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([register_shrinker_vararg], [
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	], [
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker, "vararg-reg-shrink-test");
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker, "vararg-reg-shrink-test");
	]],
	    [["Dual BSD/GPL"]])], [register_shrinker_vararg])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([register_shrinker_vararg], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker, "vararg-reg-shrink-test");
	]], [[]])], [register_shrinker_vararg_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([register_shrinker_vararg_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_MKDIR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([mkdir_mnt_idmap], [
		#include <linux/fs.h>

		int mkdir(struct mnt_idmap *idmap,
			struct inode *inode, struct dentry *dentry,
			umode_t umode) { return 0; }
		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int mkdir(struct mnt_idmap *idmap,
			struct inode *inode, struct dentry *dentry,
			umode_t umode) { return 0; }
		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [mkdir_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mkdir_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int mkdir(struct mnt_idmap *idmap,
			struct inode *inode, struct dentry *dentry,
			umode_t umode) { return 0; }
		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]], [[]])], [mkdir_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mkdir_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([mkdir_user_namespace], [
		#include <linux/fs.h>

		int mkdir(struct user_namespace *userns,
			struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int mkdir(struct user_namespace *userns,
			struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [mkdir_user_namespace])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mkdir_user_namespace], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int mkdir(struct user_namespace *userns,
			struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]], [[]])], [mkdir_user_namespace_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mkdir_user_namespace_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_mkdir], [
		#include <linux/fs.h>

		int mkdir(struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int mkdir(struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_mkdir])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_mkdir], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int mkdir(struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]], [[]])], [inode_operations_mkdir_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_mkdir_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_LOOKUP_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lookup_flags], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		struct dentry *inode_lookup(struct inode *inode,
		    struct dentry *dentry, unsigned int flags) { return NULL; }

		static const struct inode_operations iops
		    __attribute__ ((unused)) = {
			.lookup	= inode_lookup,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		struct dentry *inode_lookup(struct inode *inode,
		    struct dentry *dentry, unsigned int flags) { return NULL; }

		static const struct inode_operations iops
		    __attribute__ ((unused)) = {
			.lookup	= inode_lookup,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [lookup_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		struct dentry *inode_lookup(struct inode *inode,
		    struct dentry *dentry, unsigned int flags) { return NULL; }

		static const struct inode_operations iops
		    __attribute__ ((unused)) = {
			.lookup	= inode_lookup,
		};
	]], [[]], [[]])], [lookup_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CREATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([create_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create         = inode_create,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create         = inode_create,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [create_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create         = inode_create,
		};
	]], [[]], [[]])], [create_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([create_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [create_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	]], [[]], [[]])], [create_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([create_flags], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [create_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	]], [[]], [[]])], [create_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERMISSION
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([permission_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct mnt_idmap *idmap,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission             = inode_permission,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct mnt_idmap *idmap,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission             = inode_permission,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [permission_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([permission_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct mnt_idmap *idmap,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission             = inode_permission,
		};
	]], [[]], [[]])], [permission_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([permission_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([permission_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct user_namespace *userns,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission		= inode_permission,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct user_namespace *userns,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission		= inode_permission,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [permission_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([permission_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct user_namespace *userns,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission		= inode_permission,
		};
	]], [[]], [[]])], [permission_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([permission_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GET_LINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_link], [
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct inode *ip,
		    struct delayed_call *done) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct inode *ip,
		    struct delayed_call *done) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_link])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_link], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct inode *ip,
		    struct delayed_call *done) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	]], [[]], [[]])], [inode_operations_get_link_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_link_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_link_cookie], [
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct
		    inode *ip, void **cookie) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct
		    inode *ip, void **cookie) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_link_cookie])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_link_cookie], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct
		    inode *ip, void **cookie) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	]], [[]], [[]])], [inode_operations_get_link_cookie_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_link_cookie_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_follow_link], [
		#include <linux/fs.h>
		const char *follow_link(struct dentry *de,
		    void **cookie) { return "symlink"; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		const char *follow_link(struct dentry *de,
		    void **cookie) { return "symlink"; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_follow_link])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_follow_link], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		const char *follow_link(struct dentry *de,
		    void **cookie) { return "symlink"; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	]], [[]], [[]])], [inode_operations_follow_link_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_follow_link_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_follow_link_nameidata], [
		#include <linux/fs.h>
		void *follow_link(struct dentry *de, struct
		    nameidata *nd) { return (void *)NULL; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		void *follow_link(struct dentry *de, struct
		    nameidata *nd) { return (void *)NULL; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_follow_link_nameidata])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_follow_link_nameidata], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		void *follow_link(struct dentry *de, struct
		    nameidata *nd) { return (void *)NULL; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	]], [[]], [[]])], [inode_operations_follow_link_nameidata_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_follow_link_nameidata_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PUT_LINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([put_link_cookie], [
		#include <linux/fs.h>
		void put_link(struct inode *ip, void *cookie)
		    { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		void put_link(struct inode *ip, void *cookie)
		    { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [put_link_cookie])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([put_link_cookie], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		void put_link(struct inode *ip, void *cookie)
		    { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	]], [[]], [[]])], [put_link_cookie_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([put_link_cookie_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([put_link_nameidata], [
		#include <linux/fs.h>
		void put_link(struct dentry *de, struct
		    nameidata *nd, void *ptr) { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		void put_link(struct dentry *de, struct
		    nameidata *nd, void *ptr) { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [put_link_nameidata])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([put_link_nameidata], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		void put_link(struct dentry *de, struct
		    nameidata *nd, void *ptr) { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	]], [[]], [[]])], [put_link_nameidata_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([put_link_nameidata_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TMPFILE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_mnt_idmap], [
		#include <linux/fs.h>
		int tmpfile(struct mnt_idmap *idmap,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int tmpfile(struct mnt_idmap *idmap,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_tmpfile_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int tmpfile(struct mnt_idmap *idmap,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]], [[]])], [inode_operations_tmpfile_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_tmpfile], [
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_tmpfile])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]], [[]])], [inode_operations_tmpfile_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_dentry_userns], [
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct dentry *dentry,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct dentry *dentry,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_tmpfile_dentry_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_dentry_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct dentry *dentry,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]], [[]])], [inode_operations_tmpfile_dentry_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_dentry_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_dentry], [
			#include <linux/fs.h>
			int tmpfile(struct inode *inode, struct dentry *dentry,
			    umode_t mode) { return 0; }
			static struct inode_operations
			    iops __attribute__ ((unused)) = {
				.tmpfile = tmpfile,
			};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/fs.h>
			int tmpfile(struct inode *inode, struct dentry *dentry,
			    umode_t mode) { return 0; }
			static struct inode_operations
			    iops __attribute__ ((unused)) = {
				.tmpfile = tmpfile,
			};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_tmpfile_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
			#include <linux/fs.h>
			int tmpfile(struct inode *inode, struct dentry *dentry,
			    umode_t mode) { return 0; }
			static struct inode_operations
			    iops __attribute__ ((unused)) = {
				.tmpfile = tmpfile,
			};
	]], [[]], [[]])], [inode_operations_tmpfile_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_AUTOMOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dentry_operations_d_automount], [
		#include <linux/dcache.h>
		struct vfsmount *d_automount(struct path *p) { return NULL; }
		struct dentry_operations dops __attribute__ ((unused)) = {
			.d_automount = d_automount,
		};
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
		struct vfsmount *d_automount(struct path *p) { return NULL; }
		struct dentry_operations dops __attribute__ ((unused)) = {
			.d_automount = d_automount,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [dentry_operations_d_automount])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_d_automount], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
		struct vfsmount *d_automount(struct path *p) { return NULL; }
		struct dentry_operations dops __attribute__ ((unused)) = {
			.d_automount = d_automount,
		};
	]], [[]], [[]])], [dentry_operations_d_automount_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_d_automount_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ENCODE_FH_WITH_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([export_operations_encode_fh], [
		#include <linux/exportfs.h>
		int encode_fh(struct inode *inode, __u32 *fh, int *max_len,
		              struct inode *parent) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.encode_fh = encode_fh,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/exportfs.h>
		int encode_fh(struct inode *inode, __u32 *fh, int *max_len,
		              struct inode *parent) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.encode_fh = encode_fh,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [export_operations_encode_fh])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([export_operations_encode_fh], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/exportfs.h>
		int encode_fh(struct inode *inode, __u32 *fh, int *max_len,
		              struct inode *parent) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.encode_fh = encode_fh,
		};
	]], [[]], [[]])], [export_operations_encode_fh_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([export_operations_encode_fh_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_COMMIT_METADATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([export_operations_commit_metadata], [
		#include <linux/exportfs.h>
		int commit_metadata(struct inode *inode) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.commit_metadata = commit_metadata,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/exportfs.h>
		int commit_metadata(struct inode *inode) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.commit_metadata = commit_metadata,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [export_operations_commit_metadata])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([export_operations_commit_metadata], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/exportfs.h>
		int commit_metadata(struct inode *inode) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.commit_metadata = commit_metadata,
		};
	]], [[]], [[]])], [export_operations_commit_metadata_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([export_operations_commit_metadata_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CLEAR_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([clear_inode], [
		#include <linux/fs.h>
	], [
		clear_inode(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		clear_inode(NULL);
	]],
	    [["Dual BSD/GPL"]])], [clear_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([clear_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		clear_inode(NULL);
	]], [[]])], [clear_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([clear_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SETATTR_PREPARE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([setattr_prepare], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(dentry, attr);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(dentry, attr);
	]],
	    [["Dual BSD/GPL"]])], [setattr_prepare])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(dentry, attr);
	]], [[]])], [setattr_prepare_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([setattr_prepare_userns], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct user_namespace *userns = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(userns, dentry, attr);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct user_namespace *userns = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(userns, dentry, attr);
	]],
	    [["Dual BSD/GPL"]])], [setattr_prepare_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct user_namespace *userns = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(userns, dentry, attr);
	]], [[]])], [setattr_prepare_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([setattr_prepare_mnt_idmap], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct mnt_idmap *idmap = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(idmap, dentry, attr);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct mnt_idmap *idmap = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(idmap, dentry, attr);
	]],
	    [["Dual BSD/GPL"]])], [setattr_prepare_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct mnt_idmap *idmap = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(idmap, dentry, attr);
	]], [[]])], [setattr_prepare_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INSERT_INODE_LOCKED
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([insert_inode_locked], [
		#include <linux/fs.h>
	], [
		insert_inode_locked(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		insert_inode_locked(NULL);
	]],
	    [["Dual BSD/GPL"]])], [insert_inode_locked])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([insert_inode_locked], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		insert_inode_locked(NULL);
	]], [[]])], [insert_inode_locked_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([insert_inode_locked_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_DENTRY
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_MAKE_ROOT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([d_make_root], [
		#include <linux/dcache.h>
	], [
		d_make_root(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
	]], [[
		d_make_root(NULL);
	]],
	    [["Dual BSD/GPL"]])], [d_make_root])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_make_root], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
	]], [[
		d_make_root(NULL);
	]], [[]])], [d_make_root_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_make_root_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_OBTAIN_ALIAS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([d_obtain_alias], [
		#include <linux/dcache.h>
	], [
		d_obtain_alias(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
	]], [[
		d_obtain_alias(NULL);
	]],
	    [["Dual BSD/GPL"]])], [d_obtain_alias])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_obtain_alias], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
	]], [[
		d_obtain_alias(NULL);
	]], [[]])], [d_obtain_alias_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_obtain_alias_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_PRUNE_ALIASES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([d_prune_aliases], [
		#include <linux/dcache.h>
	], [
		struct inode *ip = NULL;
		d_prune_aliases(ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
	]], [[
		struct inode *ip = NULL;
		d_prune_aliases(ip);
	]],
	    [["Dual BSD/GPL"]])], [d_prune_aliases])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_prune_aliases], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
	]], [[
		struct inode *ip = NULL;
		d_prune_aliases(ip);
	]], [[]])], [d_prune_aliases_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_prune_aliases_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_SET_D_OP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([d_set_d_op], [
		#include <linux/dcache.h>
	], [
		d_set_d_op(NULL, NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
	]], [[
		d_set_d_op(NULL, NULL);
	]],
	    [["Dual BSD/GPL"]])], [d_set_d_op])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_set_d_op], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
	]], [[
		d_set_d_op(NULL, NULL);
	]], [[]])], [d_set_d_op_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_set_d_op_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_REVALIDATE_NAMEIDATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dentry_operations_revalidate], [
		#include <linux/dcache.h>
		#include <linux/sched.h>

		int revalidate (struct dentry *dentry,
		    struct nameidata *nidata) { return 0; }

		static const struct dentry_operations
		    dops __attribute__ ((unused)) = {
			.d_revalidate	= revalidate,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
		#include <linux/sched.h>

		int revalidate (struct dentry *dentry,
		    struct nameidata *nidata) { return 0; }

		static const struct dentry_operations
		    dops __attribute__ ((unused)) = {
			.d_revalidate	= revalidate,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [dentry_operations_revalidate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_revalidate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
		#include <linux/sched.h>

		int revalidate (struct dentry *dentry,
		    struct nameidata *nidata) { return 0; }

		static const struct dentry_operations
		    dops __attribute__ ((unused)) = {
			.d_revalidate	= revalidate,
		};
	]], [[]], [[]])], [dentry_operations_revalidate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_revalidate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONST_DENTRY_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dentry_operations_const], [
		#include <linux/dcache.h>

		const struct dentry_operations test_d_op = {
			.d_revalidate = NULL,
		};
	], [
		struct dentry d __attribute__ ((unused));
		d.d_op = &test_d_op;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>

		const struct dentry_operations test_d_op = {
			.d_revalidate = NULL,
		};
	]], [[
		struct dentry d __attribute__ ((unused));
		d.d_op = &test_d_op;
	]],
	    [["Dual BSD/GPL"]])], [dentry_operations_const])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_const], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>

		const struct dentry_operations test_d_op = {
			.d_revalidate = NULL,
		};
	]], [[
		struct dentry d __attribute__ ((unused));
		d.d_op = &test_d_op;
	]], [[]])], [dentry_operations_const_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_const_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_S_D_OP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_block_s_d_op], [
		#include <linux/fs.h>
	], [
		struct super_block sb __attribute__ ((unused));
		sb.s_d_op = NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct super_block sb __attribute__ ((unused));
		sb.s_d_op = NULL;
	]],
	    [["Dual BSD/GPL"]])], [super_block_s_d_op])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_block_s_d_op], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct super_block sb __attribute__ ((unused));
		sb.s_d_op = NULL;
	]], [[]])], [super_block_s_d_op_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_block_s_d_op_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_DENTRY_ALIAS_D_U
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dentry_alias_d_u], [
		#include <linux/fs.h>
		#include <linux/dcache.h>
		#include <linux/list.h>
	], [
		struct inode *inode __attribute__ ((unused)) = NULL;
		struct dentry *dentry __attribute__ ((unused)) = NULL;
		hlist_for_each_entry(dentry, &inode->i_dentry,
		    d_u.d_alias) {
			d_drop(dentry);
		}
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/dcache.h>
		#include <linux/list.h>
	]], [[
		struct inode *inode __attribute__ ((unused)) = NULL;
		struct dentry *dentry __attribute__ ((unused)) = NULL;
		hlist_for_each_entry(dentry, &inode->i_dentry,
		    d_u.d_alias) {
			d_drop(dentry);
		}
	]],
	    [["Dual BSD/GPL"]])], [dentry_alias_d_u])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_alias_d_u], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/dcache.h>
		#include <linux/list.h>
	]], [[
		struct inode *inode __attribute__ ((unused)) = NULL;
		struct dentry *dentry __attribute__ ((unused)) = NULL;
		hlist_for_each_entry(dentry, &inode->i_dentry,
		    d_u.d_alias) {
			d_drop(dentry);
		}
	]], [[]])], [dentry_alias_d_u_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_alias_d_u_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TRUNCATE_SETSIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([truncate_setsize], [
		#include <linux/mm.h>
	], [
		truncate_setsize(NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		truncate_setsize(NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [truncate_setsize])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([truncate_setsize], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		truncate_setsize(NULL, 0);
	]], [[]])], [truncate_setsize_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([truncate_setsize_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SECURITY_INODE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SECURITY_INODE_INIT_SECURITY_CALLBACK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([security_inode_init_security], [
		#include <linux/security.h>
	], [
		struct inode *ip __attribute__ ((unused)) = NULL;
		struct inode *dip __attribute__ ((unused)) = NULL;
		const struct qstr *str __attribute__ ((unused)) = NULL;
		initxattrs func __attribute__ ((unused)) = NULL;

		security_inode_init_security(ip, dip, str, func, NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/security.h>
	]], [[
		struct inode *ip __attribute__ ((unused)) = NULL;
		struct inode *dip __attribute__ ((unused)) = NULL;
		const struct qstr *str __attribute__ ((unused)) = NULL;
		initxattrs func __attribute__ ((unused)) = NULL;

		security_inode_init_security(ip, dip, str, func, NULL);
	]],
	    [["Dual BSD/GPL"]])], [security_inode_init_security])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([security_inode_init_security], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/security.h>
	]], [[
		struct inode *ip __attribute__ ((unused)) = NULL;
		struct inode *dip __attribute__ ((unused)) = NULL;
		const struct qstr *str __attribute__ ((unused)) = NULL;
		initxattrs func __attribute__ ((unused)) = NULL;

		security_inode_init_security(ip, dip, str, func, NULL);
	]], [[]])], [security_inode_init_security_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([security_inode_init_security_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FST_MOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_system_type_mount], [
                #include <linux/fs.h>

                static struct dentry *
                mount(struct file_system_type *fs_type, int flags,
                    const char *osname, void *data) {
                        struct dentry *d = NULL;
                        return (d);
                }

                static struct file_system_type fst __attribute__ ((unused)) = {
                        .mount = mount,
                };
        ], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
                #include <linux/fs.h>

                static struct dentry *
                mount(struct file_system_type *fs_type, int flags,
                    const char *osname, void *data) {
                        struct dentry *d = NULL;
                        return (d);
                }

                static struct file_system_type fst __attribute__ ((unused)) = {
                        .mount = mount,
                };
        ]], [[]],
	    [["Dual BSD/GPL"]])], [file_system_type_mount])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_system_type_mount], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
                #include <linux/fs.h>

                static struct dentry *
                mount(struct file_system_type *fs_type, int flags,
                    const char *osname, void *data) {
                        struct dentry *d = NULL;
                        return (d);
                }

                static struct file_system_type fst __attribute__ ((unused)) = {
                        .mount = mount,
                };
        ]], [[]], [[]])], [file_system_type_mount_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_system_type_mount_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BDI
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_setup_bdi_name], [
		#include <linux/fs.h>
		struct super_block sb;
	], [
		char *name = "bdi";
		atomic_long_t zfs_bdi_seq;
		int error __attribute__((unused));
		atomic_long_set(&zfs_bdi_seq, 0);
		error =
		    super_setup_bdi_name(&sb, "%.28s-%ld", name,
		    atomic_long_inc_return(&zfs_bdi_seq));
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		struct super_block sb;
	]], [[
		char *name = "bdi";
		atomic_long_t zfs_bdi_seq;
		int error __attribute__((unused));
		atomic_long_set(&zfs_bdi_seq, 0);
		error =
		    super_setup_bdi_name(&sb, "%.28s-%ld", name,
		    atomic_long_inc_return(&zfs_bdi_seq));
	]],
	    [["Dual BSD/GPL"]])], [super_setup_bdi_name])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_setup_bdi_name], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		struct super_block sb;
	]], [[
		char *name = "bdi";
		atomic_long_t zfs_bdi_seq;
		int error __attribute__((unused));
		atomic_long_set(&zfs_bdi_seq, 0);
		error =
		    super_setup_bdi_name(&sb, "%.28s-%ld", name,
		    atomic_long_inc_return(&zfs_bdi_seq));
	]], [[]])], [super_setup_bdi_name_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_setup_bdi_name_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdi_setup_and_register], [
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	], [
		char *name = "bdi";
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	]], [[
		char *name = "bdi";
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name);
	]],
	    [["Dual BSD/GPL"]])], [bdi_setup_and_register])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdi_setup_and_register], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	]], [[
		char *name = "bdi";
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name);
	]], [[]])], [bdi_setup_and_register_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdi_setup_and_register_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdi_setup_and_register_3args], [
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	], [
		char *name = "bdi";
		unsigned int cap = BDI_CAP_MAP_COPY;
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name, cap);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	]], [[
		char *name = "bdi";
		unsigned int cap = BDI_CAP_MAP_COPY;
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name, cap);
	]],
	    [["Dual BSD/GPL"]])], [bdi_setup_and_register_3args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdi_setup_and_register_3args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	]], [[
		char *name = "bdi";
		unsigned int cap = BDI_CAP_MAP_COPY;
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name, cap);
	]], [[]])], [bdi_setup_and_register_3args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdi_setup_and_register_3args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SET_NLINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([set_nlink], [
		#include <linux/fs.h>
	], [
		struct inode node;
		unsigned int link = 0;
		(void) set_nlink(&node, link);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode node;
		unsigned int link = 0;
		(void) set_nlink(&node, link);
	]],
	    [["Dual BSD/GPL"]])], [set_nlink])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_nlink], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode node;
		unsigned int link = 0;
		(void) set_nlink(&node, link);
	]], [[]])], [set_nlink_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_nlink_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SGET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([sget_5args], [
		#include <linux/fs.h>
	], [
		struct file_system_type *type = NULL;
		int (*test)(struct super_block *,void *) = NULL;
		int (*set)(struct super_block *,void *) = NULL;
		int flags = 0;
		void *data = NULL;
		(void) sget(type, test, set, flags, data);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file_system_type *type = NULL;
		int (*test)(struct super_block *,void *) = NULL;
		int (*set)(struct super_block *,void *) = NULL;
		int flags = 0;
		void *data = NULL;
		(void) sget(type, test, set, flags, data);
	]],
	    [["Dual BSD/GPL"]])], [sget_5args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sget_5args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file_system_type *type = NULL;
		int (*test)(struct super_block *,void *) = NULL;
		int (*set)(struct super_block *,void *) = NULL;
		int flags = 0;
		void *data = NULL;
		(void) sget(type, test, set, flags, data);
	]], [[]])], [sget_5args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sget_5args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_LSEEK_EXECUTE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lseek_execute], [
		#include <linux/fs.h>
	], [
		struct file *fp __attribute__ ((unused)) = NULL;
		struct inode *ip __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t maxsize __attribute__ ((unused)) = 0;

		lseek_execute(fp, ip, offset, maxsize);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *fp __attribute__ ((unused)) = NULL;
		struct inode *ip __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t maxsize __attribute__ ((unused)) = 0;

		lseek_execute(fp, ip, offset, maxsize);
	]],
	    [["Dual BSD/GPL"]])], [lseek_execute])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lseek_execute], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *fp __attribute__ ((unused)) = NULL;
		struct inode *ip __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t maxsize __attribute__ ((unused)) = 0;

		lseek_execute(fp, ip, offset, maxsize);
	]], [[]])], [lseek_execute_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lseek_execute_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_FILEMAP_DIRTY_FOLIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_has_filemap_dirty_folio], [
		#include <linux/pagemap.h>
		#include <linux/writeback.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.dirty_folio	= filemap_dirty_folio,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/pagemap.h>
		#include <linux/writeback.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.dirty_folio	= filemap_dirty_folio,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [vfs_has_filemap_dirty_folio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_filemap_dirty_folio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/pagemap.h>
		#include <linux/writeback.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.dirty_folio	= filemap_dirty_folio,
		};
	]], [[]], [[]])], [vfs_has_filemap_dirty_folio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_filemap_dirty_folio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_READ_FOLIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_has_read_folio], [
		#include <linux/fs.h>

		static int
		test_read_folio(struct file *file, struct folio *folio) {
			(void) file; (void) folio;
			return (0);
		}

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.read_folio	= test_read_folio,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		static int
		test_read_folio(struct file *file, struct folio *folio) {
			(void) file; (void) folio;
			return (0);
		}

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.read_folio	= test_read_folio,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [vfs_has_read_folio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_read_folio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		static int
		test_read_folio(struct file *file, struct folio *folio) {
			(void) file; (void) folio;
			return (0);
		}

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.read_folio	= test_read_folio,
		};
	]], [[]], [[]])], [vfs_has_read_folio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_read_folio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GETATTR
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GETATTR_4ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_getattr_4args], [
		#include <linux/fs.h>
	], [
		vfs_getattr((const struct path *)NULL,
			(struct kstat *)NULL,
			(u32)0,
			(unsigned int)0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((const struct path *)NULL,
			(struct kstat *)NULL,
			(u32)0,
			(unsigned int)0);
	]],
	    [["Dual BSD/GPL"]])], [vfs_getattr_4args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_4args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((const struct path *)NULL,
			(struct kstat *)NULL,
			(u32)0,
			(unsigned int)0);
	]], [[]])], [vfs_getattr_4args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_4args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GETATTR_2ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_getattr_2args], [
		#include <linux/fs.h>
	], [
		vfs_getattr((struct path *) NULL,
			(struct kstat *)NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((struct path *) NULL,
			(struct kstat *)NULL);
	]],
	    [["Dual BSD/GPL"]])], [vfs_getattr_2args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_2args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((struct path *) NULL,
			(struct kstat *)NULL);
	]], [[]])], [vfs_getattr_2args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_2args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GETATTR_3ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_getattr_3args], [
		#include <linux/fs.h>
	], [
		vfs_getattr((struct vfsmount *)NULL,
			(struct dentry *)NULL,
			(struct kstat *)NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((struct vfsmount *)NULL,
			(struct dentry *)NULL,
			(struct kstat *)NULL);
	]],
	    [["Dual BSD/GPL"]])], [vfs_getattr_3args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_3args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((struct vfsmount *)NULL,
			(struct dentry *)NULL,
			(struct kstat *)NULL);
	]], [[]])], [vfs_getattr_3args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_3args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_FSYNC_2ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_fsync_2args], [
		#include <linux/fs.h>
	], [
		vfs_fsync(NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		vfs_fsync(NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [vfs_fsync_2args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_fsync_2args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		vfs_fsync(NULL, 0);
	]], [[]])], [vfs_fsync_2args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_fsync_2args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_ITERATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_operations_iterate_shared], [
		#include <linux/fs.h>
		int iterate(struct file *filp, struct dir_context * context)
		    { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate_shared	 = iterate,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int iterate(struct file *filp, struct dir_context * context)
		    { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate_shared	 = iterate,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_operations_iterate_shared])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_iterate_shared], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int iterate(struct file *filp, struct dir_context * context)
		    { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate_shared	 = iterate,
		};
	]], [[]], [[]])], [file_operations_iterate_shared_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_iterate_shared_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_operations_iterate], [
		#include <linux/fs.h>
		int iterate(struct file *filp,
		    struct dir_context *context) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate	 = iterate,
		};

		#if defined(FMODE_KABI_ITERATE)
		#error "RHEL 7.5, FMODE_KABI_ITERATE interface"
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int iterate(struct file *filp,
		    struct dir_context *context) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate	 = iterate,
		};

		#if defined(FMODE_KABI_ITERATE)
		#error "RHEL 7.5, FMODE_KABI_ITERATE interface"
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_operations_iterate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_iterate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int iterate(struct file *filp,
		    struct dir_context *context) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate	 = iterate,
		};

		#if defined(FMODE_KABI_ITERATE)
		#error "RHEL 7.5, FMODE_KABI_ITERATE interface"
		#endif
	]], [[]], [[]])], [file_operations_iterate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_iterate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_operations_readdir], [
		#include <linux/fs.h>
		int readdir(struct file *filp, void *entry,
		    filldir_t func) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.readdir = readdir,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int readdir(struct file *filp, void *entry,
		    filldir_t func) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.readdir = readdir,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_operations_readdir])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_readdir], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int readdir(struct file *filp, void *entry,
		    filldir_t func) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.readdir = readdir,
		};
	]], [[]], [[]])], [file_operations_readdir_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_readdir_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_DIRECT_IO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([direct_io_iter], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [direct_io_iter])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	]], [[]], [[]])], [direct_io_iter_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([direct_io_iter_offset], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [direct_io_iter_offset])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_offset], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	]], [[]], [[]])], [direct_io_iter_offset_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_offset_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([direct_io_iter_rw_offset], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [direct_io_iter_rw_offset])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_rw_offset], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	]], [[]], [[]])], [direct_io_iter_rw_offset_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_rw_offset_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([direct_io_iovec], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    const struct iovec *iov, loff_t offset,
		    unsigned long nr_segs) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    const struct iovec *iov, loff_t offset,
		    unsigned long nr_segs) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [direct_io_iovec])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iovec], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    const struct iovec *iov, loff_t offset,
		    unsigned long nr_segs) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	]], [[]], [[]])], [direct_io_iovec_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iovec_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_READPAGES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_has_readpages], [
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.readpages = NULL,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.readpages = NULL,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [vfs_has_readpages])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_readpages], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.readpages = NULL,
		};
	]], [[]], [[]])], [vfs_has_readpages_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_readpages_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_SET_PAGE_DIRTY_NOBUFFERS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_has_set_page_dirty_nobuffers], [
		#include <linux/pagemap.h>
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.set_page_dirty = __set_page_dirty_nobuffers,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/pagemap.h>
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.set_page_dirty = __set_page_dirty_nobuffers,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [vfs_has_set_page_dirty_nobuffers])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_set_page_dirty_nobuffers], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/pagemap.h>
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.set_page_dirty = __set_page_dirty_nobuffers,
		};
	]], [[]], [[]])], [vfs_has_set_page_dirty_nobuffers_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_set_page_dirty_nobuffers_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_RW_ITERATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_operations_rw], [
		#include <linux/fs.h>

		ssize_t test_read(struct kiocb *kiocb, struct iov_iter *to)
		    { return 0; }
		ssize_t test_write(struct kiocb *kiocb, struct iov_iter *from)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
		    .read_iter = test_read,
		    .write_iter = test_write,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_read(struct kiocb *kiocb, struct iov_iter *to)
		    { return 0; }
		ssize_t test_write(struct kiocb *kiocb, struct iov_iter *from)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
		    .read_iter = test_read,
		    .write_iter = test_write,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_operations_rw])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_rw], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_read(struct kiocb *kiocb, struct iov_iter *to)
		    { return 0; }
		ssize_t test_write(struct kiocb *kiocb, struct iov_iter *from)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
		    .read_iter = test_read,
		    .write_iter = test_write,
		};
	]], [[]], [[]])], [file_operations_rw_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_rw_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([new_sync_rw], [
		#include <linux/fs.h>
	], [
	        ssize_t ret __attribute__ ((unused));
		struct file *filp = NULL;
		char __user *rbuf = NULL;
		const char __user *wbuf = NULL;
		size_t len = 0;
		loff_t ppos;

		ret = new_sync_read(filp, rbuf, len, &ppos);
		ret = new_sync_write(filp, wbuf, len, &ppos);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
	        ssize_t ret __attribute__ ((unused));
		struct file *filp = NULL;
		char __user *rbuf = NULL;
		const char __user *wbuf = NULL;
		size_t len = 0;
		loff_t ppos;

		ret = new_sync_read(filp, rbuf, len, &ppos);
		ret = new_sync_write(filp, wbuf, len, &ppos);
	]],
	    [["Dual BSD/GPL"]])], [new_sync_rw])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([new_sync_rw], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
	        ssize_t ret __attribute__ ((unused));
		struct file *filp = NULL;
		char __user *rbuf = NULL;
		const char __user *wbuf = NULL;
		size_t len = 0;
		loff_t ppos;

		ret = new_sync_read(filp, rbuf, len, &ppos);
		ret = new_sync_write(filp, wbuf, len, &ppos);
	]], [[]])], [new_sync_rw_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([new_sync_rw_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GENERIC_WRITE_CHECKS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_write_checks], [
		#include <linux/fs.h>
	], [
		struct kiocb *iocb = NULL;
		struct iov_iter *iov = NULL;
		generic_write_checks(iocb, iov);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct kiocb *iocb = NULL;
		struct iov_iter *iov = NULL;
		generic_write_checks(iocb, iov);
	]],
	    [["Dual BSD/GPL"]])], [generic_write_checks])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_write_checks], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct kiocb *iocb = NULL;
		struct iov_iter *iov = NULL;
		generic_write_checks(iocb, iov);
	]], [[]])], [generic_write_checks_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_write_checks_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_IOV_ITER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_types], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		int type __attribute__ ((unused)) =
		    ITER_IOVEC | ITER_KVEC | ITER_BVEC | ITER_PIPE;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		int type __attribute__ ((unused)) =
		    ITER_IOVEC | ITER_KVEC | ITER_BVEC | ITER_PIPE;
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_types])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_types], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		int type __attribute__ ((unused)) =
		    ITER_IOVEC | ITER_KVEC | ITER_BVEC | ITER_PIPE;
	]], [[]])], [iov_iter_types_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_types_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_advance], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t advance = 512;

		iov_iter_advance(&iter, advance);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t advance = 512;

		iov_iter_advance(&iter, advance);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_advance])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_advance], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t advance = 512;

		iov_iter_advance(&iter, advance);
	]], [[]])], [iov_iter_advance_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_advance_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_revert], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t revert = 512;

		iov_iter_revert(&iter, revert);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t revert = 512;

		iov_iter_revert(&iter, revert);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_revert])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_revert], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t revert = 512;

		iov_iter_revert(&iter, revert);
	]], [[]])], [iov_iter_revert_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_revert_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_fault_in_readable], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = iov_iter_fault_in_readable(&iter, size);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = iov_iter_fault_in_readable(&iter, size);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_fault_in_readable])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_fault_in_readable], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = iov_iter_fault_in_readable(&iter, size);
	]], [[]])], [iov_iter_fault_in_readable_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_fault_in_readable_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([fault_in_iov_iter_readable], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = fault_in_iov_iter_readable(&iter, size);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = fault_in_iov_iter_readable(&iter, size);
	]],
	    [["Dual BSD/GPL"]])], [fault_in_iov_iter_readable])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fault_in_iov_iter_readable], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = fault_in_iov_iter_readable(&iter, size);
	]], [[]])], [fault_in_iov_iter_readable_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fault_in_iov_iter_readable_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_count], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t bytes __attribute__ ((unused));

		bytes = iov_iter_count(&iter);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t bytes __attribute__ ((unused));

		bytes = iov_iter_count(&iter);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_count])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_count], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t bytes __attribute__ ((unused));

		bytes = iov_iter_count(&iter);
	]], [[]])], [iov_iter_count_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_count_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([copy_to_iter], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_to_iter((const void *)&buf, size, &iter);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_to_iter((const void *)&buf, size, &iter);
	]],
	    [["Dual BSD/GPL"]])], [copy_to_iter])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([copy_to_iter], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_to_iter((const void *)&buf, size, &iter);
	]], [[]])], [copy_to_iter_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([copy_to_iter_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([copy_from_iter], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_from_iter((void *)&buf, size, &iter);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_from_iter((void *)&buf, size, &iter);
	]],
	    [["Dual BSD/GPL"]])], [copy_from_iter])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([copy_from_iter], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_from_iter((void *)&buf, size, &iter);
	]], [[]])], [copy_from_iter_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([copy_from_iter_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_type], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		__attribute__((unused)) enum iter_type i = iov_iter_type(&iter);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		__attribute__((unused)) enum iter_type i = iov_iter_type(&iter);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_type])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_type], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		__attribute__((unused)) enum iter_type i = iov_iter_type(&iter);
	]], [[]])], [iov_iter_type_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_type_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KMAP_ATOMIC_ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kmap_atomic], [
		#include <linux/pagemap.h>
	], [
		struct page page;
		kmap_atomic(&page);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/pagemap.h>
	]], [[
		struct page page;
		kmap_atomic(&page);
	]],
	    [["Dual BSD/GPL"]])], [kmap_atomic])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kmap_atomic], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/pagemap.h>
	]], [[
		struct page page;
		kmap_atomic(&page);
	]], [[]])], [kmap_atomic_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kmap_atomic_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FOLLOW_DOWN_ONE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([follow_down_one], [
		#include <linux/namei.h>
	], [
		struct path *p = NULL;
		follow_down_one(p);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/namei.h>
	]], [[
		struct path *p = NULL;
		follow_down_one(p);
	]],
	    [["Dual BSD/GPL"]])], [follow_down_one])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([follow_down_one], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/namei.h>
	]], [[
		struct path *p = NULL;
		follow_down_one(p);
	]], [[]])], [follow_down_one_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([follow_down_one_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_MAKE_REQUEST_FN
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([make_request_fn_void], [
		#include <linux/blkdev.h>
		void make_request(struct request_queue *q,
		    struct bio *bio) { return; }
	], [
		blk_queue_make_request(NULL, &make_request);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
		void make_request(struct request_queue *q,
		    struct bio *bio) { return; }
	]], [[
		blk_queue_make_request(NULL, &make_request);
	]],
	    [["Dual BSD/GPL"]])], [make_request_fn_void])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([make_request_fn_void], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
		void make_request(struct request_queue *q,
		    struct bio *bio) { return; }
	]], [[
		blk_queue_make_request(NULL, &make_request);
	]], [[]])], [make_request_fn_void_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([make_request_fn_void_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([make_request_fn_blk_qc_t], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	], [
		blk_queue_make_request(NULL, &make_request);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		blk_queue_make_request(NULL, &make_request);
	]],
	    [["Dual BSD/GPL"]])], [make_request_fn_blk_qc_t])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([make_request_fn_blk_qc_t], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		blk_queue_make_request(NULL, &make_request);
	]], [[]])], [make_request_fn_blk_qc_t_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([make_request_fn_blk_qc_t_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_alloc_queue_request_fn], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	], [
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue(make_request, NUMA_NO_NODE);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue(make_request, NUMA_NO_NODE);
	]],
	    [["Dual BSD/GPL"]])], [blk_alloc_queue_request_fn])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_queue_request_fn], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue(make_request, NUMA_NO_NODE);
	]], [[]])], [blk_alloc_queue_request_fn_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_queue_request_fn_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_alloc_queue_request_fn_rh], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	], [
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue_rh(make_request, NUMA_NO_NODE);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue_rh(make_request, NUMA_NO_NODE);
	]],
	    [["Dual BSD/GPL"]])], [blk_alloc_queue_request_fn_rh])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_queue_request_fn_rh], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue_rh(make_request, NUMA_NO_NODE);
	]], [[]])], [blk_alloc_queue_request_fn_rh_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_queue_request_fn_rh_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([block_device_operations_submit_bio], [
		#include <linux/blkdev.h>
	], [
		struct block_device_operations o;
		o.submit_bio = NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device_operations o;
		o.submit_bio = NULL;
	]],
	    [["Dual BSD/GPL"]])], [block_device_operations_submit_bio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_submit_bio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device_operations o;
		o.submit_bio = NULL;
	]], [[]])], [block_device_operations_submit_bio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_submit_bio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_alloc_disk], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk  __attribute__ ((unused));
		disk = blk_alloc_disk(NUMA_NO_NODE);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk  __attribute__ ((unused));
		disk = blk_alloc_disk(NUMA_NO_NODE);
	]],
	    [["Dual BSD/GPL"]])], [blk_alloc_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk  __attribute__ ((unused));
		disk = blk_alloc_disk(NUMA_NO_NODE);
	]], [[]])], [blk_alloc_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_cleanup_disk], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk  __attribute__ ((unused));
		blk_cleanup_disk(disk);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk  __attribute__ ((unused));
		blk_cleanup_disk(disk);
	]],
	    [["Dual BSD/GPL"]])], [blk_cleanup_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_cleanup_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk  __attribute__ ((unused));
		blk_cleanup_disk(disk);
	]], [[]])], [blk_cleanup_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_cleanup_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_io_acct_63], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_op(bio),
		    passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), bio_sectors(bio), start_time);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_op(bio),
		    passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), bio_sectors(bio), start_time);
	]],
	    [["Dual BSD/GPL"]])], [bdev_io_acct_63])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_io_acct_63], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_op(bio),
		    passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), bio_sectors(bio), start_time);
	]], [[]])], [bdev_io_acct_63_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_io_acct_63_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_io_acct_old], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_sectors(bio),
		    bio_op(bio), passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), start_time);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_sectors(bio),
		    bio_op(bio), passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), start_time);
	]],
	    [["Dual BSD/GPL"]])], [bdev_io_acct_old])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_io_acct_old], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_sectors(bio),
		    bio_op(bio), passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), start_time);
	]], [[]])], [bdev_io_acct_old_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_io_acct_old_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([disk_io_acct], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio));
		disk_end_io_acct(disk, bio_op(bio), start_time);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio));
		disk_end_io_acct(disk, bio_op(bio), start_time);
	]],
	    [["Dual BSD/GPL"]])], [disk_io_acct])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([disk_io_acct], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio));
		disk_end_io_acct(disk, bio_op(bio), start_time);
	]], [[]])], [disk_io_acct_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([disk_io_acct_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_io_acct], [
		#include <linux/blkdev.h>
	], [
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = bio_start_io_acct(bio);
		bio_end_io_acct(bio, start_time);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = bio_start_io_acct(bio);
		bio_end_io_acct(bio, start_time);
	]],
	    [["Dual BSD/GPL"]])], [bio_io_acct])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_io_acct], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = bio_start_io_acct(bio);
		bio_end_io_acct(bio, start_time);
	]], [[]])], [bio_io_acct_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_io_acct_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_acct_3args], [
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(int, unsigned long,
		    struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(int, struct hd_struct *,
		    unsigned long) = &generic_end_io_acct;
	], [
		generic_start_io_acct(0, 0, NULL);
		generic_end_io_acct(0, NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(int, unsigned long,
		    struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(int, struct hd_struct *,
		    unsigned long) = &generic_end_io_acct;
	]], [[
		generic_start_io_acct(0, 0, NULL);
		generic_end_io_acct(0, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [generic_acct_3args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_acct_3args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(int, unsigned long,
		    struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(int, struct hd_struct *,
		    unsigned long) = &generic_end_io_acct;
	]], [[
		generic_start_io_acct(0, 0, NULL);
		generic_end_io_acct(0, NULL, 0);
	]], [[]])], [generic_acct_3args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_acct_3args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_acct_4args], [
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(struct request_queue *, int,
		    unsigned long, struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(struct request_queue *, int,
		    struct hd_struct *, unsigned long) = &generic_end_io_acct;
	], [
		generic_start_io_acct(NULL, 0, 0, NULL);
		generic_end_io_acct(NULL, 0, NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(struct request_queue *, int,
		    unsigned long, struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(struct request_queue *, int,
		    struct hd_struct *, unsigned long) = &generic_end_io_acct;
	]], [[
		generic_start_io_acct(NULL, 0, 0, NULL);
		generic_end_io_acct(NULL, 0, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [generic_acct_4args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_acct_4args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(struct request_queue *, int,
		    unsigned long, struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(struct request_queue *, int,
		    struct hd_struct *, unsigned long) = &generic_end_io_acct;
	]], [[
		generic_start_io_acct(NULL, 0, 0, NULL);
		generic_end_io_acct(NULL, 0, NULL, 0);
	]], [[]])], [generic_acct_4args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_acct_4args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FPU
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kernel_fpu], [
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	], [
		kernel_fpu_begin();
		kernel_fpu_end();
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	]], [[
		kernel_fpu_begin();
		kernel_fpu_end();
	]],
	    [["Dual BSD/GPL"]])], [kernel_fpu])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_fpu], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	]], [[
		kernel_fpu_begin();
		kernel_fpu_end();
	]], [[ZFS_META_LICENSE]])], [kernel_fpu_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_fpu_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([__kernel_fpu], [
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	], [
		__kernel_fpu_begin();
		__kernel_fpu_end();
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	]], [[
		__kernel_fpu_begin();
		__kernel_fpu_end();
	]],
	    [["Dual BSD/GPL"]])], [__kernel_fpu])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__kernel_fpu], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	]], [[
		__kernel_fpu_begin();
		__kernel_fpu_end();
	]], [[ZFS_META_LICENSE]])], [__kernel_fpu_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__kernel_fpu_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FMODE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([type_fmode_t], [
		#include <linux/types.h>
	], [
		fmode_t *ptr __attribute__ ((unused));
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/types.h>
	]], [[
		fmode_t *ptr __attribute__ ((unused));
	]],
	    [["Dual BSD/GPL"]])], [type_fmode_t])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([type_fmode_t], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/types.h>
	]], [[
		fmode_t *ptr __attribute__ ((unused));
	]], [[]])], [type_fmode_t_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([type_fmode_t_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KUIDGID_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kuidgid_t], [
		#include <linux/uidgid.h>
	], [
		kuid_t userid __attribute__ ((unused)) = KUIDT_INIT(0);
		kgid_t groupid __attribute__ ((unused)) = KGIDT_INIT(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/uidgid.h>
	]], [[
		kuid_t userid __attribute__ ((unused)) = KUIDT_INIT(0);
		kgid_t groupid __attribute__ ((unused)) = KGIDT_INIT(0);
	]],
	    [["Dual BSD/GPL"]])], [kuidgid_t])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kuidgid_t], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/uidgid.h>
	]], [[
		kuid_t userid __attribute__ ((unused)) = KUIDT_INIT(0);
		kgid_t groupid __attribute__ ((unused)) = KGIDT_INIT(0);
	]], [[]])], [kuidgid_t_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kuidgid_t_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KUID_HELPERS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([i_uid_read], [
		#include <linux/fs.h>
	], [
		struct inode *ip = NULL;
		(void) i_uid_read(ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) i_uid_read(ip);
	]],
	    [["Dual BSD/GPL"]])], [i_uid_read])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([i_uid_read], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) i_uid_read(ip);
	]], [[]])], [i_uid_read_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([i_uid_read_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RENAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_rename2], [
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_rename2])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename2], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	]], [[]], [[]])], [inode_operations_rename2_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename2_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_rename_flags], [
		#include <linux/fs.h>
		int rename_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_rename_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]], [[]])], [inode_operations_rename_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dir_inode_operations_wrapper_rename2], [
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations_wrapper
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations_wrapper
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [dir_inode_operations_wrapper_rename2])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dir_inode_operations_wrapper_rename2], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations_wrapper
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	]], [[]], [[]])], [dir_inode_operations_wrapper_rename2_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dir_inode_operations_wrapper_rename2_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_rename_userns], [
		#include <linux/fs.h>
		int rename_fn(struct user_namespace *user_ns, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename_fn(struct user_namespace *user_ns, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_rename_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename_fn(struct user_namespace *user_ns, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]], [[]])], [inode_operations_rename_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_rename_mnt_idmap], [
		#include <linux/fs.h>
		int rename_fn(struct mnt_idmap *idmap, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename_fn(struct mnt_idmap *idmap, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_rename_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename_fn(struct mnt_idmap *idmap, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]], [[]])], [inode_operations_rename_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CURRENT_TIME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([current_time], [
		#include <linux/fs.h>
	], [
		struct inode ip __attribute__ ((unused));
		ip.i_atime = current_time(&ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode ip __attribute__ ((unused));
		ip.i_atime = current_time(&ip);
	]],
	    [["Dual BSD/GPL"]])], [current_time])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([current_time], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode ip __attribute__ ((unused));
		ip.i_atime = current_time(&ip);
	]], [[]])], [current_time_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([current_time_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_USERNS_CAPABILITIES
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_NS_CAPABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([ns_capable], [
		#include <linux/capability.h>
	], [
		ns_capable((struct user_namespace *)NULL, CAP_SYS_ADMIN);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/capability.h>
	]], [[
		ns_capable((struct user_namespace *)NULL, CAP_SYS_ADMIN);
	]],
	    [["Dual BSD/GPL"]])], [ns_capable])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ns_capable], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/capability.h>
	]], [[
		ns_capable((struct user_namespace *)NULL, CAP_SYS_ADMIN);
	]], [[]])], [ns_capable_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ns_capable_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_HAS_CAPABILITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([has_capability], [
		#include <linux/capability.h>
	], [
		struct task_struct *task = NULL;
		int cap = 0;
		bool result __attribute__ ((unused));

		result = has_capability(task, cap);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/capability.h>
	]], [[
		struct task_struct *task = NULL;
		int cap = 0;
		bool result __attribute__ ((unused));

		result = has_capability(task, cap);
	]],
	    [["Dual BSD/GPL"]])], [has_capability])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([has_capability], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/capability.h>
	]], [[
		struct task_struct *task = NULL;
		int cap = 0;
		bool result __attribute__ ((unused));

		result = has_capability(task, cap);
	]], [[]])], [has_capability_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([has_capability_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CRED_USER_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([cred_user_ns], [
		#include <linux/cred.h>
	], [
		struct cred cr;
		cr.user_ns = (struct user_namespace *)NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
	]], [[
		struct cred cr;
		cr.user_ns = (struct user_namespace *)NULL;
	]],
	    [["Dual BSD/GPL"]])], [cred_user_ns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cred_user_ns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
	]], [[
		struct cred cr;
		cr.user_ns = (struct user_namespace *)NULL;
	]], [[]])], [cred_user_ns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cred_user_ns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KUID_HAS_MAPPING
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kuid_has_mapping], [
		#include <linux/uidgid.h>
	], [
		kuid_has_mapping((struct user_namespace *)NULL, KUIDT_INIT(0));
		kgid_has_mapping((struct user_namespace *)NULL, KGIDT_INIT(0));
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/uidgid.h>
	]], [[
		kuid_has_mapping((struct user_namespace *)NULL, KUIDT_INIT(0));
		kgid_has_mapping((struct user_namespace *)NULL, KGIDT_INIT(0));
	]],
	    [["Dual BSD/GPL"]])], [kuid_has_mapping])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kuid_has_mapping], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/uidgid.h>
	]], [[
		kuid_has_mapping((struct user_namespace *)NULL, KUIDT_INIT(0));
		kgid_has_mapping((struct user_namespace *)NULL, KGIDT_INIT(0));
	]], [[]])], [kuid_has_mapping_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kuid_has_mapping_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_IN_COMPAT_SYSCALL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([in_compat_syscall], [
		#include <linux/compat.h>
	], [
		in_compat_syscall();
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/compat.h>
	]], [[
		in_compat_syscall();
	]],
	    [["Dual BSD/GPL"]])], [in_compat_syscall])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([in_compat_syscall], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/compat.h>
	]], [[
		in_compat_syscall();
	]], [[]])], [in_compat_syscall_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([in_compat_syscall_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTIME
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTIME_GET_COARSE_REAL_TS64
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([ktime_get_coarse_real_ts64], [
		#include <linux/mm.h>
	], [
		struct timespec64 ts;
		ktime_get_coarse_real_ts64(&ts);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		struct timespec64 ts;
		ktime_get_coarse_real_ts64(&ts);
	]],
	    [["Dual BSD/GPL"]])], [ktime_get_coarse_real_ts64])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ktime_get_coarse_real_ts64], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		struct timespec64 ts;
		ktime_get_coarse_real_ts64(&ts);
	]], [[]])], [ktime_get_coarse_real_ts64_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ktime_get_coarse_real_ts64_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTIME_GET_RAW_TS64
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([ktime_get_raw_ts64], [
		#include <linux/mm.h>
	], [
		struct timespec64 ts;
		ktime_get_raw_ts64(&ts);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		struct timespec64 ts;
		ktime_get_raw_ts64(&ts);
	]],
	    [["Dual BSD/GPL"]])], [ktime_get_raw_ts64])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ktime_get_raw_ts64], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		struct timespec64 ts;
		ktime_get_raw_ts64(&ts);
	]], [[]])], [ktime_get_raw_ts64_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ktime_get_raw_ts64_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TOTALRAM_PAGES_FUNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([totalram_pages], [
		#include <linux/mm.h>
	], [
		unsigned long pages __attribute__ ((unused));
		pages = totalram_pages();
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		unsigned long pages __attribute__ ((unused));
		pages = totalram_pages();
	]],
	    [["Dual BSD/GPL"]])], [totalram_pages])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([totalram_pages], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		unsigned long pages __attribute__ ((unused));
		pages = totalram_pages();
	]], [[]])], [totalram_pages_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([totalram_pages_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TOTALHIGH_PAGES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([totalhigh_pages], [
		#include <linux/highmem.h>
	], [
		unsigned long pages __attribute__ ((unused));
		pages = totalhigh_pages();
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/highmem.h>
	]], [[
		unsigned long pages __attribute__ ((unused));
		pages = totalhigh_pages();
	]],
	    [["Dual BSD/GPL"]])], [totalhigh_pages])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([totalhigh_pages], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/highmem.h>
	]], [[
		unsigned long pages __attribute__ ((unused));
		pages = totalhigh_pages();
	]], [[]])], [totalhigh_pages_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([totalhigh_pages_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KSTRTOUL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kstrtoul], [
		#include <linux/kernel.h>
	], [
		int ret __attribute__ ((unused)) = kstrtoul(NULL, 10, NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kernel.h>
	]], [[
		int ret __attribute__ ((unused)) = kstrtoul(NULL, 10, NULL);
	]],
	    [["Dual BSD/GPL"]])], [kstrtoul])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kstrtoul], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kernel.h>
	]], [[
		int ret __attribute__ ((unused)) = kstrtoul(NULL, 10, NULL);
	]], [[]])], [kstrtoul_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kstrtoul_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERCPU
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERCPU_COUNTER_INIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([percpu_counter_init_with_gfp], [
		#include <linux/gfp.h>
		#include <linux/percpu_counter.h>
	], [
		struct percpu_counter counter;
		int error;

		error = percpu_counter_init(&counter, 0, GFP_KERNEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/gfp.h>
		#include <linux/percpu_counter.h>
	]], [[
		struct percpu_counter counter;
		int error;

		error = percpu_counter_init(&counter, 0, GFP_KERNEL);
	]],
	    [["Dual BSD/GPL"]])], [percpu_counter_init_with_gfp])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_counter_init_with_gfp], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/gfp.h>
		#include <linux/percpu_counter.h>
	]], [[
		struct percpu_counter counter;
		int error;

		error = percpu_counter_init(&counter, 0, GFP_KERNEL);
	]], [[]])], [percpu_counter_init_with_gfp_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_counter_init_with_gfp_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERCPU_COUNTER_ADD_BATCH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([percpu_counter_add_batch], [
		#include <linux/percpu_counter.h>
	], [
		struct percpu_counter counter;

		percpu_counter_add_batch(&counter, 1, 1);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/percpu_counter.h>
	]], [[
		struct percpu_counter counter;

		percpu_counter_add_batch(&counter, 1, 1);
	]],
	    [["Dual BSD/GPL"]])], [percpu_counter_add_batch])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_counter_add_batch], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/percpu_counter.h>
	]], [[
		struct percpu_counter counter;

		percpu_counter_add_batch(&counter, 1, 1);
	]], [[]])], [percpu_counter_add_batch_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_counter_add_batch_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERCPU_REF_COUNT_IN_DATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([percpu_ref_count_in_data], [
		#include <linux/percpu-refcount.h>
	], [
		struct percpu_ref_data d;

		atomic_long_set(&d.count, 1L);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/percpu-refcount.h>
	]], [[
		struct percpu_ref_data d;

		atomic_long_set(&d.count, 1L);
	]],
	    [["Dual BSD/GPL"]])], [percpu_ref_count_in_data])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_ref_count_in_data], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/percpu-refcount.h>
	]], [[
		struct percpu_ref_data d;

		atomic_long_set(&d.count, 1L);
	]], [[]])], [percpu_ref_count_in_data_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_ref_count_in_data_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CPU_HOTPLUG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([cpu_hotplug], [
		#include <linux/cpuhotplug.h>
	], [
		enum cpuhp_state state = CPUHP_ONLINE;
		int (*fp)(unsigned int, struct hlist_node *) = NULL;
		cpuhp_state_add_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_state_remove_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_setup_state_multi(state, "", fp, fp);
		cpuhp_remove_multi_state(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cpuhotplug.h>
	]], [[
		enum cpuhp_state state = CPUHP_ONLINE;
		int (*fp)(unsigned int, struct hlist_node *) = NULL;
		cpuhp_state_add_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_state_remove_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_setup_state_multi(state, "", fp, fp);
		cpuhp_remove_multi_state(0);
	]],
	    [["Dual BSD/GPL"]])], [cpu_hotplug])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cpu_hotplug], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cpuhotplug.h>
	]], [[
		enum cpuhp_state state = CPUHP_ONLINE;
		int (*fp)(unsigned int, struct hlist_node *) = NULL;
		cpuhp_state_add_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_state_remove_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_setup_state_multi(state, "", fp, fp);
		cpuhp_remove_multi_state(0);
	]], [[]])], [cpu_hotplug_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cpu_hotplug_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_FILLATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_fillattr_userns], [
		#include <linux/fs.h>
	], [
		struct user_namespace *userns = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(userns, in, k);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct user_namespace *userns = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(userns, in, k);
	]],
	    [["Dual BSD/GPL"]])], [generic_fillattr_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fillattr_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct user_namespace *userns = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(userns, in, k);
	]], [[]])], [generic_fillattr_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fillattr_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_fillattr_mnt_idmap], [
		#include <linux/fs.h>
	], [
		struct mnt_idmap *idmap = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(idmap, in, k);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct mnt_idmap *idmap = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(idmap, in, k);
	]],
	    [["Dual BSD/GPL"]])], [generic_fillattr_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fillattr_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct mnt_idmap *idmap = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(idmap, in, k);
	]], [[]])], [generic_fillattr_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fillattr_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_MKNOD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([mknod_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod          = tmp_mknod,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod          = tmp_mknod,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [mknod_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mknod_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod          = tmp_mknod,
		};
	]], [[]], [[]])], [mknod_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mknod_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([mknod_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod		= tmp_mknod,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod		= tmp_mknod,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [mknod_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mknod_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod		= tmp_mknod,
		};
	]], [[]], [[]])], [mknod_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mknod_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SYMLINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([symlink_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>
		int tmp_symlink(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink                = tmp_symlink,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>
		int tmp_symlink(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink                = tmp_symlink,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [symlink_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([symlink_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>
		int tmp_symlink(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink                = tmp_symlink,
		};
	]], [[]], [[]])], [symlink_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([symlink_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([symlink_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_symlink(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink		= tmp_symlink,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_symlink(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink		= tmp_symlink,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [symlink_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([symlink_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_symlink(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink		= tmp_symlink,
		};
	]], [[]], [[]])], [symlink_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([symlink_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_MAX_SEGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_max_segs], [
		#include <linux/bio.h>
	], [
		bio_max_segs(1);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		bio_max_segs(1);
	]],
	    [["Dual BSD/GPL"]])], [bio_max_segs])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_max_segs], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		bio_max_segs(1);
	]], [[]])], [bio_max_segs_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_max_segs_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SIGNAL_STOP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([signal_stop], [
		#include <linux/sched/signal.h>
	], [
		kernel_signal_stop();
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched/signal.h>
	]], [[
		kernel_signal_stop();
	]],
	    [["Dual BSD/GPL"]])], [signal_stop])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([signal_stop], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched/signal.h>
	]], [[
		kernel_signal_stop();
	]], [[]])], [signal_stop_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([signal_stop_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SIGINFO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([siginfo], [
		#include <linux/signal_types.h>
	], [
		kernel_siginfo_t info __attribute__ ((unused));
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/signal_types.h>
	]], [[
		kernel_siginfo_t info __attribute__ ((unused));
	]],
	    [["Dual BSD/GPL"]])], [siginfo])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([siginfo], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/signal_types.h>
	]], [[
		kernel_siginfo_t info __attribute__ ((unused));
	]], [[]])], [siginfo_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([siginfo_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SYSFS
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SYSFS_DEFAULT_GROUPS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([sysfs_default_groups], [
		#include <linux/kobject.h>
	], [
		struct kobj_type __attribute__ ((unused)) kt = {
			.default_groups = (const struct attribute_group **)NULL };
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kobject.h>
	]], [[
		struct kobj_type __attribute__ ((unused)) kt = {
			.default_groups = (const struct attribute_group **)NULL };
	]],
	    [["Dual BSD/GPL"]])], [sysfs_default_groups])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sysfs_default_groups], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kobject.h>
	]], [[
		struct kobj_type __attribute__ ((unused)) kt = {
			.default_groups = (const struct attribute_group **)NULL };
	]], [[]])], [sysfs_default_groups_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sysfs_default_groups_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SET_SPECIAL_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([set_special_state], [
		#include <linux/sched.h>
	], [
		set_special_state(TASK_STOPPED);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
	]], [[
		set_special_state(TASK_STOPPED);
	]],
	    [["Dual BSD/GPL"]])], [set_special_state])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_special_state], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
	]], [[
		set_special_state(TASK_STOPPED);
	]], [[]])], [set_special_state_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_special_state_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_STANDALONE_LINUX_STDARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([has_standalone_linux_stdarg], [
		#include <linux/stdarg.h>

		#if !defined(va_start) || !defined(va_end) || \
		    !defined(va_arg) || !defined(va_copy)
		#error "<linux/stdarg.h> is invalid"
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/stdarg.h>

		#if !defined(va_start) || !defined(va_end) || \
		    !defined(va_arg) || !defined(va_copy)
		#error "<linux/stdarg.h> is invalid"
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [has_standalone_linux_stdarg])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([has_standalone_linux_stdarg], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/stdarg.h>

		#if !defined(va_start) || !defined(va_end) || \
		    !defined(va_arg) || !defined(va_copy)
		#error "<linux/stdarg.h> is invalid"
		#endif
	]], [[]], [[]])], [has_standalone_linux_stdarg_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([has_standalone_linux_stdarg_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PAGEMAP_FOLIO_WAIT_BIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([pagemap_has_folio_wait_bit], [
		#include <linux/pagemap.h>
	], [
		static struct folio *f = NULL;

		folio_wait_bit(f, PG_writeback);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/pagemap.h>
	]], [[
		static struct folio *f = NULL;

		folio_wait_bit(f, PG_writeback);
	]],
	    [["Dual BSD/GPL"]])], [pagemap_has_folio_wait_bit])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([pagemap_has_folio_wait_bit], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/pagemap.h>
	]], [[
		static struct folio *f = NULL;

		folio_wait_bit(f, PG_writeback);
	]], [[]])], [pagemap_has_folio_wait_bit_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([pagemap_has_folio_wait_bit_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ADD_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([add_disk_ret], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		int error __attribute__ ((unused)) = add_disk(disk);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		int error __attribute__ ((unused)) = add_disk(disk);
	]],
	    [["Dual BSD/GPL"]])], [add_disk_ret])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([add_disk_ret], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		int error __attribute__ ((unused)) = add_disk(disk);
	]], [[]])], [add_disk_ret_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([add_disk_ret_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTHREAD
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTHREAD_COMPLETE_AND_EXIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kthread_complete_and_exit], [
		#include <linux/kthread.h>
	], [
		struct completion *completion = NULL;
		long code = 0;

		kthread_complete_and_exit(completion, code);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kthread.h>
	]], [[
		struct completion *completion = NULL;
		long code = 0;

		kthread_complete_and_exit(completion, code);
	]],
	    [["Dual BSD/GPL"]])], [kthread_complete_and_exit])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kthread_complete_and_exit], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kthread.h>
	]], [[
		struct completion *completion = NULL;
		long code = 0;

		kthread_complete_and_exit(completion, code);
	]], [[]])], [kthread_complete_and_exit_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kthread_complete_and_exit_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTHREAD_DEQUEUE_SIGNAL_4ARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kthread_dequeue_signal], [
		#include <linux/sched/signal.h>
	], [
		struct task_struct *task = NULL;
		sigset_t *mask = NULL;
		kernel_siginfo_t *info = NULL;
		enum pid_type *type = NULL;
		int error __attribute__ ((unused));

		error = dequeue_signal(task, mask, info, type);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched/signal.h>
	]], [[
		struct task_struct *task = NULL;
		sigset_t *mask = NULL;
		kernel_siginfo_t *info = NULL;
		enum pid_type *type = NULL;
		int error __attribute__ ((unused));

		error = dequeue_signal(task, mask, info, type);
	]],
	    [["Dual BSD/GPL"]])], [kthread_dequeue_signal])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kthread_dequeue_signal], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched/signal.h>
	]], [[
		struct task_struct *task = NULL;
		sigset_t *mask = NULL;
		kernel_siginfo_t *info = NULL;
		enum pid_type *type = NULL;
		int error __attribute__ ((unused));

		error = dequeue_signal(task, mask, info, type);
	]], [[]])], [kthread_dequeue_signal_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kthread_dequeue_signal_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ZERO_PAGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([zero_page], [
		#include <asm/pgtable.h>
	], [
		struct page *p __attribute__ ((unused));
		p = ZERO_PAGE(0);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <asm/pgtable.h>
	]], [[
		struct page *p __attribute__ ((unused));
		p = ZERO_PAGE(0);
	]],
	    [["Dual BSD/GPL"]])], [zero_page])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([zero_page], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <asm/pgtable.h>
	]], [[
		struct page *p __attribute__ ((unused));
		p = ZERO_PAGE(0);
	]], [[ZFS_META_LICENSE]])], [zero_page_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([zero_page_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC___COPY_FROM_USER_INATOMIC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([__copy_from_user_inatomic], [
		#include <linux/uaccess.h>
	], [
		int result __attribute__ ((unused)) = __copy_from_user_inatomic(NULL, NULL, 0);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/uaccess.h>
	]], [[
		int result __attribute__ ((unused)) = __copy_from_user_inatomic(NULL, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [__copy_from_user_inatomic])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__copy_from_user_inatomic], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/uaccess.h>
	]], [[
		int result __attribute__ ((unused)) = __copy_from_user_inatomic(NULL, NULL, 0);
	]], [[ZFS_META_LICENSE]])], [__copy_from_user_inatomic_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__copy_from_user_inatomic_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_USER_NS_COMMON_INUM
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([user_ns_common_inum], [
		#include <linux/user_namespace.h>
	], [
		struct user_namespace uns;
		uns.ns.inum = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/user_namespace.h>
	]], [[
		struct user_namespace uns;
		uns.ns.inum = 0;
	]],
	    [["Dual BSD/GPL"]])], [user_ns_common_inum])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([user_ns_common_inum], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/user_namespace.h>
	]], [[
		struct user_namespace uns;
		uns.ns.inum = 0;
	]], [[]])], [user_ns_common_inum_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([user_ns_common_inum_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_IDMAP_MNT_API
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([idmap_mnt_api], [
                #include <linux/fs.h>
        ], [
		int fs_flags = 0;
		fs_flags |= FS_ALLOW_IDMAP;
        ])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
                #include <linux/fs.h>
        ]], [[
		int fs_flags = 0;
		fs_flags |= FS_ALLOW_IDMAP;
        ]],
	    [["Dual BSD/GPL"]])], [idmap_mnt_api])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([idmap_mnt_api], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
                #include <linux/fs.h>
        ]], [[
		int fs_flags = 0;
		fs_flags |= FS_ALLOW_IDMAP;
        ]], [[]])], [idmap_mnt_api_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([idmap_mnt_api_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_IATTR_VFSID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iattr_vfsid], [
		#include <linux/fs.h>
	], [
		struct iattr ia;
		ia.ia_vfsuid = (vfsuid_t){0};
		ia.ia_vfsgid = (vfsgid_t){0};
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct iattr ia;
		ia.ia_vfsuid = (vfsuid_t){0};
		ia.ia_vfsgid = (vfsgid_t){0};
	]],
	    [["Dual BSD/GPL"]])], [iattr_vfsid])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iattr_vfsid], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct iattr ia;
		ia.ia_vfsuid = (vfsuid_t){0};
		ia.ia_vfsgid = (vfsgid_t){0};
	]], [[]])], [iattr_vfsid_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iattr_vfsid_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FILEMAP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([filemap_range_has_page], [
		#include <linux/fs.h>
	], [
		struct address_space *mapping = NULL;
		loff_t lstart = 0;
		loff_t lend = 0;
		bool ret __attribute__ ((unused));

		ret = filemap_range_has_page(mapping, lstart, lend);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct address_space *mapping = NULL;
		loff_t lstart = 0;
		loff_t lend = 0;
		bool ret __attribute__ ((unused));

		ret = filemap_range_has_page(mapping, lstart, lend);
	]],
	    [["Dual BSD/GPL"]])], [filemap_range_has_page])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([filemap_range_has_page], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct address_space *mapping = NULL;
		loff_t lstart = 0;
		loff_t lend = 0;
		bool ret __attribute__ ((unused));

		ret = filemap_range_has_page(mapping, lstart, lend);
	]], [[]])], [filemap_range_has_page_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([filemap_range_has_page_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WRITEPAGE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([writepage_t_folio], [
		#include <linux/writeback.h>
		int putpage(struct folio *folio,
		    struct writeback_control *wbc, void *data)
		{ return 0; }
		writepage_t func = putpage;
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/writeback.h>
		int putpage(struct folio *folio,
		    struct writeback_control *wbc, void *data)
		{ return 0; }
		writepage_t func = putpage;
	]], [[]],
	    [["Dual BSD/GPL"]])], [writepage_t_folio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([writepage_t_folio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/writeback.h>
		int putpage(struct folio *folio,
		    struct writeback_control *wbc, void *data)
		{ return 0; }
		writepage_t func = putpage;
	]], [[]], [[]])], [writepage_t_folio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([writepage_t_folio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CPU_HAS_FEATURE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([cpu_has_feature], [
		#include <linux/version.h>
		#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 7, 0)
		#include <asm/cpu_has_feature.h>
		#else
		#include <asm/cputable.h>
		#endif
	], [
		return cpu_has_feature(CPU_FTR_ALTIVEC) ? 0 : 1;
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/version.h>
		#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 7, 0)
		#include <asm/cpu_has_feature.h>
		#else
		#include <asm/cputable.h>
		#endif
	]], [[
		return cpu_has_feature(CPU_FTR_ALTIVEC) ? 0 : 1;
	]],
	    [["Dual BSD/GPL"]])], [cpu_has_feature])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cpu_has_feature], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/version.h>
		#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 7, 0)
		#include <asm/cpu_has_feature.h>
		#else
		#include <asm/cputable.h>
		#endif
	]], [[
		return cpu_has_feature(CPU_FTR_ALTIVEC) ? 0 : 1;
	]], [[ZFS_META_LICENSE]])], [cpu_has_feature_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cpu_has_feature_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FLUSH_DCACHE_PAGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([flush_dcache_page], [
		#include <asm/cacheflush.h>
	], [
		flush_dcache_page(0);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <asm/cacheflush.h>
	]], [[
		flush_dcache_page(0);
	]],
	    [["Dual BSD/GPL"]])], [flush_dcache_page])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([flush_dcache_page], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <asm/cacheflush.h>
	]], [[
		flush_dcache_page(0);
	]], [[ZFS_META_LICENSE]])], [flush_dcache_page_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([flush_dcache_page_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_COMPILE_ALL([kabi])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_COMPILE([kabi], [build])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build], [test -f build/build.log], [
		mv build/Makefile build/Makefile.compile.kabi
		mv build/build.log build/build.log.kabi
	], [
	        AC_MSG_ERROR([
        *** Unable to compile test source to determine kernel interfaces.])
	], [yes], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_MODPOST([kabi], [build/$name])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/$name], [test -f build/$name/build.log], [
		mv build/$name/Makefile build/$name/Makefile.modpost.kabi
		cat build/$name/build.log >>build/build.log.kabi
	], [
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_MODPOST([kabi], [build])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build], [test -f build/build.log], [
		mv build/Makefile build/Makefile.modpost.kabi
		cat build/build.log >>build/build.log.kabi
	], [
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TEST_RESULT
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ACCESS_OK_TYPE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([access_ok_type], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ACCESS_OK_TYPE, 1,
		    [kernel has access_ok with 'type' parameter])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ACCESS_OK_TYPE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_NODE_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([global_node_page_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GLOBAL_NODE_PAGE_STATE, 1,
		    [global_node_page_state() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GLOBAL_NODE_PAGE_STATE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_ZONE_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([global_zone_page_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GLOBAL_ZONE_PAGE_STATE, 1,
		    [global_zone_page_state() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GLOBAL_ZONE_PAGE_STATE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_FILE_PAGES], [node_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_NODE_STAT_ITEM_NR_FILE_PAGES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_ANON], [node_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_NODE_STAT_ITEM_NR_INACTIVE_ANON$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_FILE], [node_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_NODE_STAT_ITEM_NR_INACTIVE_FILE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_FILE_PAGES], [zone_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_ZONE_STAT_ITEM_NR_FILE_PAGES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_ANON], [zone_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_ZONE_STAT_ITEM_NR_INACTIVE_ANON$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_FILE], [zone_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_ZONE_STAT_ITEM_NR_INACTIVE_FILE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_ZONE_PAGE_STATE_SANITY
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_FILE_PAGES])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_FILE_PAGES], [DUPLICATE])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_FILE_PAGES], [NOT FOUND])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_INACTIVE_ANON])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_INACTIVE_ANON], [DUPLICATE])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_INACTIVE_ANON], [NOT FOUND])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_INACTIVE_FILE])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_INACTIVE_FILE], [DUPLICATE])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_INACTIVE_FILE], [NOT FOUND])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_OBJTOOL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([objtool], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_OBJTOOL, 1,
		    [kernel does stack verification])

		AC_MSG_CHECKING([whether STACK_FRAME_NON_STANDARD is defined])
		ZFS_LINUX_TEST_RESULT([stack_frame_non_standard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STACK_FRAME_NON_STANDARD, 1,
			   [STACK_FRAME_NON_STANDARD is defined])
		],[
			AC_MSG_RESULT(no)
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_OBJTOOL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([stack_frame_non_standard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STACK_FRAME_NON_STANDARD, 1,
			   [STACK_FRAME_NON_STANDARD is defined])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_STACK_FRAME_NON_STANDARD$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PDE_DATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([pde_data], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SPL_PDE_DATA, pde_data, [pde_data() is pde_data()])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(SPL_PDE_DATA, PDE_DATA, [pde_data() is PDE_DATA()])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SPL_PDE_DATA$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SPL_PDE_DATA$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FALLOCATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_fallocate], [
		AC_MSG_RESULT(yes)
		AC_MSG_CHECKING([whether FALLOC_FL_ZERO_RANGE exists])
		ZFS_LINUX_TEST_RESULT([falloc_fl_zero_range], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FALLOC_FL_ZERO_RANGE, 1, [FALLOC_FL_ZERO_RANGE is defined])
		],[
			AC_MSG_RESULT(no)
		])
	], [
		ZFS_LINUX_TEST_ERROR([file_fallocate])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([falloc_fl_zero_range], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FALLOC_FL_ZERO_RANGE, 1, [FALLOC_FL_ZERO_RANGE is defined])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FALLOC_FL_ZERO_RANGE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([file_fallocate])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FADVISE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_fadvise], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_FADVISE, 1, [fops->fadvise() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILE_FADVISE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_FADVISE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([generic_fadvise], [generic_fadvise], [mm/fadvise.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_FADVISE, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([generic_fadvise], [mm/fadvise.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_FADVISE, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FADVISE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FADVISE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FADVISE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([2args_zlib_deflate_workspacesize], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE, 1,
		    [zlib_deflate_workspacesize() wants 2 args])
	], [
		ZFS_LINUX_TEST_ERROR([zlib_deflate_workspacesize()])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([zlib_deflate_workspacesize()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RWSEM
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RWSEM_ACTIVITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([rwsem_activity], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_RWSEM_ACTIVITY, 1,
		    [struct rw_semaphore has member activity])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RWSEM_ACTIVITY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RWSEM_ATOMIC_LONG_COUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([rwsem_atomic_long_count], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_RWSEM_ATOMIC_LONG_COUNT, 1,
		    [struct rw_semaphore has atomic_long_t member count])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RWSEM_ATOMIC_LONG_COUNT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SCHED
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SCHED_RT_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([sched_rt_header], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([sched_rt_header])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([sched_rt_header])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SCHED_SIGNAL_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([sched_signal_header], [
		AC_DEFINE(HAVE_SCHED_SIGNAL_HEADER, 1,
		    [linux/sched/signal.h exists])
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SCHED_SIGNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_IO_SCHEDULE_TIMEOUT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([io_schedule_timeout], [io_schedule_timeout], [], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IO_SCHEDULE_TIMEOUT, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([io_schedule_timeout], [], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IO_SCHEDULE_TIMEOUT, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IO_SCHEDULE_TIMEOUT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IO_SCHEDULE_TIMEOUT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IO_SCHEDULE_TIMEOUT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_USLEEP_RANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([usleep_range], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([usleep_range()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([usleep_range()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KMEM_CACHE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KMEM_CACHE_CREATE_USERCOPY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kmem_cache_create_usercopy], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KMEM_CACHE_CREATE_USERCOPY, 1,
		    [kmem_cache_create_usercopy() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KMEM_CACHE_CREATE_USERCOPY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KVMALLOC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kvmalloc], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KVMALLOC, 1, [kvmalloc exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KVMALLOC$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VMALLOC_PAGE_KERNEL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([__vmalloc], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VMALLOC_PAGE_KERNEL, 1, [__vmalloc page flags exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VMALLOC_PAGE_KERNEL$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WAIT
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WAIT_ON_BIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([wait_on_bit], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_ON_BIT_ACTION, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WAIT_ON_BIT_ACTION$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WAIT_QUEUE_HEAD_ENTRY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([wait_queue_head_entry], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_HEAD_ENTRY, 1,
		    [wq_head->head and wq_entry->entry exist])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WAIT_QUEUE_HEAD_ENTRY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_TIMES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([timestamp_truncate], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_TIMESTAMP_TRUNCATE, 1,
		    [timestamp_truncate() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_TIMESTAMP_TRUNCATE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_times], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_TIMESPEC64_TIMES, 1,
		    [inode->i_*time's are timespec64])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_TIMESPEC64_TIMES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_LOCK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_lock], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_LOCK_SHARED, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_LOCK_SHARED$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GROUP_INFO_GID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([group_info_gid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GROUP_INFO_GID, 1, [group_info->gid exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GROUP_INFO_GID$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RW
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WRITE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kernel_write], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_WRITE_PPOS, 1,
		    [kernel_write() take loff_t pointer])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_WRITE_PPOS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_READ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kernel_read], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_READ_PPOS, 1,
		    [kernel_read() take loff_t pointer])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_READ_PPOS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TIMER_SETUP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([timer_setup], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_SETUP, 1,
		    [timer_setup() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_TIMER_SETUP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([timer_list_function], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_FUNCTION_TIMER_LIST, 1,
		    [timer_list.function gets a timer_list])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_TIMER_FUNCTION_TIMER_LIST$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([timer_list_flags], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_LIST_FLAGS, 1,
		    [struct timer_list has a flags member])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_TIMER_LIST_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SUPER_USER_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([super_user_ns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SUPER_USER_NS, 1,
		    [super_block->s_user_ns exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUPER_USER_NS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PROC_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([proc_ops_struct], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PROC_OPS_STRUCT, 1, [proc_ops structure exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PROC_OPS_STRUCT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_CHECK_EVENTS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([block_device_operations_check_events], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bops->check_events()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bops->check_events()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_RELEASE_VOID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([block_device_operations_release_void], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bops->release()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bops->release()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([block_device_operations_revalidate_disk], [
		AC_DEFINE([HAVE_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK], [1],
			[Define if revalidate_disk() in block_device_operations])
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_FAILFAST_MASK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_failfast_mask], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([REQ_FAILFAST_MASK])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([REQ_FAILFAST_MASK])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_DISCARD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_discard], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_DISCARD, 1, [REQ_DISCARD is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_DISCARD$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_FLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_FLUSH, 1, [REQ_FLUSH is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_FLUSH$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_PREFLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_preflush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_PREFLUSH, 1, [REQ_PREFLUSH is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_PREFLUSH$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_OP_DISCARD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_op_discard], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_DISCARD, 1, [REQ_OP_DISCARD is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_OP_DISCARD$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_OP_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_op_secure_erase], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_SECURE_ERASE, 1,
		    [REQ_OP_SECURE_ERASE is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_OP_SECURE_ERASE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_OP_FLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_op_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_FLUSH, 1, [REQ_OP_FLUSH is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_OP_FLUSH$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_BI_OPF
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bi_opf], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BI_OPF, 1, [bio->bi_opf is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_BI_OPF$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_SET_OP_ATTRS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_set_op_attrs], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_SET_OP_ATTRS, 1,
		    [bio_set_op_attrs is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_SET_OP_ATTRS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_SET_DEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_set_dev], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_SET_DEV, 1, [bio_set_dev() is available])

		AC_MSG_CHECKING([whether bio_set_dev() is GPL-only])
		ZFS_LINUX_TEST_RESULT([bio_set_dev_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_GPL_ONLY, 1,
			    [bio_set_dev() GPL-only])
		])

		AC_MSG_CHECKING([whether bio_set_dev() is a macro])
		ZFS_LINUX_TEST_RESULT([bio_set_dev_macro], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_MACRO, 1,
			    [bio_set_dev() is a macro])
		],[
			AC_MSG_RESULT(no)
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_SET_DEV$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_set_dev_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_GPL_ONLY, 1,
			    [bio_set_dev() GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_SET_DEV_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_set_dev_macro], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_MACRO, 1,
			    [bio_set_dev() is a macro])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_SET_DEV_MACRO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_END_IO_T_ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_end_io_t_args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_1ARG_BIO_END_IO_T, 1,
		    [bio_end_io_t wants 1 arg])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_BIO_END_IO_T$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_BI_STATUS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bi_status], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BI_STATUS, 1, [bio->bi_status exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_BI_STATUS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_BVEC_ITER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bvec_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BVEC_ITER, 1, [bio has bi_iter])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_BVEC_ITER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_SUBMIT_BIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([submit_bio], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_1ARG_SUBMIT_BIO, 1, [submit_bio() wants 1 arg])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_SUBMIT_BIO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_CURRENT_BIO_LIST
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([current_bio_list], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bio_list])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bio_list])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKG_TRYGET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkg_tryget], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKG_TRYGET, 1, [blkg_tryget() is available])

		AC_MSG_CHECKING([whether blkg_tryget() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blkg_tryget_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKG_TRYGET_GPL_ONLY, 1,
			    [blkg_tryget() GPL-only])
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKG_TRYGET$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkg_tryget_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKG_TRYGET_GPL_ONLY, 1,
			    [blkg_tryget() GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKG_TRYGET_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_BDEV_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bdev_disk], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BDEV_DISK, 1, [bio->bi_bdev->bd_disk exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_BDEV_DISK$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BDEV_SUBMIT_BIO_RETURNS_VOID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bdev_submit_bio_void], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_SUBMIT_BIO_RETURNS_VOID, 1,
			[block_device_operations->submit_bio() returns void])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_SUBMIT_BIO_RETURNS_VOID$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_CGROUP_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_cgroup_header], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_LINUX_BLK_CGROUP_HEADER, 1,
			[linux/blk-cgroup.h exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LINUX_BLK_CGROUP_HEADER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_ALLOC_4ARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_alloc_4arg], [
		AC_MSG_RESULT(yes)
		AC_DEFINE([HAVE_BIO_ALLOC_4ARG], 1, [bio_alloc() takes 4 arguments])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_ALLOC_4ARG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_GET_BY_PATH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_get_by_path], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blkdev_get_by_path()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blkdev_get_by_path()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_PUT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_put], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blkdev_put()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blkdev_put()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_REREAD_PART
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_reread_part], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKDEV_REREAD_PART, 1,
		    [blkdev_reread_part() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKDEV_REREAD_PART$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_INVALIDATE_BDEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([invalidate_bdev], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([invalidate_bdev()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([invalidate_bdev()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_LOOKUP_BDEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_devt], [lookup_bdev], [fs/block_dev.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DEVT_LOOKUP_BDEV, 1,
		    [lookup_bdev() wants dev_t arg])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether lookup_bdev() wants 1 arg])
		ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg],
		    [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg], [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode], [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode], [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DEVT_LOOKUP_BDEV, 1,
		    [lookup_bdev() wants dev_t arg])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether lookup_bdev() wants 1 arg])
		ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg],
		    [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg], [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode], [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode], [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DEVT_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DEVT_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DEVT_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_LOGICAL_BLOCK_SIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_logical_block_size], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bdev_logical_block_size()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdev_logical_block_size()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_PHYSICAL_BLOCK_SIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_physical_block_size], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bdev_physical_block_size()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdev_physical_block_size()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_CHECK_DISK_CHANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([check_disk_change], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CHECK_DISK_CHANGE, 1,
		    [check_disk_change() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CHECK_DISK_CHANGE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_CHECK_MEDIA_CHANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_check_media_change], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_CHECK_MEDIA_CHANGE, 1,
		    [bdev_check_media_change() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_CHECK_MEDIA_CHANGE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_WHOLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_whole], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_WHOLE, 1, [bdev_whole() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_WHOLE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEVNAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdevname], [
		AC_DEFINE(HAVE_BDEVNAME, 1, [bdevname() is available])
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEVNAME$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_GET_ERESTARTSYS
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKDEV_GET_ERESTARTSYS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_ISSUE_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_issue_secure_erase], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKDEV_ISSUE_SECURE_ERASE, 1,
		    [blkdev_issue_secure_erase() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blkdev_issue_discard() is available])
		ZFS_LINUX_TEST_RESULT([blkdev_issue_discard_flags], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKDEV_ISSUE_DISCARD, 1,
			    [blkdev_issue_discard() is available])
		],[
			ZFS_LINUX_TEST_ERROR([blkdev_issue_discard()])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKDEV_ISSUE_SECURE_ERASE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_issue_discard_flags], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKDEV_ISSUE_DISCARD, 1,
			    [blkdev_issue_discard() is available])
		], [
			ZFS_LINUX_TEST_ERROR([blkdev_issue_discard()])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKDEV_ISSUE_DISCARD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blkdev_issue_discard()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_KOBJ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_kobj], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_KOBJ, 1,
		    [bdev_kobj() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_KOBJ$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_PART_TO_DEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([part_to_dev], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PART_TO_DEV, 1,
		    [part_to_dev() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PART_TO_DEV$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_PLUG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_plug], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blk_plug])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_plug])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_BDI
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_bdi], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_BDI_DYNAMIC, 1,
		    [blk queue backing_dev_info is dynamic])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_BDI_DYNAMIC$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_UPDATE_READAHEAD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_update_readahead], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_UPDATE_READAHEAD, 1,
		    [blk_queue_update_readahead() exists])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether disk_update_readahead() exists])
		ZFS_LINUX_TEST_RESULT([disk_update_readahead], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_DISK_UPDATE_READAHEAD, 1,
			    [disk_update_readahead() exists])
		],[
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_UPDATE_READAHEAD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([disk_update_readahead], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_DISK_UPDATE_READAHEAD, 1,
			    [disk_update_readahead() exists])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DISK_UPDATE_READAHEAD$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_DISCARD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_max_discard_sectors], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_MAX_DISCARD_SECTORS, 1,
		    [bdev_max_discard_sectors() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blk_queue_discard() is available])
		ZFS_LINUX_TEST_RESULT([blk_queue_discard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_DISCARD, 1,
			    [blk_queue_discard() is available])
		],[
			ZFS_LINUX_TEST_ERROR([blk_queue_discard])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_MAX_DISCARD_SECTORS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_discard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_DISCARD, 1,
			    [blk_queue_discard() is available])
		], [
			ZFS_LINUX_TEST_ERROR([blk_queue_discard])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_DISCARD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_queue_discard])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_max_secure_erase_sectors], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_MAX_SECURE_ERASE_SECTORS, 1,
		    [bdev_max_secure_erase_sectors() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blk_queue_secure_erase() is available])
		ZFS_LINUX_TEST_RESULT([blk_queue_secure_erase], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECURE_ERASE, 1,
			    [blk_queue_secure_erase() is available])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether blk_queue_secdiscard() is available])
			ZFS_LINUX_TEST_RESULT([blk_queue_secdiscard], [
				AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECDISCARD, 1,
				    [blk_queue_secdiscard() is available])
			],[
				ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_MAX_SECURE_ERASE_SECTORS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_secure_erase], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECURE_ERASE, 1,
			    [blk_queue_secure_erase() is available])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether blk_queue_secdiscard() is available])
			ZFS_LINUX_TEST_RESULT([blk_queue_secdiscard], [
				AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECDISCARD, 1,
				    [blk_queue_secdiscard() is available])
			],[
				ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_SECURE_ERASE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_secdiscard], [
				AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECDISCARD, 1,
				    [blk_queue_secdiscard() is available])
			], [
				ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_SECDISCARD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_FLAG_SET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_flag_set], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLAG_SET, 1,
		    [blk_queue_flag_set() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_FLAG_SET$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_FLAG_CLEAR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_flag_clear], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLAG_CLEAR, 1,
		    [blk_queue_flag_clear() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_FLAG_CLEAR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_FLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLUSH, 1,
		    [blk_queue_flush() is available])

		AC_MSG_CHECKING([whether blk_queue_flush() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blk_queue_flush_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_FLUSH_GPL_ONLY, 1,
			    [blk_queue_flush() is GPL-only])
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_FLUSH$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_flush_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_FLUSH_GPL_ONLY, 1,
			    [blk_queue_flush() is GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_FLUSH_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_write_cache], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_WRITE_CACHE, 1,
		    [blk_queue_write_cache() exists])

		AC_MSG_CHECKING([whether blk_queue_write_cache() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blk_queue_write_cache_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_WRITE_CACHE_GPL_ONLY, 1,
			    [blk_queue_write_cache() is GPL-only])
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_WRITE_CACHE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_write_cache_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_WRITE_CACHE_GPL_ONLY, 1,
			    [blk_queue_write_cache() is GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_WRITE_CACHE_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_MAX_HW_SECTORS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_max_hw_sectors], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blk_queue_max_hw_sectors])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_queue_max_hw_sectors])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_MAX_SEGMENTS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_max_segments], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blk_queue_max_segments])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_queue_max_segments])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_MQ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_mq], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_MQ, 1, [block multiqueue is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_MQ$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENHD_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([genhd_fl_ext_devt], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GENHD_FL_EXT_DEVT, GENHD_FL_EXT_DEVT,
		    [GENHD_FL_EXT_DEVT flag is available])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(ZFS_GENHD_FL_EXT_DEVT, 0,
		    [GENHD_FL_EXT_DEVT flag is not available])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GENHD_FL_EXT_DEVT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GENHD_FL_EXT_DEVT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([genhd_fl_no_part], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GENHD_FL_NO_PART, GENHD_FL_NO_PART,
		    [GENHD_FL_NO_PART flag is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether GENHD_FL_NO_PART_SCAN flag is available])
		ZFS_LINUX_TEST_RESULT([genhd_fl_no_part_scan], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(ZFS_GENHD_FL_NO_PART, GENHD_FL_NO_PART_SCAN,
			    [GENHD_FL_NO_PART_SCAN flag is available])
		], [
			ZFS_LINUX_TEST_ERROR([GENHD_FL_NO_PART|GENHD_FL_NO_PART_SCAN])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GENHD_FL_NO_PART$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([genhd_fl_no_part_scan], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(ZFS_GENHD_FL_NO_PART, GENHD_FL_NO_PART_SCAN,
			    [GENHD_FL_NO_PART_SCAN flag is available])
		], [
			ZFS_LINUX_TEST_ERROR([GENHD_FL_NO_PART|GENHD_FL_NO_PART_SCAN])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GENHD_FL_NO_PART$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([GENHD_FL_NO_PART|GENHD_FL_NO_PART_SCAN])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_REVALIDATE_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk_size], [revalidate_disk_size], [block/genhd.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REVALIDATE_DISK_SIZE, 1,
		    [revalidate_disk_size() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether revalidate_disk() is available])
		ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk],
		    [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk], [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([revalidate_disk_size], [block/genhd.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REVALIDATE_DISK_SIZE, 1,
		    [revalidate_disk_size() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether revalidate_disk() is available])
		ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk],
		    [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk], [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK_SIZE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK_SIZE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK_SIZE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GET_DISK_RO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([get_disk_ro], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([get_disk_ro()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([get_disk_ro()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_READLINK_GLOBAL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([generic_readlink_global], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_GENERIC_READLINK, 1,
		    [generic_readlink is global])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_READLINK$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DISCARD_GRANULARITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([discard_granularity], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([ql->discard_granularity])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([ql->discard_granularity])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_OWNER_OR_CAPABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_owner_or_capable], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE, 1,
		    [inode_owner_or_capable() exists])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING(
		    [whether inode_owner_or_capable() takes user_ns])
		ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_USERNS, 1,
			    [inode_owner_or_capable() takes user_ns])
		],[
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether inode_owner_or_capable() takes mnt_idmap])
			ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_mnt_idmap], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_IDMAP, 1,
				    [inode_owner_or_capable() takes mnt_idmap])
			], [
				ZFS_LINUX_TEST_ERROR([capability])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_OWNER_OR_CAPABLE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_USERNS, 1,
			    [inode_owner_or_capable() takes user_ns])
		], [
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether inode_owner_or_capable() takes mnt_idmap])
			ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_mnt_idmap], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_IDMAP, 1,
				    [inode_owner_or_capable() takes mnt_idmap])
			], [
				ZFS_LINUX_TEST_ERROR([capability])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_OWNER_OR_CAPABLE_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_mnt_idmap], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_IDMAP, 1,
				    [inode_owner_or_capable() takes mnt_idmap])
			], [
				ZFS_LINUX_TEST_ERROR([capability])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_OWNER_OR_CAPABLE_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([capability])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONST_XATTR_HANDLER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([const_xattr_handler], [
		AC_MSG_RESULT([yes])
	], [
		ZFS_LINUX_TEST_ERROR([const xattr_handler])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([const xattr_handler])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR_HANDLER_NAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_name], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_HANDLER_NAME, 1,
		    [xattr_handler has name])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_HANDLER_NAME$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR_HANDLER_GET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE, 1,
		    [xattr_handler->get() wants both dentry and inode])
	], [
		dnl #
		dnl # 4.4 API change,
		dnl # The xattr_handler->get() callback was changed to take a
		dnl # attr_handler, and handler_flags argument was removed and
		dnl # should be accessed by handler->flags.
		dnl #
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(
		    [whether xattr_handler->get() wants xattr_handler])
		ZFS_LINUX_TEST_RESULT([xattr_handler_get_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_GET_HANDLER, 1,
			    [xattr_handler->get() wants xattr_handler])
		],[
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->get() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->get() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_GET_DENTRY, 1,
				    [xattr_handler->get() wants dentry])
			],[
				dnl #
				dnl # Android API change,
				dnl # The xattr_handler->get() callback was
				dnl # changed to take dentry, inode and flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->get() wants dentry and inode and flags])
				ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				],[
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_GET_DENTRY_INODE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_get_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_GET_HANDLER, 1,
			    [xattr_handler->get() wants xattr_handler])
		], [
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->get() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->get() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_GET_DENTRY, 1,
				    [xattr_handler->get() wants dentry])
			],[
				dnl #
				dnl # Android API change,
				dnl # The xattr_handler->get() callback was
				dnl # changed to take dentry, inode and flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->get() wants dentry and inode and flags])
				ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				],[
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_GET_HANDLER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_GET_DENTRY, 1,
				    [xattr_handler->get() wants dentry])
			], [
				dnl #
				dnl # Android API change,
				dnl # The xattr_handler->get() callback was
				dnl # changed to take dentry, inode and flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->get() wants dentry and inode and flags])
				ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				],[
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_GET_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				], [
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_GET_DENTRY_INODE_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([xattr get()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR_HANDLER_SET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_SET_IDMAP, 1,
		    [xattr_handler->set() takes mnt_idmap])
	], [
		AC_MSG_CHECKING([whether xattr_handler->set() wants dentry, inode, and user_namespace])
		ZFS_LINUX_TEST_RESULT([xattr_handler_set_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_SET_USERNS, 1,
			    [xattr_handler->set() takes user_namespace])
		],[
			dnl #
			dnl # 4.7 API change,
			dnl # The xattr_handler->set() callback was changed to take both
			dnl # dentry and inode.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING([whether xattr_handler->set() wants dentry and inode])
			ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry_inode], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_SET_DENTRY_INODE, 1,
				    [xattr_handler->set() wants both dentry and inode])
			],[
				dnl #
				dnl # 4.4 API change,
				dnl # The xattr_handler->set() callback was changed to take a
				dnl # xattr_handler, and handler_flags argument was removed and
				dnl # should be accessed by handler->flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->set() wants xattr_handler])
				ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				],[
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_SET_USERNS, 1,
			    [xattr_handler->set() takes user_namespace])
		], [
			dnl #
			dnl # 4.7 API change,
			dnl # The xattr_handler->set() callback was changed to take both
			dnl # dentry and inode.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING([whether xattr_handler->set() wants dentry and inode])
			ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry_inode], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_SET_DENTRY_INODE, 1,
				    [xattr_handler->set() wants both dentry and inode])
			],[
				dnl #
				dnl # 4.4 API change,
				dnl # The xattr_handler->set() callback was changed to take a
				dnl # xattr_handler, and handler_flags argument was removed and
				dnl # should be accessed by handler->flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->set() wants xattr_handler])
				ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				],[
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry_inode], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_SET_DENTRY_INODE, 1,
				    [xattr_handler->set() wants both dentry and inode])
			], [
				dnl #
				dnl # 4.4 API change,
				dnl # The xattr_handler->set() callback was changed to take a
				dnl # xattr_handler, and handler_flags argument was removed and
				dnl # should be accessed by handler->flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->set() wants xattr_handler])
				ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				],[
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_DENTRY_INODE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				], [
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_HANDLER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					], [
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([xattr set()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR_HANDLER_LIST
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_list_simple], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_LIST_SIMPLE, 1,
		    [xattr_handler->list() wants simple])
	], [
		dnl #
		dnl # 4.4 API change,
		dnl # The xattr_handler->list() callback was changed to take a
		dnl # xattr_handler, and handler_flags argument was removed
		dnl # and should be accessed by handler->flags.
		dnl #
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(
		    [whether xattr_handler->list() wants xattr_handler])
		ZFS_LINUX_TEST_RESULT([xattr_handler_list_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_LIST_HANDLER, 1,
			    [xattr_handler->list() wants xattr_handler])
		],[
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->list() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->list() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_list_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_LIST_DENTRY, 1,
				    [xattr_handler->list() wants dentry])
			],[
				ZFS_LINUX_TEST_ERROR([xattr list()])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_LIST_SIMPLE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_list_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_LIST_HANDLER, 1,
			    [xattr_handler->list() wants xattr_handler])
		], [
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->list() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->list() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_list_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_LIST_DENTRY, 1,
				    [xattr_handler->list() wants dentry])
			],[
				ZFS_LINUX_TEST_ERROR([xattr list()])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_LIST_HANDLER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_list_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_LIST_DENTRY, 1,
				    [xattr_handler->list() wants dentry])
			], [
				ZFS_LINUX_TEST_ERROR([xattr list()])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_LIST_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([xattr list()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_FROM_XATTR_USERNS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_from_xattr_userns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_FROM_XATTR_USERNS, 1,
		    [posix_acl_from_xattr() needs user_ns])
	], [
		ZFS_LINUX_TEST_ERROR([posix_acl_from_xattr()])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_FROM_XATTR_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([posix_acl_from_xattr()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_SETXATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([have_generic_setxattr], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_SETXATTR, 1,
		    [generic_setxattr() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_SETXATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ACL
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_RELEASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_release], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_RELEASE, 1,
		    [posix_acl_release() is available])

		AC_MSG_CHECKING([whether posix_acl_release() is GPL-only])
		ZFS_LINUX_TEST_RESULT([posix_acl_release_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_RELEASE_GPL_ONLY, 1,
			    [posix_acl_release() is GPL-only])
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_RELEASE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_release_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_RELEASE_GPL_ONLY, 1,
			    [posix_acl_release() is GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_RELEASE_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SET_CACHED_ACL_USABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([set_cached_acl_license], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_CACHED_ACL_USABLE, 1,
		    [set_cached_acl() is usable])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_CACHED_ACL_USABLE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_CHMOD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([__posix_acl_chmod], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE___POSIX_ACL_CHMOD, 1,
		    [__posix_acl_chmod() exists])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether posix_acl_chmod exists])
		ZFS_LINUX_TEST_RESULT([posix_acl_chmod], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_CHMOD, 1,
			    [posix_acl_chmod() exists])
		],[
			ZFS_LINUX_TEST_ERROR([posix_acl_chmod()])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE___POSIX_ACL_CHMOD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_chmod], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_CHMOD, 1,
			    [posix_acl_chmod() exists])
		], [
			ZFS_LINUX_TEST_ERROR([posix_acl_chmod()])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_CHMOD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([posix_acl_chmod()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_EQUIV_MODE_WANTS_UMODE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_equiv_mode], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([posix_acl_equiv_mode()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([posix_acl_equiv_mode()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_VALID_WITH_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_valid_with_ns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_VALID_WITH_NS, 1,
		    [posix_acl_valid() wants user namespace])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_VALID_WITH_NS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_OPERATIONS_GET_ACL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_acl], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GET_ACL, 1, [iops->get_acl() exists])
	], [
		ZFS_LINUX_TEST_RESULT([inode_operations_get_acl_rcu], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_ACL_RCU, 1, [iops->get_acl() takes rcu])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_get_inode_acl], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_GET_INODE_ACL, 1, [has iops->get_inode_acl()])
			],[
				ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_ACL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_acl_rcu], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_ACL_RCU, 1, [iops->get_acl() takes rcu])
		], [
			ZFS_LINUX_TEST_RESULT([inode_operations_get_inode_acl], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_GET_INODE_ACL, 1, [has iops->get_inode_acl()])
			],[
				ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_ACL_RCU$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_inode_acl], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_GET_INODE_ACL, 1, [has iops->get_inode_acl()])
			], [
				ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_INODE_ACL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_OPERATIONS_SET_ACL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
		AC_DEFINE(HAVE_SET_ACL_USERNS, 1, [iops->set_acl() takes 4 args])
	], [
		ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_mnt_idmap_dentry], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
			AC_DEFINE(HAVE_SET_ACL_IDMAP_DENTRY, 1,
			    [iops->set_acl() takes 4 args, arg1 is struct mnt_idmap *])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
				AC_DEFINE(HAVE_SET_ACL_USERNS_DENTRY_ARG2, 1,
				    [iops->set_acl() takes 4 args, arg2 is struct dentry *])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_mnt_idmap_dentry], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
			AC_DEFINE(HAVE_SET_ACL_IDMAP_DENTRY, 1,
			    [iops->set_acl() takes 4 args, arg1 is struct mnt_idmap *])
		], [
			ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
				AC_DEFINE(HAVE_SET_ACL_USERNS_DENTRY_ARG2, 1,
				    [iops->set_acl() takes 4 args, arg2 is struct dentry *])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL_IDMAP_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
				AC_DEFINE(HAVE_SET_ACL_USERNS_DENTRY_ARG2, 1,
				    [iops->set_acl() takes 4 args, arg2 is struct dentry *])
			], [
				ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL_USERNS_DENTRY_ARG2$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				], [
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
m4trace:configure.ac:60: -1- AS_VERSION_COMPARE_LE([3.14], [$kernsrcver], [
		AC_MSG_ERROR([
		*** None of the expected "i_op->set_acl()" interfaces were detected. This
		*** interface is expected for kernels version "3.14" and above.
		*** This may be because your kernel version is newer than what is
		*** supported, or you are using a patched custom kernel with
		*** incompatible modifications.  Newer kernels may have incompatible
		*** APIs.
		***
		*** ZFS Version: $ZFS_META_ALIAS
		*** Compatible Kernels: $ZFS_META_KVER_MIN - $ZFS_META_KVER_MAX
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GET_ACL_HANDLE_CACHE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([get_acl_handle_cache], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_GET_ACL_HANDLE_CACHE, 1,
		    [uncached_acl_sentinel() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_GET_ACL_HANDLE_CACHE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ACL_HAS_REFCOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([acl_refcount], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ACL_REFCOUNT, 1, [posix_acl has refcount_t])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ACL_REFCOUNT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_SETATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_setattr_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IDMAP_IOPS_SETATTR, 1,
		    [iops->setattr() takes struct mnt_idmap*])
	], [
		AC_MSG_RESULT(no)
		dnl #
		dnl # Kernel 5.12 test
		dnl #
		AC_MSG_CHECKING([whether iops->setattr() takes user_namespace])
		ZFS_LINUX_TEST_RESULT([inode_operations_setattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_SETATTR, 1,
			    [iops->setattr() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->setattr() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_setattr], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_IOPS_SETATTR, 1,
					[iops->setattr() exists])
			],[
				AC_MSG_RESULT(no)
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IDMAP_IOPS_SETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_setattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_SETATTR, 1,
			    [iops->setattr() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->setattr() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_setattr], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_IOPS_SETATTR, 1,
					[iops->setattr() exists])
			],[
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_USERNS_IOPS_SETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_setattr], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_IOPS_SETATTR, 1,
					[iops->setattr() exists])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_SETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_GETATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_getattr_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IDMAP_IOPS_GETATTR, 1,
		    [iops->getattr() takes struct mnt_idmap*])
	], [
		AC_MSG_RESULT(no)
		dnl #
		dnl # Kernel 5.12 test
		dnl #
		AC_MSG_CHECKING([whether iops->getattr() takes user_namespace])
		ZFS_LINUX_TEST_RESULT([inode_operations_getattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_GETATTR, 1,
			    [iops->getattr() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # Kernel 4.11 test
			dnl #
			AC_MSG_CHECKING([whether iops->getattr() takes a path])
			ZFS_LINUX_TEST_RESULT([inode_operations_getattr_path], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PATH_IOPS_GETATTR, 1,
					[iops->getattr() takes a path])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Kernel < 4.11 test
				dnl #
				AC_MSG_CHECKING([whether iops->getattr() takes a vfsmount])
				ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				],[
					AC_MSG_RESULT(no)
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IDMAP_IOPS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_getattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_GETATTR, 1,
			    [iops->getattr() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # Kernel 4.11 test
			dnl #
			AC_MSG_CHECKING([whether iops->getattr() takes a path])
			ZFS_LINUX_TEST_RESULT([inode_operations_getattr_path], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PATH_IOPS_GETATTR, 1,
					[iops->getattr() takes a path])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Kernel < 4.11 test
				dnl #
				AC_MSG_CHECKING([whether iops->getattr() takes a vfsmount])
				ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				],[
					AC_MSG_RESULT(no)
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_USERNS_IOPS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_getattr_path], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PATH_IOPS_GETATTR, 1,
					[iops->getattr() takes a path])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # Kernel < 4.11 test
				dnl #
				AC_MSG_CHECKING([whether iops->getattr() takes a vfsmount])
				ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				],[
					AC_MSG_RESULT(no)
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PATH_IOPS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				], [
					AC_MSG_RESULT(no)
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFSMOUNT_IOPS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_SET_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_set_flags], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_SET_FLAGS, 1, [inode_set_flags() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_SET_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_SET_IVERSION
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_set_iversion], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_SET_IVERSION, 1,
		    [inode_set_iversion() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_SET_IVERSION$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHOW_OPTIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([super_operations_show_options], [
		AC_MSG_RESULT([yes])
	], [
		ZFS_LINUX_TEST_ERROR([sops->show_options()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([sops->show_options()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FILE_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_INODE, 1, [file_inode() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILE_INODE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FILE_DENTRY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_dentry], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_DENTRY, 1, [file_dentry() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILE_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FSYNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([fsync_without_dentry], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_FSYNC_WITHOUT_DENTRY, 1,
		    [fops->fsync() without dentry])
	], [
		AC_MSG_RESULT([no])

		dnl #
		dnl # Linux 3.1 - 3.x API
		dnl #
		AC_MSG_CHECKING([whether fops->fsync() wants range])
		ZFS_LINUX_TEST_RESULT([fsync_range], [
			AC_MSG_RESULT([range])
			AC_DEFINE(HAVE_FSYNC_RANGE, 1,
			    [fops->fsync() with range])
		],[
			ZFS_LINUX_TEST_ERROR([fops->fsync])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FSYNC_WITHOUT_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([fsync_range], [
			AC_MSG_RESULT([range])
			AC_DEFINE(HAVE_FSYNC_RANGE, 1,
			    [fops->fsync() with range])
		], [
			ZFS_LINUX_TEST_ERROR([fops->fsync])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FSYNC_RANGE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([fops->fsync])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_AIO_FSYNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([aio_fsync], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_AIO_FSYNC, 1, [fops->aio_fsync() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILE_AIO_FSYNC$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_EVICT_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([evict_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_EVICT_INODE, 1, [sops->evict_inode() exists])
	], [
		ZFS_LINUX_TEST_ERROR([evict_inode])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_EVICT_INODE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([evict_inode])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DIRTY_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dirty_inode_with_flags], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_DIRTY_INODE_WITH_FLAGS, 1,
		    [sops->dirty_inode() wants flags])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DIRTY_INODE_WITH_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHRINKER
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SUPER_BLOCK_S_SHRINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([super_block_s_shrink], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([sb->s_shrink()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([sb->s_shrink()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHRINK_CONTROL_HAS_NID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([shrink_control_nid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SHRINK_CONTROL_HAS_NID, 1,
		    [struct shrink_control has nid])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SHRINK_CONTROL_HAS_NID$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHRINKER_CALLBACK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([register_shrinker_vararg], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REGISTER_SHRINKER_VARARG, 1,
		    [register_shrinker is vararg])

		dnl # We assume that the split shrinker callback exists if the
		dnl # vararg register_shrinker() exists, because the latter is
		dnl # a much more recent addition, and the macro test for the
		dnl # var-arg version only works if the callback is split
		AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
			[cs->count_objects exists])
	], [
		AC_MSG_RESULT(no)
		dnl #
		dnl # 3.0 - 3.11 API change
		dnl # cs->shrink(struct shrinker *, struct shrink_control *sc)
		dnl #
		AC_MSG_CHECKING([whether new 2-argument shrinker exists])
		ZFS_LINUX_TEST_RESULT([shrinker_cb_shrink_control], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SINGLE_SHRINKER_CALLBACK, 1,
				[new shrinker callback wants 2 args])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 3.12 API change,
			dnl # cs->shrink() is logically split in to
			dnl # cs->count_objects() and cs->scan_objects()
			dnl #
			AC_MSG_CHECKING([if cs->count_objects callback exists])
			ZFS_LINUX_TEST_RESULT(
				[shrinker_cb_shrink_control_split],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
						[cs->count_objects exists])
			],[
					ZFS_LINUX_TEST_ERROR([shrinker])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REGISTER_SHRINKER_VARARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SPLIT_SHRINKER_CALLBACK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([shrinker_cb_shrink_control], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SINGLE_SHRINKER_CALLBACK, 1,
				[new shrinker callback wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 3.12 API change,
			dnl # cs->shrink() is logically split in to
			dnl # cs->count_objects() and cs->scan_objects()
			dnl #
			AC_MSG_CHECKING([if cs->count_objects callback exists])
			ZFS_LINUX_TEST_RESULT(
				[shrinker_cb_shrink_control_split],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
						[cs->count_objects exists])
			],[
					ZFS_LINUX_TEST_ERROR([shrinker])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SINGLE_SHRINKER_CALLBACK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([shrinker_cb_shrink_control_split], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
						[cs->count_objects exists])
			], [
					ZFS_LINUX_TEST_ERROR([shrinker])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SPLIT_SHRINKER_CALLBACK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([shrinker])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHRINK_CONTROL_STRUCT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([shrink_control_struct], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SHRINK_CONTROL_STRUCT, 1,
		    [struct shrink_control exists])
	], [
		ZFS_LINUX_TEST_ERROR([shrink_control])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SHRINK_CONTROL_STRUCT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([shrink_control])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_MKDIR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([mkdir_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_MKDIR_IDMAP, 1,
		    [iops->mkdir() takes struct mnt_idmap*])
	], [
		dnl #
		dnl # 5.12 API change
		dnl # The struct user_namespace arg was added as the first argument to
		dnl # mkdir() of the iops structure.
		dnl #
		AC_MSG_CHECKING([whether iops->mkdir() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([mkdir_user_namespace], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKDIR_USERNS, 1,
			    [iops->mkdir() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->mkdir() takes umode_t])
			ZFS_LINUX_TEST_RESULT([inode_operations_mkdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MKDIR_UMODE_T, 1,
				    [iops->mkdir() takes umode_t])
			],[
				ZFS_LINUX_TEST_ERROR([mkdir()])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_MKDIR_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([mkdir_user_namespace], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKDIR_USERNS, 1,
			    [iops->mkdir() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->mkdir() takes umode_t])
			ZFS_LINUX_TEST_RESULT([inode_operations_mkdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MKDIR_UMODE_T, 1,
				    [iops->mkdir() takes umode_t])
			],[
				ZFS_LINUX_TEST_ERROR([mkdir()])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_MKDIR_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_mkdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MKDIR_UMODE_T, 1,
				    [iops->mkdir() takes umode_t])
			], [
				ZFS_LINUX_TEST_ERROR([mkdir()])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MKDIR_UMODE_T$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([mkdir()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_LOOKUP_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([lookup_flags], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([iops->lookup()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([iops->lookup()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CREATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([create_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_CREATE_IDMAP, 1,
		   [iops->create() takes struct mnt_idmap*])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether iops->create() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([create_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_CREATE_USERNS, 1,
			   [iops->create() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->create() passes flags])
			ZFS_LINUX_TEST_RESULT([create_flags], [
				AC_MSG_RESULT(yes)
			],[
				ZFS_LINUX_TEST_ERROR([iops->create()])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_CREATE_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([create_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_CREATE_USERNS, 1,
			   [iops->create() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->create() passes flags])
			ZFS_LINUX_TEST_RESULT([create_flags], [
				AC_MSG_RESULT(yes)
			],[
				ZFS_LINUX_TEST_ERROR([iops->create()])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_CREATE_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([create_flags], [
				AC_MSG_RESULT(yes)
			], [
				ZFS_LINUX_TEST_ERROR([iops->create()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([iops->create()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERMISSION
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([permission_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_PERMISSION_IDMAP, 1,
		   [iops->permission() takes struct mnt_idmap*])
	], [
		AC_MSG_CHECKING([whether iops->permission() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([permission_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_PERMISSION_USERNS, 1,
			   [iops->permission() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_PERMISSION_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([permission_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_PERMISSION_USERNS, 1,
			   [iops->permission() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_PERMISSION_USERNS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GET_LINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_link], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GET_LINK_DELAYED, 1, [iops->get_link() delayed])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 4.5 API change
		dnl # The follow_link() interface has been replaced by
		dnl # get_link() which behaves the same as before except:
		dnl # - An inode is passed as a separate argument
		dnl # - When called in RCU mode a NULL dentry is passed.
		dnl #
		AC_MSG_CHECKING([whether iops->get_link() passes cookie])
		ZFS_LINUX_TEST_RESULT([inode_operations_get_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_LINK_COOKIE, 1,
			    [iops->get_link() cookie])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 4.2 API change
			dnl # This kernel retired the nameidata structure.
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->follow_link() passes cookie])
			ZFS_LINUX_TEST_RESULT([inode_operations_follow_link], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_FOLLOW_LINK_COOKIE, 1,
				    [iops->follow_link() cookie])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # 2.6.32 API
				dnl #
				AC_MSG_CHECKING(
				[whether iops->follow_link() passes nameidata])
				ZFS_LINUX_TEST_RESULT(
				    [inode_operations_follow_link_nameidata],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				],[
					ZFS_LINUX_TEST_ERROR([get_link])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_LINK_DELAYED$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_LINK_COOKIE, 1,
			    [iops->get_link() cookie])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 4.2 API change
			dnl # This kernel retired the nameidata structure.
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->follow_link() passes cookie])
			ZFS_LINUX_TEST_RESULT([inode_operations_follow_link], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_FOLLOW_LINK_COOKIE, 1,
				    [iops->follow_link() cookie])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # 2.6.32 API
				dnl #
				AC_MSG_CHECKING(
				[whether iops->follow_link() passes nameidata])
				ZFS_LINUX_TEST_RESULT(
				    [inode_operations_follow_link_nameidata],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				],[
					ZFS_LINUX_TEST_ERROR([get_link])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_LINK_COOKIE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_follow_link], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_FOLLOW_LINK_COOKIE, 1,
				    [iops->follow_link() cookie])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 2.6.32 API
				dnl #
				AC_MSG_CHECKING(
				[whether iops->follow_link() passes nameidata])
				ZFS_LINUX_TEST_RESULT(
				    [inode_operations_follow_link_nameidata],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				],[
					ZFS_LINUX_TEST_ERROR([get_link])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FOLLOW_LINK_COOKIE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_follow_link_nameidata], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				], [
					ZFS_LINUX_TEST_ERROR([get_link])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FOLLOW_LINK_NAMEIDATA$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([get_link])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PUT_LINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_link], [
		AC_DEFINE(HAVE_PUT_LINK_DELAYED, 1, [iops->put_link() delayed])
	], [
		dnl #
		dnl # 4.2 API change
		dnl # This kernel retired the nameidata structure.
		dnl #
		AC_MSG_CHECKING([whether iops->put_link() passes cookie])
		ZFS_LINUX_TEST_RESULT([put_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_PUT_LINK_COOKIE, 1,
			    [iops->put_link() cookie])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.32 API
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->put_link() passes nameidata])
			ZFS_LINUX_TEST_RESULT([put_link_nameidata], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PUT_LINK_NAMEIDATA, 1,
				    [iops->put_link() nameidata])
			],[
				ZFS_LINUX_TEST_ERROR([put_link])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PUT_LINK_DELAYED$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([put_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_PUT_LINK_COOKIE, 1,
			    [iops->put_link() cookie])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.32 API
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->put_link() passes nameidata])
			ZFS_LINUX_TEST_RESULT([put_link_nameidata], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PUT_LINK_NAMEIDATA, 1,
				    [iops->put_link() nameidata])
			],[
				ZFS_LINUX_TEST_ERROR([put_link])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PUT_LINK_COOKIE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([put_link_nameidata], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PUT_LINK_NAMEIDATA, 1,
				    [iops->put_link() nameidata])
			], [
				ZFS_LINUX_TEST_ERROR([put_link])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PUT_LINK_NAMEIDATA$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([put_link])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TMPFILE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
		AC_DEFINE(HAVE_TMPFILE_IDMAP, 1, [i_op->tmpfile() has mnt_idmap])
	], [
		ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
			AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry_userns], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
				AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
				AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
			AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
		], [
			ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry_userns], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
				AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
				AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry_userns], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
				AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
				AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
			], [
				ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				], [
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
m4trace:configure.ac:60: -1- AS_VERSION_COMPARE_LE([3.11], [$kernsrcver], [
		AC_MSG_ERROR([
		*** None of the expected "i_op->tmpfile()" interfaces were detected. This
		*** interface is expected for kernels version "3.11" and above.
		*** This may be because your kernel version is newer than what is
		*** supported, or you are using a patched custom kernel with
		*** incompatible modifications.  Newer kernels may have incompatible
		*** APIs.
		***
		*** ZFS Version: $ZFS_META_ALIAS
		*** Compatible Kernels: $ZFS_META_KVER_MIN - $ZFS_META_KVER_MAX
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_AUTOMOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dentry_operations_d_automount], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([dops->d_automount()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([dops->d_automount()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENCODE_FH_WITH_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([export_operations_encode_fh], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ENCODE_FH_WITH_INODE, 1,
		    [eops->encode_fh() wants child and parent inodes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ENCODE_FH_WITH_INODE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_COMMIT_METADATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([export_operations_commit_metadata], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([eops->commit_metadata()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([eops->commit_metadata()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CLEAR_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([clear_inode], [clear_inode], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CLEAR_INODE, 1, [clear_inode() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([clear_inode], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CLEAR_INODE, 1, [clear_inode() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CLEAR_INODE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CLEAR_INODE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CLEAR_INODE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SETATTR_PREPARE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_mnt_idmap], [setattr_prepare], [fs/attr.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SETATTR_PREPARE_IDMAP, 1,
		    [setattr_prepare() accepts mnt_idmap])
	], [
		AC_MSG_CHECKING([whether setattr_prepare() is available and accepts struct user_namespace*])
		ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns],
		    [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns], [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare], [setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare], [setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SETATTR_PREPARE_IDMAP, 1,
		    [setattr_prepare() accepts mnt_idmap])
	], [
		AC_MSG_CHECKING([whether setattr_prepare() is available and accepts struct user_namespace*])
		ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns],
		    [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns], [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare], [setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare], [setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_IDMAP$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_IDMAP$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INSERT_INODE_LOCKED
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([insert_inode_locked], [insert_inode_locked], [fs/inode.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([insert_inode_locked], [fs/inode.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DENTRY
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_MAKE_ROOT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([d_make_root], [d_make_root], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_MAKE_ROOT, 1, [d_make_root() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([d_make_root], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_MAKE_ROOT, 1, [d_make_root() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_MAKE_ROOT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_MAKE_ROOT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_MAKE_ROOT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_OBTAIN_ALIAS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([d_obtain_alias], [d_obtain_alias], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([d_obtain_alias], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_PRUNE_ALIASES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([d_prune_aliases], [d_prune_aliases], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_PRUNE_ALIASES, 1,
		    [d_prune_aliases() is available])
	], [
		ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([d_prune_aliases], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_PRUNE_ALIASES, 1,
		    [d_prune_aliases() is available])
	], [
		ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_PRUNE_ALIASES$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_PRUNE_ALIASES$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_PRUNE_ALIASES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_SET_D_OP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([d_set_d_op], [d_set_d_op], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_set_d_op])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_set_d_op])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([d_set_d_op], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_set_d_op])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_set_d_op])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_REVALIDATE_NAMEIDATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dentry_operations_revalidate], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_REVALIDATE_NAMEIDATA, 1,
		    [dops->d_revalidate() operation takes nameidata])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_REVALIDATE_NAMEIDATA$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONST_DENTRY_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dentry_operations_const], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CONST_DENTRY_OPERATIONS, 1,
		    [dentry uses const struct dentry_operations])
	], [
		ZFS_LINUX_TEST_ERROR([const dentry_operations])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CONST_DENTRY_OPERATIONS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([const dentry_operations])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_S_D_OP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([super_block_s_d_op], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([super_block s_d_op])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([super_block s_d_op])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DENTRY_ALIAS_D_U
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dentry_alias_d_u], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DENTRY_D_U_ALIASES, 1,
		    [dentry aliases are in d_u member])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DENTRY_D_U_ALIASES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TRUNCATE_SETSIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([truncate_setsize], [truncate_setsize], [mm/truncate.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([truncate_setsize])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([truncate_setsize])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([truncate_setsize], [mm/truncate.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([truncate_setsize])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([truncate_setsize])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SECURITY_INODE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SECURITY_INODE_INIT_SECURITY_CALLBACK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([security_inode_init_security], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([security_inode_init_security callback])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([security_inode_init_security callback])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FST_MOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_system_type_mount], [
                AC_MSG_RESULT(yes)
        ], [
		ZFS_LINUX_TEST_ERROR([fst->mount()])
        ])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([fst->mount()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BDI
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([super_setup_bdi_name], [super_setup_bdi_name], [fs/super.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SUPER_SETUP_BDI_NAME, 1,
                    [super_setup_bdi_name() exits])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 4.0 - 4.11, bdi_setup_and_register() takes 2 arguments.
		dnl #
		AC_MSG_CHECKING(
		    [whether bdi_setup_and_register() wants 2 args])
		ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register],
		    [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register], [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register_3args], [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register_3args], [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([super_setup_bdi_name], [fs/super.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SUPER_SETUP_BDI_NAME, 1,
                    [super_setup_bdi_name() exits])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 4.0 - 4.11, bdi_setup_and_register() takes 2 arguments.
		dnl #
		AC_MSG_CHECKING(
		    [whether bdi_setup_and_register() wants 2 args])
		ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register],
		    [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register], [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register_3args], [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register_3args], [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUPER_SETUP_BDI_NAME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUPER_SETUP_BDI_NAME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUPER_SETUP_BDI_NAME$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SET_NLINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([set_nlink], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([set_nlink()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([set_nlink()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SGET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([sget_5args], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([sget()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([sget()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_LSEEK_EXECUTE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lseek_execute], [lseek_exclusive], [fs/read_write.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_LSEEK_EXECUTE, 1, [lseek_execute() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lseek_exclusive], [fs/read_write.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_LSEEK_EXECUTE, 1, [lseek_execute() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LSEEK_EXECUTE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LSEEK_EXECUTE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LSEEK_EXECUTE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_FILEMAP_DIRTY_FOLIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_has_filemap_dirty_folio], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_FILEMAP_DIRTY_FOLIO, 1,
			[filemap_dirty_folio exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_FILEMAP_DIRTY_FOLIO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_READ_FOLIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_has_read_folio], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_READ_FOLIO, 1, [read_folio exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_READ_FOLIO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GETATTR
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GETATTR_4ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_getattr_4args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_4ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 4 args])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_4ARGS_VFS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GETATTR_2ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_getattr_2args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_2ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 2 args])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_VFS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GETATTR_3ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_getattr_3args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_3ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 3 args])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_VFS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_FSYNC_2ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_fsync_2args], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([vfs_fsync()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([vfs_fsync()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_ITERATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_operations_iterate_shared], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VFS_ITERATE_SHARED, 1,
		    [fops->iterate_shared() is available])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 3.11 API change
		dnl #
		dnl # RHEL 7.5 compatibility; the fops.iterate() method was
		dnl # added to the file_operations structure but in order to
		dnl # maintain KABI compatibility all callers must set
		dnl # FMODE_KABI_ITERATE which is checked in iterate_dir().
		dnl # When detected ignore this interface and fallback to
		dnl # to using fops.readdir() to retain KABI compatibility.
		dnl #
		AC_MSG_CHECKING([whether fops->iterate() is available])
		ZFS_LINUX_TEST_RESULT([file_operations_iterate], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_VFS_ITERATE, 1,
			    [fops->iterate() is available])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # readdir interface introduced
			dnl #
			AC_MSG_CHECKING([whether fops->readdir() is available])
			ZFS_LINUX_TEST_RESULT([file_operations_readdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_VFS_READDIR, 1,
				    [fops->readdir() is available])
			],[
				ZFS_LINUX_TEST_ERROR([vfs_iterate])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_ITERATE_SHARED$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_operations_iterate], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_VFS_ITERATE, 1,
			    [fops->iterate() is available])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # readdir interface introduced
			dnl #
			AC_MSG_CHECKING([whether fops->readdir() is available])
			ZFS_LINUX_TEST_RESULT([file_operations_readdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_VFS_READDIR, 1,
				    [fops->readdir() is available])
			],[
				ZFS_LINUX_TEST_ERROR([vfs_iterate])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_ITERATE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_operations_readdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_VFS_READDIR, 1,
				    [fops->readdir() is available])
			], [
				ZFS_LINUX_TEST_ERROR([vfs_iterate])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_READDIR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([vfs_iterate])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_DIRECT_IO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([direct_io_iter], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER, 1,
		    [aops->direct_IO() uses iov_iter without rw])
	], [
		AC_MSG_RESULT([no])

		dnl #
		dnl # Linux 4.1.x API change
		dnl #
		AC_MSG_CHECKING(
		    [whether aops->direct_IO() uses offset])
		ZFS_LINUX_TEST_RESULT([direct_io_iter_offset], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_OFFSET, 1,
			    [aops->direct_IO() uses iov_iter with offset])

		],[
			AC_MSG_RESULT([no])

			dnl #
			dnl # Linux 3.16.x API change
			dnl #
			AC_MSG_CHECKING(
			    [whether aops->direct_IO() uses rw and offset])
			ZFS_LINUX_TEST_RESULT([direct_io_iter_rw_offset], [
				AC_MSG_RESULT([yes])
				AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET, 1,
				    [aops->direct_IO() uses iov_iter with ]
				    [rw and offset])
			],[
				AC_MSG_RESULT([no])

				dnl #
				dnl # Ancient Linux API (predates git)
				dnl #
				AC_MSG_CHECKING(
				    [whether aops->direct_IO() uses iovec])
				ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				],[
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_DIRECT_IO_ITER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([direct_io_iter_offset], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_OFFSET, 1,
			    [aops->direct_IO() uses iov_iter with offset])

		], [
			AC_MSG_RESULT([no])

			dnl #
			dnl # Linux 3.16.x API change
			dnl #
			AC_MSG_CHECKING(
			    [whether aops->direct_IO() uses rw and offset])
			ZFS_LINUX_TEST_RESULT([direct_io_iter_rw_offset], [
				AC_MSG_RESULT([yes])
				AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET, 1,
				    [aops->direct_IO() uses iov_iter with ]
				    [rw and offset])
			],[
				AC_MSG_RESULT([no])

				dnl #
				dnl # Ancient Linux API (predates git)
				dnl #
				AC_MSG_CHECKING(
				    [whether aops->direct_IO() uses iovec])
				ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				],[
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_DIRECT_IO_ITER_OFFSET$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([direct_io_iter_rw_offset], [
				AC_MSG_RESULT([yes])
				AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET, 1,
				    [aops->direct_IO() uses iov_iter with ]
				    [rw and offset])
			], [
				AC_MSG_RESULT([no])

				dnl #
				dnl # Ancient Linux API (predates git)
				dnl #
				AC_MSG_CHECKING(
				    [whether aops->direct_IO() uses iovec])
				ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				],[
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				], [
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_DIRECT_IO_IOVEC$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([direct IO])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_READPAGES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_has_readpages], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_READPAGES, 1,
			[address_space_operations->readpages exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_READPAGES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_SET_PAGE_DIRTY_NOBUFFERS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_has_set_page_dirty_nobuffers], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_SET_PAGE_DIRTY_NOBUFFERS, 1,
			[__set_page_dirty_nobuffers exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_SET_PAGE_DIRTY_NOBUFFERS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_RW_ITERATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_operations_rw], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VFS_RW_ITERATE, 1,
		    [fops->read/write_iter() are available])

		dnl #
		dnl # Linux 4.1 API
		dnl #
		AC_MSG_CHECKING([whether new_sync_read/write() are available])
		ZFS_LINUX_TEST_RESULT([new_sync_rw], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_NEW_SYNC_READ, 1,
			    [new_sync_read()/new_sync_write() are available])
		],[
			AC_MSG_RESULT(no)
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_RW_ITERATE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([new_sync_rw], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_NEW_SYNC_READ, 1,
			    [new_sync_read()/new_sync_write() are available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_NEW_SYNC_READ$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GENERIC_WRITE_CHECKS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([generic_write_checks], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_WRITE_CHECKS_KIOCB, 1,
		    [generic_write_checks() takes kiocb])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_WRITE_CHECKS_KIOCB$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_IOV_ITER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_types], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_TYPES, 1,
		    [iov_iter types are available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_TYPES$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_advance], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_ADVANCE, 1,
		    [iov_iter_advance() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_ADVANCE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_revert], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_REVERT, 1,
		    [iov_iter_revert() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_REVERT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_fault_in_readable], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_FAULT_IN_READABLE, 1,
		    [iov_iter_fault_in_readable() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether fault_in_iov_iter_readable() is available])
		ZFS_LINUX_TEST_RESULT([fault_in_iov_iter_readable], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FAULT_IN_IOV_ITER_READABLE, 1,
			    [fault_in_iov_iter_readable() is available])
		],[
			AC_MSG_RESULT(no)
			enable_vfs_iov_iter="no"
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_FAULT_IN_READABLE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([fault_in_iov_iter_readable], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FAULT_IN_IOV_ITER_READABLE, 1,
			    [fault_in_iov_iter_readable() is available])
		], [
			AC_MSG_RESULT(no)
			enable_vfs_iov_iter="no"
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FAULT_IN_IOV_ITER_READABLE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_count], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_COUNT, 1,
		    [iov_iter_count() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_COUNT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([copy_to_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_COPY_TO_ITER, 1,
		    [copy_to_iter() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_COPY_TO_ITER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([copy_from_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_COPY_FROM_ITER, 1,
		    [copy_from_iter() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_COPY_FROM_ITER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_type], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_TYPE, 1,
		    [iov_iter_type() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_TYPE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_IOV_ITER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KMAP_ATOMIC_ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kmap_atomic], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([kmap_atomic()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([kmap_atomic()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FOLLOW_DOWN_ONE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([follow_down_one], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([follow_down_one()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([follow_down_one()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_MAKE_REQUEST_FN
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([block_device_operations_submit_bio], [
		AC_MSG_RESULT(yes)

		AC_DEFINE(HAVE_SUBMIT_BIO_IN_BLOCK_DEVICE_OPERATIONS, 1,
		    [submit_bio is member of struct block_device_operations])

		dnl #
		dnl # Linux 5.14 API Change:
		dnl # blk_alloc_queue() + alloc_disk() combo replaced by
		dnl # a single call to blk_alloc_disk().
		dnl #
		AC_MSG_CHECKING([whether blk_alloc_disk() exists])
		ZFS_LINUX_TEST_RESULT([blk_alloc_disk], [
			AC_MSG_RESULT(yes)
			AC_DEFINE([HAVE_BLK_ALLOC_DISK], 1, [blk_alloc_disk() exists])

			dnl #
			dnl # 5.20 API change,
			dnl # Removed blk_cleanup_disk(), put_disk() should be used.
			dnl #
			AC_MSG_CHECKING([whether blk_cleanup_disk() exists])
			ZFS_LINUX_TEST_RESULT([blk_cleanup_disk], [
				AC_MSG_RESULT(yes)
				AC_DEFINE([HAVE_BLK_CLEANUP_DISK], 1,
				    [blk_cleanup_disk() exists])
			], [
				AC_MSG_RESULT(no)
			])
		], [
			AC_MSG_RESULT(no)
		])
	], [
		AC_MSG_RESULT(no)

		dnl # Checked as part of the blk_alloc_queue_request_fn test
		dnl #
		dnl # Linux 5.7 API Change
		dnl # blk_alloc_queue() expects request function.
		dnl #
		AC_MSG_CHECKING([whether blk_alloc_queue() expects request function])
		ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn], [
			AC_MSG_RESULT(yes)

			dnl # This is currently always the case.
			AC_MSG_CHECKING([whether make_request_fn() returns blk_qc_t])
			AC_MSG_RESULT(yes)

			AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN, 1,
			    [blk_alloc_queue() expects request function])
			AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
			    [make_request_fn() return type])
			AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
			    [Noting that make_request_fn() returns blk_qc_t])
		],[
			dnl #
			dnl # CentOS Stream 4.18.0-257 API Change
			dnl # The Linux 5.7 blk_alloc_queue() change was back-
			dnl # ported and the symbol renamed blk_alloc_queue_rh().
			dnl # As of this kernel version they're not providing
			dnl # any compatibility code in the kernel for this.
			dnl #
			ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn_rh], [
				AC_MSG_RESULT(yes)

				dnl # This is currently always the case.
				AC_MSG_CHECKING([whether make_request_fn_rh() returns blk_qc_t])
				AC_MSG_RESULT(yes)

				AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH, 1,
				    [blk_alloc_queue_rh() expects request function])
				AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
				    [make_request_fn() return type])
				AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
				    [Noting that make_request_fn() returns blk_qc_t])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Linux 3.2 API Change
				dnl # make_request_fn returns void.
				dnl #
				AC_MSG_CHECKING(
				    [whether make_request_fn() returns void])
				ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				],[
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUBMIT_BIO_IN_BLOCK_DEVICE_OPERATIONS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_alloc_disk], [
			AC_MSG_RESULT(yes)
			AC_DEFINE([HAVE_BLK_ALLOC_DISK], 1, [blk_alloc_disk() exists])

			dnl #
			dnl # 5.20 API change,
			dnl # Removed blk_cleanup_disk(), put_disk() should be used.
			dnl #
			AC_MSG_CHECKING([whether blk_cleanup_disk() exists])
			ZFS_LINUX_TEST_RESULT([blk_cleanup_disk], [
				AC_MSG_RESULT(yes)
				AC_DEFINE([HAVE_BLK_CLEANUP_DISK], 1,
				    [blk_cleanup_disk() exists])
			], [
				AC_MSG_RESULT(no)
			])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_ALLOC_DISK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_cleanup_disk], [
				AC_MSG_RESULT(yes)
				AC_DEFINE([HAVE_BLK_CLEANUP_DISK], 1,
				    [blk_cleanup_disk() exists])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_CLEANUP_DISK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn], [
			AC_MSG_RESULT(yes)

			dnl # This is currently always the case.
			AC_MSG_CHECKING([whether make_request_fn() returns blk_qc_t])
			AC_MSG_RESULT(yes)

			AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN, 1,
			    [blk_alloc_queue() expects request function])
			AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
			    [make_request_fn() return type])
			AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
			    [Noting that make_request_fn() returns blk_qc_t])
		], [
			dnl #
			dnl # CentOS Stream 4.18.0-257 API Change
			dnl # The Linux 5.7 blk_alloc_queue() change was back-
			dnl # ported and the symbol renamed blk_alloc_queue_rh().
			dnl # As of this kernel version they're not providing
			dnl # any compatibility code in the kernel for this.
			dnl #
			ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn_rh], [
				AC_MSG_RESULT(yes)

				dnl # This is currently always the case.
				AC_MSG_CHECKING([whether make_request_fn_rh() returns blk_qc_t])
				AC_MSG_RESULT(yes)

				AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH, 1,
				    [blk_alloc_queue_rh() expects request function])
				AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
				    [make_request_fn() return type])
				AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
				    [Noting that make_request_fn() returns blk_qc_t])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Linux 3.2 API Change
				dnl # make_request_fn returns void.
				dnl #
				AC_MSG_CHECKING(
				    [whether make_request_fn() returns void])
				ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				],[
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_ALLOC_QUEUE_REQUEST_FN$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKE_REQUEST_FN_RET$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKE_REQUEST_FN_RET_QC$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn_rh], [
				AC_MSG_RESULT(yes)

				dnl # This is currently always the case.
				AC_MSG_CHECKING([whether make_request_fn_rh() returns blk_qc_t])
				AC_MSG_RESULT(yes)

				AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH, 1,
				    [blk_alloc_queue_rh() expects request function])
				AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
				    [make_request_fn() return type])
				AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
				    [Noting that make_request_fn() returns blk_qc_t])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # Linux 3.2 API Change
				dnl # make_request_fn returns void.
				dnl #
				AC_MSG_CHECKING(
				    [whether make_request_fn() returns void])
				ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				],[
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKE_REQUEST_FN_RET$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKE_REQUEST_FN_RET_QC$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKE_REQUEST_FN_RET$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKE_REQUEST_FN_RET_VOID$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					], [
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKE_REQUEST_FN_RET$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKE_REQUEST_FN_RET_QC$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([make_request_fn])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_IO_ACCT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_io_acct_63], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_IO_ACCT_63, 1, [bdev_*_io_acct() available])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 5.19 API,
		dnl #
		dnl # disk_start_io_acct() and disk_end_io_acct() have been replaced by
		dnl # bdev_start_io_acct() and bdev_end_io_acct().
		dnl #
		AC_MSG_CHECKING([whether pre-6.3 bdev_*_io_acct() are available])
		ZFS_LINUX_TEST_RESULT([bdev_io_acct_old], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BDEV_IO_ACCT_OLD, 1, [bdev_*_io_acct() available])
		], [
			AC_MSG_RESULT(no)
			dnl #
			dnl # 5.12 API,
			dnl #
			dnl # bio_start_io_acct() and bio_end_io_acct() became GPL-exported
			dnl # so use disk_start_io_acct() and disk_end_io_acct() instead
			dnl #
			AC_MSG_CHECKING([whether generic disk_*_io_acct() are available])
			ZFS_LINUX_TEST_RESULT([disk_io_acct], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 5.7 API,
				dnl #
				dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
				dnl #
				AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
				ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_IO_ACCT_63$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_io_acct_old], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BDEV_IO_ACCT_OLD, 1, [bdev_*_io_acct() available])
		], [
			AC_MSG_RESULT(no)
			dnl #
			dnl # 5.12 API,
			dnl #
			dnl # bio_start_io_acct() and bio_end_io_acct() became GPL-exported
			dnl # so use disk_start_io_acct() and disk_end_io_acct() instead
			dnl #
			AC_MSG_CHECKING([whether generic disk_*_io_acct() are available])
			ZFS_LINUX_TEST_RESULT([disk_io_acct], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 5.7 API,
				dnl #
				dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
				dnl #
				AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
				ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_IO_ACCT_OLD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([disk_io_acct], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 5.7 API,
				dnl #
				dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
				dnl #
				AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
				ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DISK_IO_ACCT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_IO_ACCT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args], [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args], [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args], [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_4ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_4ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_4ARG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FPU
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kernel_fpu_license], [
		AC_MSG_RESULT(kernel_fpu_*)
		AC_DEFINE(HAVE_KERNEL_FPU, 1,
		    [kernel has kernel_fpu_* functions])
		AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
		    [kernel exports FPU functions])
	], [
		dnl #
		dnl # Linux 4.2 kernel
		dnl #
		ZFS_LINUX_TEST_RESULT_SYMBOL([__kernel_fpu_license],
		    [__kernel_fpu_begin],
		    [arch/x86/kernel/fpu/core.c arch/x86/kernel/i387.c], [
			AC_MSG_RESULT(__kernel_fpu_*)
			AC_DEFINE(HAVE_UNDERSCORE_KERNEL_FPU, 1,
			    [kernel has __kernel_fpu_* functions])
			AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
			    [kernel exports FPU functions])
		],[
			AC_MSG_RESULT(internal)
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL, 1,
			    [kernel fpu internal])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_EXPORTS_X86_FPU$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([__kernel_fpu_license], [__kernel_fpu_begin], [arch/x86/kernel/fpu/core.c arch/x86/kernel/i387.c], [
			AC_MSG_RESULT(__kernel_fpu_*)
			AC_DEFINE(HAVE_UNDERSCORE_KERNEL_FPU, 1,
			    [kernel has __kernel_fpu_* functions])
			AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
			    [kernel exports FPU functions])
		], [
			AC_MSG_RESULT(internal)
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL, 1,
			    [kernel fpu internal])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([__kernel_fpu_begin], [arch/x86/kernel/fpu/core.c arch/x86/kernel/i387.c], [
			AC_MSG_RESULT(__kernel_fpu_*)
			AC_DEFINE(HAVE_UNDERSCORE_KERNEL_FPU, 1,
			    [kernel has __kernel_fpu_* functions])
			AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
			    [kernel exports FPU functions])
		], [
			AC_MSG_RESULT(internal)
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL, 1,
			    [kernel fpu internal])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_UNDERSCORE_KERNEL_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_EXPORTS_X86_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_UNDERSCORE_KERNEL_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_EXPORTS_X86_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_UNDERSCORE_KERNEL_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_EXPORTS_X86_FPU$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FMODE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([type_fmode_t], [
		AC_MSG_RESULT([yes])
	], [
		ZFS_LINUX_TEST_ERROR([type_fmode_t])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([type_fmode_t])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KUIDGID_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kuidgid_t], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([kuid_t/kgid_t])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([kuid_t/kgid_t])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KUID_HELPERS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([i_uid_read], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([i_uid_read])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([i_uid_read])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RENAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_rename_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_RENAME_IDMAP, 1,
		    [iops->rename() takes struct mnt_idmap*])
	], [
		AC_MSG_CHECKING([whether iops->rename() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([inode_operations_rename_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_RENAME_USERNS, 1,
			    [iops->rename() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->rename2() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_rename2], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_RENAME2, 1, [iops->rename2() exists])
			],[
				AC_MSG_RESULT(no)

				AC_MSG_CHECKING([whether iops->rename() wants flags])
				ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				],[
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_RENAME_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_rename_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_RENAME_USERNS, 1,
			    [iops->rename() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->rename2() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_rename2], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_RENAME2, 1, [iops->rename2() exists])
			],[
				AC_MSG_RESULT(no)

				AC_MSG_CHECKING([whether iops->rename() wants flags])
				ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				],[
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_RENAME_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_rename2], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_RENAME2, 1, [iops->rename2() exists])
			], [
				AC_MSG_RESULT(no)

				AC_MSG_CHECKING([whether iops->rename() wants flags])
				ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				],[
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RENAME2$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				], [
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RENAME_WANTS_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					], [
						AC_MSG_RESULT(no)
					])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RENAME2_OPERATIONS_WRAPPER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CURRENT_TIME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([current_time], [current_time], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CURRENT_TIME, 1, [current_time() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([current_time], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CURRENT_TIME, 1, [current_time() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CURRENT_TIME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CURRENT_TIME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CURRENT_TIME$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_USERNS_CAPABILITIES
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_NS_CAPABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([ns_capable], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([ns_capable()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([ns_capable()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_HAS_CAPABILITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([has_capability], [has_capability], [kernel/capability.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_HAS_CAPABILITY, 1, [has_capability() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([has_capability], [kernel/capability.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_HAS_CAPABILITY, 1, [has_capability() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_HAS_CAPABILITY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_HAS_CAPABILITY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_HAS_CAPABILITY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CRED_USER_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([cred_user_ns], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([cred_t->user_ns()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([cred_t->user_ns()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KUID_HAS_MAPPING
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kuid_has_mapping], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([kuid_has_mapping()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([kuid_has_mapping()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_IN_COMPAT_SYSCALL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([in_compat_syscall], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IN_COMPAT_SYSCALL, 1,
		    [in_compat_syscall() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IN_COMPAT_SYSCALL$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTIME
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTIME_GET_COARSE_REAL_TS64
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([ktime_get_coarse_real_ts64], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KTIME_GET_COARSE_REAL_TS64, 1,
		    [ktime_get_coarse_real_ts64() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KTIME_GET_COARSE_REAL_TS64$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTIME_GET_RAW_TS64
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([ktime_get_raw_ts64], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KTIME_GET_RAW_TS64, 1,
		    [ktime_get_raw_ts64() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KTIME_GET_RAW_TS64$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TOTALRAM_PAGES_FUNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([totalram_pages], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TOTALRAM_PAGES_FUNC, 1,
		    [kernel has totalram_pages()])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TOTALRAM_PAGES_FUNC$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TOTALHIGH_PAGES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([totalhigh_pages], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TOTALHIGH_PAGES, 1, [totalhigh_pages() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TOTALHIGH_PAGES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KSTRTOUL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kstrtoul], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KSTRTOUL, 1, [kstrtoul() exists])
	], [
		ZFS_LINUX_TEST_ERROR([kstrtoul()])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KSTRTOUL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([kstrtoul()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERCPU
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERCPU_COUNTER_INIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([percpu_counter_init_with_gfp], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PERCPU_COUNTER_INIT_WITH_GFP, 1,
		    [percpu_counter_init() wants gfp_t])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PERCPU_COUNTER_INIT_WITH_GFP$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERCPU_COUNTER_ADD_BATCH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([percpu_counter_add_batch], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PERCPU_COUNTER_ADD_BATCH, 1,
		    [percpu_counter_add_batch() is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PERCPU_COUNTER_ADD_BATCH$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERCPU_REF_COUNT_IN_DATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([percpu_ref_count_in_data], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_PERCPU_REF_COUNT_IN_DATA, 1,
		    [count is located in percpu_ref.data])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_PERCPU_REF_COUNT_IN_DATA$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CPU_HOTPLUG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([cpu_hotplug], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CPU_HOTPLUG, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CPU_HOTPLUG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_FILLATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([generic_fillattr_mnt_idmap], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_GENERIC_FILLATTR_IDMAP, 1,
		    [generic_fillattr requires struct mnt_idmap*])
	], [
		AC_MSG_CHECKING([whether generic_fillattr requires struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([generic_fillattr_userns], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_GENERIC_FILLATTR_USERNS, 1,
			    [generic_fillattr requires struct user_namespace*])
		],[
			AC_MSG_RESULT([no])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FILLATTR_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([generic_fillattr_userns], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_GENERIC_FILLATTR_USERNS, 1,
			    [generic_fillattr requires struct user_namespace*])
		], [
			AC_MSG_RESULT([no])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FILLATTR_USERNS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_MKNOD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([mknod_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_MKNOD_IDMAP, 1,
		    [iops->mknod() takes struct mnt_idmap*])
	], [
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING([whether iops->mknod() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([mknod_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKNOD_USERNS, 1,
			    [iops->mknod() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_MKNOD_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([mknod_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKNOD_USERNS, 1,
			    [iops->mknod() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_MKNOD_USERNS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SYMLINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([symlink_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_SYMLINK_IDMAP, 1,
		    [iops->symlink() takes struct mnt_idmap*])
	], [
		AC_MSG_CHECKING([whether iops->symlink() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([symlink_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_SYMLINK_USERNS, 1,
			    [iops->symlink() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_SYMLINK_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([symlink_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_SYMLINK_USERNS, 1,
			    [iops->symlink() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_SYMLINK_USERNS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_MAX_SEGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_max_segs], [
		AC_MSG_RESULT(yes)

		AC_DEFINE([HAVE_BIO_MAX_SEGS], 1, [bio_max_segs() is implemented])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_MAX_SEGS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SIGNAL_STOP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([signal_stop], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SIGNAL_STOP, 1, [signal_stop() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SIGNAL_STOP$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SIGINFO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([siginfo], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SIGINFO, 1, [kernel_siginfo_t exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SIGINFO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SYSFS
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SYSFS_DEFAULT_GROUPS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([sysfs_default_groups], [
		AC_MSG_RESULT(yes)
		AC_DEFINE([HAVE_SYSFS_DEFAULT_GROUPS], 1, [struct kobj_type has default_groups])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SYSFS_DEFAULT_GROUPS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SET_SPECIAL_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([set_special_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_SPECIAL_STATE, 1, [set_special_state() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_SPECIAL_STATE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_STANDALONE_LINUX_STDARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([has_standalone_linux_stdarg], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_STANDALONE_LINUX_STDARG, 1,
			[standalone <linux/stdarg.h> exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_STANDALONE_LINUX_STDARG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PAGEMAP_FOLIO_WAIT_BIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([pagemap_has_folio_wait_bit], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_PAGEMAP_FOLIO_WAIT_BIT, 1,
			[folio_wait_bit() exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PAGEMAP_FOLIO_WAIT_BIT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ADD_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([add_disk_ret], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ADD_DISK_RET, 1,
		    [add_disk() returns int])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ADD_DISK_RET$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTHREAD
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTHREAD_COMPLETE_AND_EXIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kthread_complete_and_exit], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SPL_KTHREAD_COMPLETE_AND_EXIT, kthread_complete_and_exit, [kthread_complete_and_exit() available])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(SPL_KTHREAD_COMPLETE_AND_EXIT, complete_and_exit, [using complete_and_exit() instead])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SPL_KTHREAD_COMPLETE_AND_EXIT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SPL_KTHREAD_COMPLETE_AND_EXIT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTHREAD_DEQUEUE_SIGNAL_4ARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kthread_dequeue_signal], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DEQUEUE_SIGNAL_4ARG, 1, [dequeue_signal() takes 4 arguments])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DEQUEUE_SIGNAL_4ARG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ZERO_PAGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([zero_page_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ZERO_PAGE_GPL_ONLY, 1,
		    [ZERO_PAGE() is GPL-only])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ZERO_PAGE_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL___COPY_FROM_USER_INATOMIC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([__copy_from_user_inatomic_license], [
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
		AC_MSG_ERROR([
	*** The `__copy_from_user_inatomic()` Linux kernel function is
	*** incompatible with the CDDL license and will prevent the module
	*** linking stage from succeeding.  OpenZFS cannot be compiled.
		])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_USER_NS_COMMON_INUM
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([user_ns_common_inum], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_USER_NS_COMMON_INUM, 1,
		    [user_namespace->ns.inum exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_USER_NS_COMMON_INUM$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_IDMAP_MNT_API
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([idmap_mnt_api], [
                AC_MSG_RESULT([yes])
                AC_DEFINE(HAVE_IDMAP_MNT_API, 1,
                    [APIs for idmapped mount are present])
        ], [
                AC_MSG_RESULT([no])
        ])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IDMAP_MNT_API$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_IATTR_VFSID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iattr_vfsid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IATTR_VFSID, 1,
		    [iattr->ia_vfsuid and iattr->ia_vfsgid exist])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IATTR_VFSID$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FILEMAP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([filemap_range_has_page], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILEMAP_RANGE_HAS_PAGE, 1,
		[filemap_range_has_page() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILEMAP_RANGE_HAS_PAGE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WRITEPAGE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([writepage_t_folio], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WRITEPAGE_T_FOLIO, 1,
		   [int (*writepage_t)() takes struct folio*])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WRITEPAGE_T_FOLIO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CPU_HAS_FEATURE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([cpu_has_feature_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CPU_HAS_FEATURE_GPL_ONLY, 1,
		    [cpu_has_feature() is GPL-only])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CPU_HAS_FEATURE_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FLUSH_DCACHE_PAGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([flush_dcache_page_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FLUSH_DCACHE_PAGE_GPL_ONLY, 1,
		    [flush_dcache_page() is GPL-only])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FLUSH_DCACHE_PAGE_GPL_ONLY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_MAKE$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER
m4trace:configure.ac:60: -1- ZFS_AC_DKMS_INHIBIT
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_GETTEXT
m4trace:configure.ac:60: -1- AM_GNU_GETTEXT([external])
m4trace:configure.ac:60: -1- AM_GNU_GETTEXT_NEED([])
m4trace:configure.ac:60: -1- AM_PO_SUBDIRS
m4trace:configure.ac:60: -1- AM_NLS
m4trace:configure.ac:60: -1- m4_pattern_allow([^USE_NLS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^GETTEXT_MACRO_VERSION$])
m4trace:configure.ac:60: -1- AM_PATH_PROG_WITH_TEST([MSGFMT], [msgfmt], [$ac_dir/$ac_word --statistics /dev/null >&5 2>&1 &&
     (if $ac_dir/$ac_word --statistics /dev/null 2>&1 >/dev/null | grep usage >/dev/null; then exit 1; else exit 0; fi)], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MSGFMT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^GMSGFMT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^GMSGFMT_015$])
m4trace:configure.ac:60: -1- AM_PATH_PROG_WITH_TEST([XGETTEXT], [xgettext], [$ac_dir/$ac_word --omit-header --copyright-holder= --msgid-bugs-address= /dev/null >&5 2>&1 &&
     (if $ac_dir/$ac_word --omit-header --copyright-holder= --msgid-bugs-address= /dev/null 2>&1 >/dev/null | grep usage >/dev/null; then exit 1; else exit 0; fi)], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^XGETTEXT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^XGETTEXT_015$])
m4trace:configure.ac:60: -1- AM_PATH_PROG_WITH_TEST([MSGMERGE], [msgmerge], [$ac_dir/$ac_word --update -q /dev/null /dev/null >&5 2>&1], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MSGMERGE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MSGMERGE_FOR_MSGFMT_OPTION$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^XGETTEXT_EXTRA_OPTIONS$])
m4trace:configure.ac:60: -1- AC_LIB_PREPARE_PREFIX
m4trace:configure.ac:60: -1- AC_LIB_RPATH
m4trace:configure.ac:60: -1- AC_LIB_PROG_LD
m4trace:configure.ac:60: -1- AC_LIB_PROG_LD_GNU
m4trace:configure.ac:60: -1- AM_ICONV_LINKFLAGS_BODY
m4trace:configure.ac:60: -1- AC_LIB_LINKFLAGS_BODY([iconv])
m4trace:configure.ac:60: -1- AC_LIB_PREPARE_MULTILIB
m4trace:configure.ac:60: -1- gl_HOST_CPU_C_ABI_32BIT
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([
    eval additional_includedir=\"$includedir\"
    eval additional_libdir=\"$libdir\"
  ])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([
          eval additional_includedir=\"$includedir\"
          eval additional_libdir=\"$libdir\"
        ])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- gt_INTL_MACOSX
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CFPREFERENCESCOPYAPPVALUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CFLOCALECOPYCURRENT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CFLOCALECOPYPREFERREDLANGUAGES$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INTL_MACOSX_LIBS$])
m4trace:configure.ac:60: -1- AM_ICONV_LINK
m4trace:configure.ac:60: -1- AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCICONV])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ICONV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBICONV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LTLIBICONV$])
m4trace:configure.ac:60: -1- AC_LIB_LINKFLAGS_BODY([intl])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([
    eval additional_includedir=\"$includedir\"
    eval additional_libdir=\"$libdir\"
  ])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([
          eval additional_includedir=\"$includedir\"
          eval additional_libdir=\"$libdir\"
        ])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ENABLE_NLS$])
m4trace:configure.ac:60: -1- AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCINTL])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GETTEXT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DCGETTEXT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INTLLIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBINTL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LTLIBINTL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^POSUB$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_MOUNT_HELPER
m4trace:configure.ac:60: -1- m4_pattern_allow([^mounthelperdir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_SYSVINIT
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_DRACUT
m4trace:configure.ac:60: -1- m4_pattern_allow([^dracutdir$])
m4trace:configure.ac:60: -1- AM_COND_IF([BUILD_FREEBSD], [
		PKG_INSTALLDIR(['${prefix}/libdata/pkgconfig'])], [
		PKG_INSTALLDIR
	])
m4trace:configure.ac:60: -1- PKG_INSTALLDIR(['${prefix}/libdata/pkgconfig'])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pkgconfigdir$])
m4trace:configure.ac:60: -1- PKG_INSTALLDIR
m4trace:configure.ac:60: -1- m4_pattern_allow([^pkgconfigdir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_ZLIB
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([ZLIB], [zlib], [zlib.h], [], [z], [compress2 uncompress crc32], [], [
	    AC_MSG_FAILURE([*** zlib-devel package required])
	])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([ZLIB], [zlib], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([zlib], [pkg_cv_[]ZLIB_CFLAGS=`$PKG_CONFIG --[]cflags "zlib" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([zlib], [pkg_cv_[]ZLIB_LIBS=`$PKG_CONFIG --[]libs "zlib" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ZLIB$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_LIBS$])
m4trace:configure.ac:60: -1- AM_COND_IF([BUILD_LINUX], [
		ZFS_AC_CONFIG_USER_UDEV
		ZFS_AC_CONFIG_USER_SYSTEMD
		ZFS_AC_CONFIG_USER_LIBUDEV
		ZFS_AC_CONFIG_USER_LIBUUID
		ZFS_AC_CONFIG_USER_LIBBLKID
	])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_UDEV
m4trace:configure.ac:60: -1- m4_pattern_allow([^udevdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^udevruledir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_SYSTEMD
m4trace:configure.ac:60: -1- m4_pattern_allow([^DEFINE_SYSTEMD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^systemdunitdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^systemdpresetdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^systemdgeneratordir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^modulesloaddir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBUDEV
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBUDEV], [libudev], [libudev.h], [], [udev], [], [user_libudev=yes], [user_libudev=no])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBUDEV], [libudev], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libudev], [pkg_cv_[]LIBUDEV_CFLAGS=`$PKG_CONFIG --[]cflags "libudev" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libudev], [pkg_cv_[]LIBUDEV_LIBS=`$PKG_CONFIG --[]libs "libudev" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBUDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_LIBS$])
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_UDEV_DEVICE_GET_IS_INITIALIZED$])
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBUUID
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBUUID], [uuid], [uuid/uuid.h], [], [uuid], [uuid_generate uuid_is_null], [], [
	    AC_MSG_FAILURE([*** libuuid-devel package required])
	])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBUUID], [uuid], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([uuid], [pkg_cv_[]LIBUUID_CFLAGS=`$PKG_CONFIG --[]cflags "uuid" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([uuid], [pkg_cv_[]LIBUUID_LIBS=`$PKG_CONFIG --[]libs "uuid" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBUUID$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBBLKID
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBBLKID], [blkid], [blkid/blkid.h], [], [blkid], [], [], [
		AC_MSG_FAILURE([
		*** blkid.h missing, libblkid-devel package required])])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBBLKID], [blkid], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([blkid], [pkg_cv_[]LIBBLKID_CFLAGS=`$PKG_CONFIG --[]cflags "blkid" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([blkid], [pkg_cv_[]LIBBLKID_LIBS=`$PKG_CONFIG --[]libs "blkid" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBBLKID$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBTIRPC
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBTIRPC], [libtirpc], [rpc/xdr.h], [tirpc], [tirpc], [xdrmem_create], [], [
		AS_IF([test "x$with_tirpc" = "xyes"], [
		    AC_MSG_FAILURE([--with-tirpc was given, but libtirpc is not available, try installing libtirpc-devel])
		],[dnl ELSE
		    AC_MSG_FAILURE([neither libc sunrpc support nor libtirpc is available, try installing libtirpc-devel])
		])
	    ])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBTIRPC], [libtirpc], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libtirpc], [pkg_cv_[]LIBTIRPC_CFLAGS=`$PKG_CONFIG --[]cflags "libtirpc" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libtirpc], [pkg_cv_[]LIBTIRPC_LIBS=`$PKG_CONFIG --[]libs "libtirpc" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBTIRPC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBCRYPTO
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBCRYPTO], [libcrypto], [openssl/evp.h], [], [crypto], [PKCS5_PBKDF2_HMAC_SHA1], [], [
		AC_MSG_FAILURE([
		*** evp.h missing, libssl-devel package required])])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBCRYPTO], [libcrypto], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libcrypto], [pkg_cv_[]LIBCRYPTO_CFLAGS=`$PKG_CONFIG --[]cflags "libcrypto" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libcrypto], [pkg_cv_[]LIBCRYPTO_LIBS=`$PKG_CONFIG --[]libs "libcrypto" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBCRYPTO$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBAIO
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBAIO], [], [libaio.h], [], [aio], [], [user_libaio=yes], [user_libaio=no])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBAIO], [], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([], [pkg_cv_[]LIBAIO_CFLAGS=`$PKG_CONFIG --[]cflags "" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([], [pkg_cv_[]LIBAIO_LIBS=`$PKG_CONFIG --[]libs "" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBAIO$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBATOMIC
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBATOMIC_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBFETCH
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_DYNAMIC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_SONAME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_IS_FETCH$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_IS_LIBCURL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_DYNAMIC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_SONAME$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_AIO_H
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([AIO_H], [], [aio.h], [], [rt], [lio_listio])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([AIO_H], [], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([], [pkg_cv_[]AIO_H_CFLAGS=`$PKG_CONFIG --[]cflags "" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([], [pkg_cv_[]AIO_H_LIBS=`$PKG_CONFIG --[]libs "" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AIO_H$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_CLOCK_GETTIME
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCLOCK_GETTIME$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_PAM
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SECURITY_PAM_MODULES_H$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^DEFINE_PAM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pammoduledir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pamconfigsdir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_RUNSTATEDIR
m4trace:configure.ac:60: -1- m4_pattern_allow([^runstatedir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_MAKEDEV_IN_SYSMACROS
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKEDEV_IN_SYSMACROS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_MAKEDEV_IN_MKDEV
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKEDEV_IN_MKDEV$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_ZFSEXEC
m4trace:configure.ac:60: -1- m4_pattern_allow([^zfsexecdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ISSETUGID$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MLOCKALL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_STRLCAT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_STRLCPY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^RM$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER
m4trace:configure.ac:60: -1- ZFS_AC_DKMS_INHIBIT
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_GETTEXT
m4trace:configure.ac:60: -1- AM_GNU_GETTEXT([external])
m4trace:configure.ac:60: -1- AM_GNU_GETTEXT_NEED([])
m4trace:configure.ac:60: -1- gt_INTL_MACOSX
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CFPREFERENCESCOPYAPPVALUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CFLOCALECOPYCURRENT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CFLOCALECOPYPREFERREDLANGUAGES$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INTL_MACOSX_LIBS$])
m4trace:configure.ac:60: -1- AM_ICONV_LINK
m4trace:configure.ac:60: -1- AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCICONV])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ICONV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBICONV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LTLIBICONV$])
m4trace:configure.ac:60: -1- AC_LIB_LINKFLAGS_BODY([intl])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([
    eval additional_includedir=\"$includedir\"
    eval additional_libdir=\"$libdir\"
  ])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([
          eval additional_includedir=\"$includedir\"
          eval additional_libdir=\"$libdir\"
        ])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ENABLE_NLS$])
m4trace:configure.ac:60: -1- AC_LIB_APPENDTOVAR([CPPFLAGS], [$INCINTL])
m4trace:configure.ac:60: -1- AC_LIB_WITH_FINAL_PREFIX([eval x=\"$x\"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GETTEXT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DCGETTEXT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INTLLIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBINTL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LTLIBINTL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^POSUB$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_MOUNT_HELPER
m4trace:configure.ac:60: -1- m4_pattern_allow([^mounthelperdir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_SYSVINIT
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_DRACUT
m4trace:configure.ac:60: -1- m4_pattern_allow([^dracutdir$])
m4trace:configure.ac:60: -1- AM_COND_IF([BUILD_FREEBSD], [
		PKG_INSTALLDIR(['${prefix}/libdata/pkgconfig'])], [
		PKG_INSTALLDIR
	])
m4trace:configure.ac:60: -1- PKG_INSTALLDIR(['${prefix}/libdata/pkgconfig'])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pkgconfigdir$])
m4trace:configure.ac:60: -1- PKG_INSTALLDIR
m4trace:configure.ac:60: -1- m4_pattern_allow([^pkgconfigdir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_ZLIB
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([ZLIB], [zlib], [zlib.h], [], [z], [compress2 uncompress crc32], [], [
	    AC_MSG_FAILURE([*** zlib-devel package required])
	])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([ZLIB], [zlib], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([zlib], [pkg_cv_[]ZLIB_CFLAGS=`$PKG_CONFIG --[]cflags "zlib" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([zlib], [pkg_cv_[]ZLIB_LIBS=`$PKG_CONFIG --[]libs "zlib" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ZLIB$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZLIB_LIBS$])
m4trace:configure.ac:60: -1- AM_COND_IF([BUILD_LINUX], [
		ZFS_AC_CONFIG_USER_UDEV
		ZFS_AC_CONFIG_USER_SYSTEMD
		ZFS_AC_CONFIG_USER_LIBUDEV
		ZFS_AC_CONFIG_USER_LIBUUID
		ZFS_AC_CONFIG_USER_LIBBLKID
	])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_UDEV
m4trace:configure.ac:60: -1- m4_pattern_allow([^udevdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^udevruledir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_SYSTEMD
m4trace:configure.ac:60: -1- m4_pattern_allow([^DEFINE_SYSTEMD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^systemdunitdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^systemdpresetdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^systemdgeneratordir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^modulesloaddir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBUDEV
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBUDEV], [libudev], [libudev.h], [], [udev], [], [user_libudev=yes], [user_libudev=no])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBUDEV], [libudev], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libudev], [pkg_cv_[]LIBUDEV_CFLAGS=`$PKG_CONFIG --[]cflags "libudev" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libudev], [pkg_cv_[]LIBUDEV_LIBS=`$PKG_CONFIG --[]libs "libudev" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBUDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUDEV_LIBS$])
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_UDEV_DEVICE_GET_IS_INITIALIZED$])
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBUUID
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBUUID], [uuid], [uuid/uuid.h], [], [uuid], [uuid_generate uuid_is_null], [], [
	    AC_MSG_FAILURE([*** libuuid-devel package required])
	])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBUUID], [uuid], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([uuid], [pkg_cv_[]LIBUUID_CFLAGS=`$PKG_CONFIG --[]cflags "uuid" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([uuid], [pkg_cv_[]LIBUUID_LIBS=`$PKG_CONFIG --[]libs "uuid" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBUUID$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBUUID_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBBLKID
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBBLKID], [blkid], [blkid/blkid.h], [], [blkid], [], [], [
		AC_MSG_FAILURE([
		*** blkid.h missing, libblkid-devel package required])])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBBLKID], [blkid], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([blkid], [pkg_cv_[]LIBBLKID_CFLAGS=`$PKG_CONFIG --[]cflags "blkid" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([blkid], [pkg_cv_[]LIBBLKID_LIBS=`$PKG_CONFIG --[]libs "blkid" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBBLKID$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBBLKID_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBTIRPC
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBTIRPC], [libtirpc], [rpc/xdr.h], [tirpc], [tirpc], [xdrmem_create], [], [
		AS_IF([test "x$with_tirpc" = "xyes"], [
		    AC_MSG_FAILURE([--with-tirpc was given, but libtirpc is not available, try installing libtirpc-devel])
		],[dnl ELSE
		    AC_MSG_FAILURE([neither libc sunrpc support nor libtirpc is available, try installing libtirpc-devel])
		])
	    ])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBTIRPC], [libtirpc], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libtirpc], [pkg_cv_[]LIBTIRPC_CFLAGS=`$PKG_CONFIG --[]cflags "libtirpc" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libtirpc], [pkg_cv_[]LIBTIRPC_LIBS=`$PKG_CONFIG --[]libs "libtirpc" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBTIRPC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBTIRPC_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBCRYPTO
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBCRYPTO], [libcrypto], [openssl/evp.h], [], [crypto], [PKCS5_PBKDF2_HMAC_SHA1], [], [
		AC_MSG_FAILURE([
		*** evp.h missing, libssl-devel package required])])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBCRYPTO], [libcrypto], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libcrypto], [pkg_cv_[]LIBCRYPTO_CFLAGS=`$PKG_CONFIG --[]cflags "libcrypto" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([libcrypto], [pkg_cv_[]LIBCRYPTO_LIBS=`$PKG_CONFIG --[]libs "libcrypto" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBCRYPTO$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCRYPTO_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBAIO
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([LIBAIO], [], [libaio.h], [], [aio], [], [user_libaio=yes], [user_libaio=no])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([LIBAIO], [], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([], [pkg_cv_[]LIBAIO_CFLAGS=`$PKG_CONFIG --[]cflags "" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([], [pkg_cv_[]LIBAIO_LIBS=`$PKG_CONFIG --[]libs "" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LIBAIO$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBAIO_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBATOMIC
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBATOMIC_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_LIBFETCH
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_DYNAMIC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_SONAME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_IS_FETCH$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_IS_LIBCURL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_DYNAMIC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBFETCH_SONAME$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_AIO_H
m4trace:configure.ac:60: -1- ZFS_AC_FIND_SYSTEM_LIBRARY([AIO_H], [], [aio.h], [], [rt], [lio_listio])
m4trace:configure.ac:60: -1- PKG_CHECK_MODULES([AIO_H], [], [
	_header_found=1
	_library_found=1
	_pc_found=1
    ], [:])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_LIBS$])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([], [pkg_cv_[]AIO_H_CFLAGS=`$PKG_CONFIG --[]cflags "" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- PKG_CHECK_EXISTS([], [pkg_cv_[]AIO_H_LIBS=`$PKG_CONFIG --[]libs "" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:60: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:60: -1- AX_SAVE_FLAGS
m4trace:configure.ac:60: -1- AX_RESTORE_FLAGS
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_LIBS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_PC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_AIO_H$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_CFLAGS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^AIO_H_LIBS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_CLOCK_GETTIME
m4trace:configure.ac:60: -1- m4_pattern_allow([^LIBCLOCK_GETTIME$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_PAM
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SECURITY_PAM_MODULES_H$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^DEFINE_PAM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pammoduledir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^pamconfigsdir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_RUNSTATEDIR
m4trace:configure.ac:60: -1- m4_pattern_allow([^runstatedir$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_MAKEDEV_IN_SYSMACROS
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKEDEV_IN_SYSMACROS$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_MAKEDEV_IN_MKDEV
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKEDEV_IN_MKDEV$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_USER_ZFSEXEC
m4trace:configure.ac:60: -1- m4_pattern_allow([^zfsexecdir$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ISSETUGID$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MLOCKALL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_STRLCAT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_STRLCPY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^RM$])
m4trace:configure.ac:60: -1- ZFS_AC_CONFIG_KERNEL
m4trace:configure.ac:60: -1- AM_COND_IF([BUILD_LINUX], [
		dnl # Setup the kernel build environment.
		ZFS_AC_KERNEL
		ZFS_AC_QAT

		dnl # Sanity checks for module building and CONFIG_* defines
		ZFS_AC_KERNEL_CONFIG_DEFINED
		ZFS_AC_MODULE_SYMVERS

		dnl # Sequential ZFS_LINUX_TRY_COMPILE tests
		ZFS_AC_KERNEL_FPU_HEADER
		ZFS_AC_KERNEL_OBJTOOL_HEADER
		ZFS_AC_KERNEL_WAIT_QUEUE_ENTRY_T
		ZFS_AC_KERNEL_MISC_MINOR
		ZFS_AC_KERNEL_DECLARE_EVENT_CLASS

		dnl # Parallel ZFS_LINUX_TEST_SRC / ZFS_LINUX_TEST_RESULT tests
		ZFS_AC_KERNEL_TEST_SRC
		ZFS_AC_KERNEL_TEST_RESULT

		AS_IF([test "$LINUX_OBJ" != "$LINUX"], [
			KERNEL_MAKE="$KERNEL_MAKE O=$LINUX_OBJ"
		])

		AC_SUBST(KERNEL_MAKE)
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL
m4trace:configure.ac:60: -1- m4_pattern_allow([^LINUX$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LINUX_OBJ$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^LINUX_VERSION$])
m4trace:configure.ac:60: -1- ZFS_AC_QAT
m4trace:configure.ac:60: -1- m4_pattern_allow([^QAT_SRC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^QAT_OBJ$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_QAT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^QAT_SYMBOLS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_DEFINED
m4trace:configure.ac:60: -1- _m4_warn([cross], [AC_RUN_IFELSE called without default to allow cross compiling], [./lib/autoconf/general.m4:2981: AC_RUN_IFELSE is expanded from...
lib/m4sugar/m4sh.m4:699: AS_IF is expanded from...
config/kernel-config-defined.m4:6: ZFS_AC_KERNEL_CONFIG_DEFINED is expanded from...
/usr/share/aclocal-1.16/cond-if.m4:23: AM_COND_IF is expanded from...
config/kernel.m4:4: ZFS_AC_CONFIG_KERNEL is expanded from...
config/zfs-build.m4:236: ZFS_AC_CONFIG is expanded from...
configure.ac:60: the top level])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_IS_GPL_COMPATIBLE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_MODULES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_modules], [
		#if !defined(CONFIG_MODULES)
		#error CONFIG_MODULES not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if !defined(CONFIG_MODULES)
		#error CONFIG_MODULES not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_modules])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_modules], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if !defined(CONFIG_MODULES)
		#error CONFIG_MODULES not defined
		#endif
	]], [[]], [[]])], [config_modules_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_modules_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_BLOCK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_block], [
		#if !defined(CONFIG_BLOCK)
		#error CONFIG_BLOCK not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if !defined(CONFIG_BLOCK)
		#error CONFIG_BLOCK not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_block])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_block], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if !defined(CONFIG_BLOCK)
		#error CONFIG_BLOCK not defined
		#endif
	]], [[]], [[]])], [config_block_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_block_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_DEBUG_LOCK_ALLOC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_debug_lock_alloc], [
		#include <linux/mutex.h>
	], [
		struct mutex lock;

		mutex_init(&lock);
		mutex_lock(&lock);
		mutex_unlock(&lock);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mutex.h>
	]], [[
		struct mutex lock;

		mutex_init(&lock);
		mutex_lock(&lock);
		mutex_unlock(&lock);
	]],
	    [["Dual BSD/GPL"]])], [config_debug_lock_alloc])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_debug_lock_alloc], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mutex.h>
	]], [[
		struct mutex lock;

		mutex_init(&lock);
		mutex_lock(&lock);
		mutex_unlock(&lock);
	]], [[ZFS_META_LICENSE]])], [config_debug_lock_alloc_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_debug_lock_alloc_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_TRIM_UNUSED_KSYMS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_trim_unusued_ksyms], [
		#if defined(CONFIG_TRIM_UNUSED_KSYMS)
		#error CONFIG_TRIM_UNUSED_KSYMS not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if defined(CONFIG_TRIM_UNUSED_KSYMS)
		#error CONFIG_TRIM_UNUSED_KSYMS not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_trim_unusued_ksyms])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_trim_unusued_ksyms], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if defined(CONFIG_TRIM_UNUSED_KSYMS)
		#error CONFIG_TRIM_UNUSED_KSYMS not defined
		#endif
	]], [[]], [[]])], [config_trim_unusued_ksyms_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_trim_unusued_ksyms_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_ZLIB_DEFLATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_zlib_deflate], [
		#if !defined(CONFIG_ZLIB_DEFLATE) && \
		    !defined(CONFIG_ZLIB_DEFLATE_MODULE)
		#error CONFIG_ZLIB_DEFLATE not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if !defined(CONFIG_ZLIB_DEFLATE) && \
		    !defined(CONFIG_ZLIB_DEFLATE_MODULE)
		#error CONFIG_ZLIB_DEFLATE not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_zlib_deflate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_zlib_deflate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if !defined(CONFIG_ZLIB_DEFLATE) && \
		    !defined(CONFIG_ZLIB_DEFLATE_MODULE)
		#error CONFIG_ZLIB_DEFLATE not defined
		#endif
	]], [[]], [[]])], [config_zlib_deflate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_zlib_deflate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONFIG_ZLIB_INFLATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([config_zlib_inflate], [
		#if !defined(CONFIG_ZLIB_INFLATE) && \
		    !defined(CONFIG_ZLIB_INFLATE_MODULE)
		#error CONFIG_ZLIB_INFLATE not defined
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#if !defined(CONFIG_ZLIB_INFLATE) && \
		    !defined(CONFIG_ZLIB_INFLATE_MODULE)
		#error CONFIG_ZLIB_INFLATE not defined
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [config_zlib_inflate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_zlib_inflate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#if !defined(CONFIG_ZLIB_INFLATE) && \
		    !defined(CONFIG_ZLIB_INFLATE_MODULE)
		#error CONFIG_ZLIB_INFLATE not defined
		#endif
	]], [[]], [[]])], [config_zlib_inflate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([config_zlib_inflate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_COMPILE_ALL([config])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_COMPILE([config], [build])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build], [test -f build/build.log], [
		mv build/Makefile build/Makefile.compile.config
		mv build/build.log build/build.log.config
	], [
	        AC_MSG_ERROR([
        *** Unable to compile test source to determine kernel interfaces.])
	], [yes], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_MODPOST([config], [build/$name])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/$name], [test -f build/$name/build.log], [
		mv build/$name/Makefile build/$name/Makefile.modpost.config
		cat build/$name/build.log >>build/build.log.config
	], [
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_MODPOST([config], [build])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build], [test -f build/build.log], [
		mv build/Makefile build/Makefile.modpost.config
		cat build/build.log >>build/build.log.config
	], [
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_MODULES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_modules], [
			AC_MSG_RESULT([yes])
		], [
			AC_MSG_RESULT([no])
			AC_MSG_ERROR([
		*** This kernel does not include the required loadable module
		*** support!
		***
		*** To build OpenZFS as a loadable Linux kernel module
		*** enable loadable module support by setting
		*** `CONFIG_MODULES=y` in the kernel configuration and run
		*** `make modules_prepare` in the Linux source tree.
		***
		*** If you don't intend to enable loadable kernel module
		*** support, please compile OpenZFS as a Linux kernel built-in.
		***
		*** Prepare the Linux source tree by running `make prepare`,
		*** use the OpenZFS `--enable-linux-builtin` configure option,
		*** copy the OpenZFS sources into the Linux source tree using
		*** `./copy-builtin <linux source directory>`,
		*** set `CONFIG_ZFS=y` in the kernel configuration and compile
		*** kernel as usual.
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([], [], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[]], [[]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[]], [[]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[]], [[]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[]], [[]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
			AC_MSG_RESULT([not needed])
		], [
			AC_MSG_RESULT([error])
			AC_MSG_ERROR([
		*** This kernel is unable to compile object files.
		***
		*** Please make sure you prepared the Linux source tree
		*** by running `make prepare` there.
			])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_BLOCK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_block], [
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required block device support.
	*** Rebuild the kernel with CONFIG_BLOCK=y set.])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_DEBUG_LOCK_ALLOC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_debug_lock_alloc_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_MSG_ERROR([
	*** Kernel built with CONFIG_DEBUG_LOCK_ALLOC which is incompatible
	*** with the CDDL license and will prevent the module linking stage
	*** from succeeding.  You must rebuild your kernel without this
	*** option enabled.])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_TRIM_UNUSED_KSYMS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_trim_unusued_ksyms], [
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
		AS_IF([test "x$enable_linux_builtin" != xyes], [
			AC_MSG_ERROR([
	*** This kernel has unused symbols trimming enabled, please disable.
	*** Rebuild the kernel with CONFIG_TRIM_UNUSED_KSYMS=n set.])
		])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_ZLIB_DEFLATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_zlib_deflate], [
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required zlib deflate support.
	*** Rebuild the kernel with CONFIG_ZLIB_DEFLATE=y|m set.])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONFIG_ZLIB_INFLATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([config_zlib_inflate], [
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([
	*** This kernel does not include the required zlib inflate support.
	*** Rebuild the kernel with CONFIG_ZLIB_INFLATE=y|m set.])
	])
m4trace:configure.ac:60: -1- ZFS_AC_MODULE_SYMVERS
m4trace:configure.ac:60: -1- m4_pattern_allow([^LINUX_SYMBOLS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FPU_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	], [
	], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_API_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		], [
		], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		#include <asm/fpu/api.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
		AC_DEFINE(HAVE_KERNEL_FPU_API_HEADER, 1,
		    [kernel has asm/fpu/api.h])

		ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		],[
		],[
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		],[
			AC_MSG_RESULT([asm/fpu/api.h])
		])
	], [
		AC_MSG_RESULT([i387.h])
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_API_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		], [
		], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/module.h>
			#include <asm/fpu/internal.h>
		]], [[
		]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL_HEADER, 1,
			    [kernel has asm/fpu/internal.h])
			AC_MSG_RESULT([asm/fpu/api.h asm/fpu/internal.h])
		], [
			AC_MSG_RESULT([asm/fpu/api.h])
		], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_OBJTOOL_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
		#include <linux/objtool.h>
	], [
	], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/objtool.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/objtool.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_OBJTOOL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/objtool.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/objtool.h>
	]], [[
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
		AC_DEFINE(HAVE_KERNEL_OBJTOOL_HEADER, 1,
		    [kernel has linux/objtool.h])
		AC_MSG_RESULT(linux/objtool.h)
	], [
		AC_MSG_RESULT(linux/frame.h)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_OBJTOOL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WAIT_QUEUE_ENTRY_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE([
		#include <linux/wait.h>
	], [
		wait_queue_entry_t *entry __attribute__ ((unused));
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		wait_queue_entry_t *entry __attribute__ ((unused));
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		wait_queue_entry_t *entry __attribute__ ((unused));
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WAIT_QUEUE_ENTRY_T$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		wait_queue_entry_t *entry __attribute__ ((unused));
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		wait_queue_entry_t *entry __attribute__ ((unused));
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_T, 1,
		    [wait_queue_entry_t exists])
	], [
		AC_MSG_RESULT(no)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WAIT_QUEUE_ENTRY_T$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_MISC_MINOR
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_DEVICE_MINOR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DECLARE_EVENT_CLASS
m4trace:configure.ac:60: -1- ZFS_LINUX_TRY_COMPILE_HEADER([
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	], [
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	]], [[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.o], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	]], [[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.o], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DECLARE_EVENT_CLASS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE_IFELSE([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	]], [[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	]],
		    [[ZFS_META_LICENSE]])], [test -f build/conftest/conftest.ko], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_REMOVE([conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/module.h>
		MODULE_LICENSE("$ZFS_META_LICENSE");

		#define CREATE_TRACE_POINTS
		#include "conftest.h"
	]], [[
		trace_zfs_autoconf_event_one(1UL);
		trace_zfs_autoconf_event_two(2UL);
	]],
		    [[ZFS_META_LICENSE]])], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_H([
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	], [conftest])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([conftest], [no], [m4_ifvaln([
		#if !defined(_CONFTEST_H) || defined(TRACE_HEADER_MULTI_READ)
		#define _CONFTEST_H

		#undef  TRACE_SYSTEM
		#define TRACE_SYSTEM zfs
		#include <linux/tracepoint.h>

		DECLARE_EVENT_CLASS(zfs_autoconf_event_class,
			TP_PROTO(unsigned long i),
			TP_ARGS(i),
			TP_STRUCT__entry(
				__field(unsigned long, i)
			),
			TP_fast_assign(
				__entry->i = i;
			),
			TP_printk("i = %lu", __entry->i)
		);

		#define DEFINE_AUTOCONF_EVENT(name) \
		DEFINE_EVENT(zfs_autoconf_event_class, name, \
			TP_PROTO(unsigned long i), \
			TP_ARGS(i))
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_one);
		DEFINE_AUTOCONF_EVENT(zfs_autoconf_event_two);

		#endif /* _CONFTEST_H */

		#undef  TRACE_INCLUDE_PATH
		#define TRACE_INCLUDE_PATH .
		#define TRACE_INCLUDE_FILE conftest
		#include <trace/define_trace.h>
	], [-I$PWD/build/conftest], [])])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/conftest], [test -f build/conftest/conftest.ko], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DECLARE_EVENT_CLASS, 1,
		    [DECLARE_EVENT_CLASS() is available])
	], [
		AC_MSG_RESULT(no)
	], [], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DECLARE_EVENT_CLASS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TEST_SRC
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_OBJTOOL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([objtool], [
		#undef __ASSEMBLY__
		#include <asm/ptrace.h>
		#include <asm/frame.h>
	], [
		#if !defined(FRAME_BEGIN)
		#error "FRAME_BEGIN is not defined"
		#endif
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#undef __ASSEMBLY__
		#include <asm/ptrace.h>
		#include <asm/frame.h>
	]], [[
		#if !defined(FRAME_BEGIN)
		#error "FRAME_BEGIN is not defined"
		#endif
	]],
	    [["Dual BSD/GPL"]])], [objtool])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([objtool], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#undef __ASSEMBLY__
		#include <asm/ptrace.h>
		#include <asm/frame.h>
	]], [[
		#if !defined(FRAME_BEGIN)
		#error "FRAME_BEGIN is not defined"
		#endif
	]], [[]])], [objtool_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([objtool_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([stack_frame_non_standard], [
		#ifdef HAVE_KERNEL_OBJTOOL_HEADER
		#include <linux/objtool.h>
		#else
		#include <linux/frame.h>
		#endif
	], [
		#if !defined(STACK_FRAME_NON_STANDARD)
		#error "STACK_FRAME_NON_STANDARD is not defined."
		#endif
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#ifdef HAVE_KERNEL_OBJTOOL_HEADER
		#include <linux/objtool.h>
		#else
		#include <linux/frame.h>
		#endif
	]], [[
		#if !defined(STACK_FRAME_NON_STANDARD)
		#error "STACK_FRAME_NON_STANDARD is not defined."
		#endif
	]],
	    [["Dual BSD/GPL"]])], [stack_frame_non_standard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([stack_frame_non_standard], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#ifdef HAVE_KERNEL_OBJTOOL_HEADER
		#include <linux/objtool.h>
		#else
		#include <linux/frame.h>
		#endif
	]], [[
		#if !defined(STACK_FRAME_NON_STANDARD)
		#error "STACK_FRAME_NON_STANDARD is not defined."
		#endif
	]], [[]])], [stack_frame_non_standard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([stack_frame_non_standard_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GLOBAL_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GLOBAL_NODE_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([global_node_page_state], [
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	], [
		(void) global_node_page_state(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	]], [[
		(void) global_node_page_state(0);
	]],
	    [["Dual BSD/GPL"]])], [global_node_page_state])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([global_node_page_state], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	]], [[
		(void) global_node_page_state(0);
	]], [[]])], [global_node_page_state_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([global_node_page_state_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GLOBAL_ZONE_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([global_zone_page_state], [
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	], [
		(void) global_zone_page_state(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	]], [[
		(void) global_zone_page_state(0);
	]],
	    [["Dual BSD/GPL"]])], [global_zone_page_state])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([global_zone_page_state], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		#include <linux/vmstat.h>
	]], [[
		(void) global_zone_page_state(0);
	]], [[]])], [global_zone_page_state_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([global_zone_page_state_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ACCESS_OK_TYPE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([access_ok_type], [
		#include <linux/uaccess.h>
	], [
		const void __user __attribute__((unused)) *addr =
		    (void *) 0xdeadbeef;
		unsigned long __attribute__((unused)) size = 1;
		int error __attribute__((unused)) = access_ok(0, addr, size);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/uaccess.h>
	]], [[
		const void __user __attribute__((unused)) *addr =
		    (void *) 0xdeadbeef;
		unsigned long __attribute__((unused)) size = 1;
		int error __attribute__((unused)) = access_ok(0, addr, size);
	]],
	    [["Dual BSD/GPL"]])], [access_ok_type])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([access_ok_type], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/uaccess.h>
	]], [[
		const void __user __attribute__((unused)) *addr =
		    (void *) 0xdeadbeef;
		unsigned long __attribute__((unused)) size = 1;
		int error __attribute__((unused)) = access_ok(0, addr, size);
	]], [[]])], [access_ok_type_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([access_ok_type_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PDE_DATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([pde_data], [
		#include <linux/proc_fs.h>
	], [
		pde_data(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/proc_fs.h>
	]], [[
		pde_data(NULL);
	]],
	    [["Dual BSD/GPL"]])], [pde_data])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([pde_data], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/proc_fs.h>
	]], [[
		pde_data(NULL);
	]], [[]])], [pde_data_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([pde_data_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FALLOCATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_fallocate], [
		#include <linux/fs.h>

		long test_fallocate(struct file *file, int mode,
		    loff_t offset, loff_t len) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fallocate = test_fallocate,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		long test_fallocate(struct file *file, int mode,
		    loff_t offset, loff_t len) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fallocate = test_fallocate,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_fallocate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_fallocate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		long test_fallocate(struct file *file, int mode,
		    loff_t offset, loff_t len) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fallocate = test_fallocate,
		};
	]], [[]], [[]])], [file_fallocate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_fallocate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([falloc_fl_zero_range], [
		#include <linux/falloc.h>
	], [
		int flags __attribute__ ((unused));
		flags = FALLOC_FL_ZERO_RANGE;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/falloc.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = FALLOC_FL_ZERO_RANGE;
	]],
	    [["Dual BSD/GPL"]])], [falloc_fl_zero_range])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([falloc_fl_zero_range], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/falloc.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = FALLOC_FL_ZERO_RANGE;
	]], [[]])], [falloc_fl_zero_range_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([falloc_fl_zero_range_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FADVISE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_fadvise], [
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fadvise = NULL,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fadvise = NULL,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_fadvise])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_fadvise], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fadvise = NULL,
		};
	]], [[]], [[]])], [file_fadvise_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_fadvise_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_FADVISE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_fadvise], [
		#include <linux/fs.h>
	], [
		struct file *fp __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t len __attribute__ ((unused)) = 0;
		int advise __attribute__ ((unused)) = 0;
		generic_fadvise(fp, offset, len, advise);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *fp __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t len __attribute__ ((unused)) = 0;
		int advise __attribute__ ((unused)) = 0;
		generic_fadvise(fp, offset, len, advise);
	]],
	    [["Dual BSD/GPL"]])], [generic_fadvise])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fadvise], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *fp __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t len __attribute__ ((unused)) = 0;
		int advise __attribute__ ((unused)) = 0;
		generic_fadvise(fp, offset, len, advise);
	]], [[]])], [generic_fadvise_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fadvise_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([2args_zlib_deflate_workspacesize], [
		#include <linux/zlib.h>
	], [
		return zlib_deflate_workspacesize(MAX_WBITS, MAX_MEM_LEVEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/zlib.h>
	]], [[
		return zlib_deflate_workspacesize(MAX_WBITS, MAX_MEM_LEVEL);
	]],
	    [["Dual BSD/GPL"]])], [2args_zlib_deflate_workspacesize])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([2args_zlib_deflate_workspacesize], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/zlib.h>
	]], [[
		return zlib_deflate_workspacesize(MAX_WBITS, MAX_MEM_LEVEL);
	]], [[]])], [2args_zlib_deflate_workspacesize_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([2args_zlib_deflate_workspacesize_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RWSEM
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RWSEM_ACTIVITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([rwsem_activity], [
		#include <linux/rwsem.h>
	], [
		struct rw_semaphore dummy_semaphore __attribute__ ((unused));
		dummy_semaphore.activity = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/rwsem.h>
	]], [[
		struct rw_semaphore dummy_semaphore __attribute__ ((unused));
		dummy_semaphore.activity = 0;
	]],
	    [["Dual BSD/GPL"]])], [rwsem_activity])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([rwsem_activity], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/rwsem.h>
	]], [[
		struct rw_semaphore dummy_semaphore __attribute__ ((unused));
		dummy_semaphore.activity = 0;
	]], [[]])], [rwsem_activity_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([rwsem_activity_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RWSEM_ATOMIC_LONG_COUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([rwsem_atomic_long_count], [
		#include <linux/rwsem.h>
	], [
		DECLARE_RWSEM(dummy_semaphore);
		(void) atomic_long_read(&dummy_semaphore.count);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/rwsem.h>
	]], [[
		DECLARE_RWSEM(dummy_semaphore);
		(void) atomic_long_read(&dummy_semaphore.count);
	]],
	    [["Dual BSD/GPL"]])], [rwsem_atomic_long_count])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([rwsem_atomic_long_count], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/rwsem.h>
	]], [[
		DECLARE_RWSEM(dummy_semaphore);
		(void) atomic_long_read(&dummy_semaphore.count);
	]], [[]])], [rwsem_atomic_long_count_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([rwsem_atomic_long_count_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SCHED
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SCHED_RT_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([sched_rt_header], [
		#include <linux/sched.h>
		#include <linux/sched/rt.h>
	], [
		return 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
		#include <linux/sched/rt.h>
	]], [[
		return 0;
	]],
	    [["Dual BSD/GPL"]])], [sched_rt_header])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sched_rt_header], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
		#include <linux/sched/rt.h>
	]], [[
		return 0;
	]], [[]])], [sched_rt_header_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sched_rt_header_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SCHED_SIGNAL_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([sched_signal_header], [
		#include <linux/sched.h>
		#include <linux/sched/signal.h>
	], [
		return 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
		#include <linux/sched/signal.h>
	]], [[
		return 0;
	]],
	    [["Dual BSD/GPL"]])], [sched_signal_header])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sched_signal_header], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
		#include <linux/sched/signal.h>
	]], [[
		return 0;
	]], [[]])], [sched_signal_header_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sched_signal_header_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_IO_SCHEDULE_TIMEOUT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([io_schedule_timeout], [
		#include <linux/sched.h>
	], [
		(void) io_schedule_timeout(1);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
	]], [[
		(void) io_schedule_timeout(1);
	]],
	    [["Dual BSD/GPL"]])], [io_schedule_timeout])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([io_schedule_timeout], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
	]], [[
		(void) io_schedule_timeout(1);
	]], [[]])], [io_schedule_timeout_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([io_schedule_timeout_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_USLEEP_RANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([usleep_range], [
		#include <linux/delay.h>
	], [
		usleep_range(0, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/delay.h>
	]], [[
		usleep_range(0, 0);
	]],
	    [["Dual BSD/GPL"]])], [usleep_range])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([usleep_range], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/delay.h>
	]], [[
		usleep_range(0, 0);
	]], [[]])], [usleep_range_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([usleep_range_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KMEM_CACHE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KMEM_CACHE_CREATE_USERCOPY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kmem_cache_create_usercopy], [
		#include <linux/slab.h>
		static void ctor(void *foo) { /* fake ctor */ }
	], [
		struct kmem_cache *skc_linux_cache;
		const char *name = "test";
		size_t size = 4096;
		size_t align = 8;
		unsigned long flags = 0;
		size_t useroffset = 0;
		size_t usersize = size - useroffset;

		skc_linux_cache = kmem_cache_create_usercopy(
		    name, size, align, flags, useroffset, usersize, ctor);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/slab.h>
		static void ctor(void *foo) { /* fake ctor */ }
	]], [[
		struct kmem_cache *skc_linux_cache;
		const char *name = "test";
		size_t size = 4096;
		size_t align = 8;
		unsigned long flags = 0;
		size_t useroffset = 0;
		size_t usersize = size - useroffset;

		skc_linux_cache = kmem_cache_create_usercopy(
		    name, size, align, flags, useroffset, usersize, ctor);
	]],
	    [["Dual BSD/GPL"]])], [kmem_cache_create_usercopy])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kmem_cache_create_usercopy], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/slab.h>
		static void ctor(void *foo) { /* fake ctor */ }
	]], [[
		struct kmem_cache *skc_linux_cache;
		const char *name = "test";
		size_t size = 4096;
		size_t align = 8;
		unsigned long flags = 0;
		size_t useroffset = 0;
		size_t usersize = size - useroffset;

		skc_linux_cache = kmem_cache_create_usercopy(
		    name, size, align, flags, useroffset, usersize, ctor);
	]], [[]])], [kmem_cache_create_usercopy_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kmem_cache_create_usercopy_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KVMALLOC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kvmalloc], [
		#include <linux/mm.h>
		#include <linux/slab.h>
	], [
		void *p __attribute__ ((unused));

		p = kvmalloc(0, GFP_KERNEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		#include <linux/slab.h>
	]], [[
		void *p __attribute__ ((unused));

		p = kvmalloc(0, GFP_KERNEL);
	]],
	    [["Dual BSD/GPL"]])], [kvmalloc])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kvmalloc], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		#include <linux/slab.h>
	]], [[
		void *p __attribute__ ((unused));

		p = kvmalloc(0, GFP_KERNEL);
	]], [[]])], [kvmalloc_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kvmalloc_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VMALLOC_PAGE_KERNEL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([__vmalloc], [
		#include <linux/mm.h>
		#include <linux/vmalloc.h>
	], [
		void *p __attribute__ ((unused));

		p = __vmalloc(0, GFP_KERNEL, PAGE_KERNEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		#include <linux/vmalloc.h>
	]], [[
		void *p __attribute__ ((unused));

		p = __vmalloc(0, GFP_KERNEL, PAGE_KERNEL);
	]],
	    [["Dual BSD/GPL"]])], [__vmalloc])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__vmalloc], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		#include <linux/vmalloc.h>
	]], [[
		void *p __attribute__ ((unused));

		p = __vmalloc(0, GFP_KERNEL, PAGE_KERNEL);
	]], [[]])], [__vmalloc_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__vmalloc_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WAIT
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WAIT_ON_BIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([wait_on_bit], [
		#include <linux/wait.h>
	], [
		int (*action)(void *) = NULL;
		wait_on_bit(NULL, 0, action, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>
	]], [[
		int (*action)(void *) = NULL;
		wait_on_bit(NULL, 0, action, 0);
	]],
	    [["Dual BSD/GPL"]])], [wait_on_bit])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([wait_on_bit], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/wait.h>
	]], [[
		int (*action)(void *) = NULL;
		wait_on_bit(NULL, 0, action, 0);
	]], [[]])], [wait_on_bit_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([wait_on_bit_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WAIT_QUEUE_HEAD_ENTRY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([wait_queue_head_entry], [
		#include <linux/wait.h>

		#ifdef HAVE_WAIT_QUEUE_ENTRY_T
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_entry_t	spl_wait_queue_entry_t;
		#else
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_t		spl_wait_queue_entry_t;
		#endif
	], [
		spl_wait_queue_head_t wq_head;
		spl_wait_queue_entry_t wq_entry;
		struct list_head *head __attribute__ ((unused));
		struct list_head *entry __attribute__ ((unused));

		head = &wq_head.head;
		entry = &wq_entry.entry;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/wait.h>

		#ifdef HAVE_WAIT_QUEUE_ENTRY_T
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_entry_t	spl_wait_queue_entry_t;
		#else
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_t		spl_wait_queue_entry_t;
		#endif
	]], [[
		spl_wait_queue_head_t wq_head;
		spl_wait_queue_entry_t wq_entry;
		struct list_head *head __attribute__ ((unused));
		struct list_head *entry __attribute__ ((unused));

		head = &wq_head.head;
		entry = &wq_entry.entry;
	]],
	    [["Dual BSD/GPL"]])], [wait_queue_head_entry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([wait_queue_head_entry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/wait.h>

		#ifdef HAVE_WAIT_QUEUE_ENTRY_T
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_entry_t	spl_wait_queue_entry_t;
		#else
		typedef wait_queue_head_t	spl_wait_queue_head_t;
		typedef wait_queue_t		spl_wait_queue_entry_t;
		#endif
	]], [[
		spl_wait_queue_head_t wq_head;
		spl_wait_queue_entry_t wq_entry;
		struct list_head *head __attribute__ ((unused));
		struct list_head *entry __attribute__ ((unused));

		head = &wq_head.head;
		entry = &wq_entry.entry;
	]], [[]])], [wait_queue_head_entry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([wait_queue_head_entry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_TIMES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([timestamp_truncate], [
		#include <linux/fs.h>
	], [
		struct timespec64 ts;
		struct inode ip;

		memset(&ts, 0, sizeof(ts));
		ts = timestamp_truncate(ts, &ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct timespec64 ts;
		struct inode ip;

		memset(&ts, 0, sizeof(ts));
		ts = timestamp_truncate(ts, &ip);
	]],
	    [["Dual BSD/GPL"]])], [timestamp_truncate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timestamp_truncate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct timespec64 ts;
		struct inode ip;

		memset(&ts, 0, sizeof(ts));
		ts = timestamp_truncate(ts, &ip);
	]], [[]])], [timestamp_truncate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timestamp_truncate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_times], [
		#include <linux/fs.h>
	], [
		struct inode ip;
		struct timespec ts;

		memset(&ip, 0, sizeof(ip));
		ts = ip.i_mtime;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode ip;
		struct timespec ts;

		memset(&ip, 0, sizeof(ip));
		ts = ip.i_mtime;
	]],
	    [["Dual BSD/GPL"]])], [inode_times])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_times], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode ip;
		struct timespec ts;

		memset(&ip, 0, sizeof(ip));
		ts = ip.i_mtime;
	]], [[]])], [inode_times_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_times_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_LOCK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_lock], [
		#include <linux/fs.h>
	], [
		struct inode *inode = NULL;
		inode_lock_shared(inode);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode *inode = NULL;
		inode_lock_shared(inode);
	]],
	    [["Dual BSD/GPL"]])], [inode_lock])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_lock], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode *inode = NULL;
		inode_lock_shared(inode);
	]], [[]])], [inode_lock_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_lock_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GROUP_INFO_GID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([group_info_gid], [
		#include <linux/cred.h>
	], [
		struct group_info gi __attribute__ ((unused)) = {};
		gi.gid[0] = KGIDT_INIT(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
	]], [[
		struct group_info gi __attribute__ ((unused)) = {};
		gi.gid[0] = KGIDT_INIT(0);
	]],
	    [["Dual BSD/GPL"]])], [group_info_gid])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([group_info_gid], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
	]], [[
		struct group_info gi __attribute__ ((unused)) = {};
		gi.gid[0] = KGIDT_INIT(0);
	]], [[]])], [group_info_gid_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([group_info_gid_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RW
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WRITE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kernel_write], [
		#include <linux/fs.h>
	], [
		struct file *file = NULL;
		const void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_write(file, buf, count, pos);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *file = NULL;
		const void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_write(file, buf, count, pos);
	]],
	    [["Dual BSD/GPL"]])], [kernel_write])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_write], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *file = NULL;
		const void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_write(file, buf, count, pos);
	]], [[]])], [kernel_write_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_write_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_READ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kernel_read], [
		#include <linux/fs.h>
	], [
		struct file *file = NULL;
		void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_read(file, buf, count, pos);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *file = NULL;
		void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_read(file, buf, count, pos);
	]],
	    [["Dual BSD/GPL"]])], [kernel_read])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_read], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *file = NULL;
		void *buf = NULL;
		size_t count = 0;
		loff_t *pos = NULL;
		ssize_t ret;

		ret = kernel_read(file, buf, count, pos);
	]], [[]])], [kernel_read_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_read_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TIMER_SETUP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([timer_setup], [
		#include <linux/timer.h>

		struct my_task_timer {
			struct timer_list timer;
			int data;
		};

		void task_expire(struct timer_list *tl)
		{
			struct my_task_timer *task_timer =
			    from_timer(task_timer, tl, timer);
			task_timer->data = 42;
		}
	], [
		struct my_task_timer task_timer;
		timer_setup(&task_timer.timer, task_expire, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/timer.h>

		struct my_task_timer {
			struct timer_list timer;
			int data;
		};

		void task_expire(struct timer_list *tl)
		{
			struct my_task_timer *task_timer =
			    from_timer(task_timer, tl, timer);
			task_timer->data = 42;
		}
	]], [[
		struct my_task_timer task_timer;
		timer_setup(&task_timer.timer, task_expire, 0);
	]],
	    [["Dual BSD/GPL"]])], [timer_setup])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_setup], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/timer.h>

		struct my_task_timer {
			struct timer_list timer;
			int data;
		};

		void task_expire(struct timer_list *tl)
		{
			struct my_task_timer *task_timer =
			    from_timer(task_timer, tl, timer);
			task_timer->data = 42;
		}
	]], [[
		struct my_task_timer task_timer;
		timer_setup(&task_timer.timer, task_expire, 0);
	]], [[]])], [timer_setup_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_setup_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([timer_list_function], [
		#include <linux/timer.h>
		void task_expire(struct timer_list *tl) {}
	], [
		struct timer_list tl;
		tl.function = task_expire;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/timer.h>
		void task_expire(struct timer_list *tl) {}
	]], [[
		struct timer_list tl;
		tl.function = task_expire;
	]],
	    [["Dual BSD/GPL"]])], [timer_list_function])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_list_function], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/timer.h>
		void task_expire(struct timer_list *tl) {}
	]], [[
		struct timer_list tl;
		tl.function = task_expire;
	]], [[]])], [timer_list_function_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_list_function_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([timer_list_flags], [
		#include <linux/timer.h>
	], [
		struct timer_list tl;
		tl.flags = 2;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/timer.h>
	]], [[
		struct timer_list tl;
		tl.flags = 2;
	]],
	    [["Dual BSD/GPL"]])], [timer_list_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_list_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/timer.h>
	]], [[
		struct timer_list tl;
		tl.flags = 2;
	]], [[]])], [timer_list_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([timer_list_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SUPER_USER_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_user_ns], [
		#include <linux/fs.h>
		#include <linux/user_namespace.h>
	], [
		struct super_block super;
		super.s_user_ns = (struct user_namespace *)NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/user_namespace.h>
	]], [[
		struct super_block super;
		super.s_user_ns = (struct user_namespace *)NULL;
	]],
	    [["Dual BSD/GPL"]])], [super_user_ns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_user_ns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/user_namespace.h>
	]], [[
		struct super_block super;
		super.s_user_ns = (struct user_namespace *)NULL;
	]], [[]])], [super_user_ns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_user_ns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PROC_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([proc_ops_struct], [
		#include <linux/proc_fs.h>

		int test_open(struct inode *ip, struct file *fp) { return 0; }
		ssize_t test_read(struct file *fp, char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		ssize_t test_write(struct file *fp, const char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		loff_t test_lseek(struct file *fp, loff_t off, int flag)
		    { return 0; }
		int test_release(struct inode *ip, struct file *fp)
		    { return 0; }

		const struct proc_ops test_ops __attribute__ ((unused)) = {
			.proc_open      = test_open,
			.proc_read      = test_read,
			.proc_write	= test_write,
			.proc_lseek     = test_lseek,
			.proc_release   = test_release,
		};
	], [
		struct proc_dir_entry *entry __attribute__ ((unused)) =
		    proc_create_data("test", 0444, NULL, &test_ops, NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/proc_fs.h>

		int test_open(struct inode *ip, struct file *fp) { return 0; }
		ssize_t test_read(struct file *fp, char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		ssize_t test_write(struct file *fp, const char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		loff_t test_lseek(struct file *fp, loff_t off, int flag)
		    { return 0; }
		int test_release(struct inode *ip, struct file *fp)
		    { return 0; }

		const struct proc_ops test_ops __attribute__ ((unused)) = {
			.proc_open      = test_open,
			.proc_read      = test_read,
			.proc_write	= test_write,
			.proc_lseek     = test_lseek,
			.proc_release   = test_release,
		};
	]], [[
		struct proc_dir_entry *entry __attribute__ ((unused)) =
		    proc_create_data("test", 0444, NULL, &test_ops, NULL);
	]],
	    [["Dual BSD/GPL"]])], [proc_ops_struct])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([proc_ops_struct], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/proc_fs.h>

		int test_open(struct inode *ip, struct file *fp) { return 0; }
		ssize_t test_read(struct file *fp, char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		ssize_t test_write(struct file *fp, const char __user *ptr,
		    size_t size, loff_t *offp) { return 0; }
		loff_t test_lseek(struct file *fp, loff_t off, int flag)
		    { return 0; }
		int test_release(struct inode *ip, struct file *fp)
		    { return 0; }

		const struct proc_ops test_ops __attribute__ ((unused)) = {
			.proc_open      = test_open,
			.proc_read      = test_read,
			.proc_write	= test_write,
			.proc_lseek     = test_lseek,
			.proc_release   = test_release,
		};
	]], [[
		struct proc_dir_entry *entry __attribute__ ((unused)) =
		    proc_create_data("test", 0444, NULL, &test_ops, NULL);
	]], [[]])], [proc_ops_struct_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([proc_ops_struct_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_CHECK_EVENTS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([block_device_operations_check_events], [
		#include <linux/blkdev.h>

		unsigned int blk_check_events(struct gendisk *disk,
		    unsigned int clearing) {
			(void) disk, (void) clearing;
			return (0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.check_events	= blk_check_events,
		};
	], [], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>

		unsigned int blk_check_events(struct gendisk *disk,
		    unsigned int clearing) {
			(void) disk, (void) clearing;
			return (0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.check_events	= blk_check_events,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [block_device_operations_check_events])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_check_events], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>

		unsigned int blk_check_events(struct gendisk *disk,
		    unsigned int clearing) {
			(void) disk, (void) clearing;
			return (0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.check_events	= blk_check_events,
		};
	]], [[]], [[]])], [block_device_operations_check_events_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_check_events_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_RELEASE_VOID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([block_device_operations_release_void], [
		#include <linux/blkdev.h>

		void blk_release(struct gendisk *g, fmode_t mode) {
			(void) g, (void) mode;
			return;
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.open		= NULL,
			.release	= blk_release,
			.ioctl		= NULL,
			.compat_ioctl	= NULL,
		};
	], [], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>

		void blk_release(struct gendisk *g, fmode_t mode) {
			(void) g, (void) mode;
			return;
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.open		= NULL,
			.release	= blk_release,
			.ioctl		= NULL,
			.compat_ioctl	= NULL,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [block_device_operations_release_void])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_release_void], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>

		void blk_release(struct gendisk *g, fmode_t mode) {
			(void) g, (void) mode;
			return;
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.open		= NULL,
			.release	= blk_release,
			.ioctl		= NULL,
			.compat_ioctl	= NULL,
		};
	]], [[]], [[]])], [block_device_operations_release_void_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_release_void_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([block_device_operations_revalidate_disk], [
		#include <linux/blkdev.h>

		int blk_revalidate_disk(struct gendisk *disk) {
			(void) disk;
			return(0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.revalidate_disk	= blk_revalidate_disk,
		};
	], [], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>

		int blk_revalidate_disk(struct gendisk *disk) {
			(void) disk;
			return(0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.revalidate_disk	= blk_revalidate_disk,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [block_device_operations_revalidate_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_revalidate_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>

		int blk_revalidate_disk(struct gendisk *disk) {
			(void) disk;
			return(0);
		}

		static const struct block_device_operations
		    bops __attribute__ ((unused)) = {
			.revalidate_disk	= blk_revalidate_disk,
		};
	]], [[]], [[]])], [block_device_operations_revalidate_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_revalidate_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_REQ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_failfast_mask], [
		#include <linux/bio.h>
	], [
		int flags __attribute__ ((unused));
		flags = REQ_FAILFAST_MASK;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_FAILFAST_MASK;
	]],
	    [["Dual BSD/GPL"]])], [req_failfast_mask])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_failfast_mask], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_FAILFAST_MASK;
	]], [[]])], [req_failfast_mask_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_failfast_mask_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_discard], [
		#include <linux/bio.h>
	], [
		int flags __attribute__ ((unused));
		flags = REQ_DISCARD;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_DISCARD;
	]],
	    [["Dual BSD/GPL"]])], [req_discard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_discard], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_DISCARD;
	]], [[]])], [req_discard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_discard_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_flush], [
		#include <linux/bio.h>
	], [
		int flags __attribute__ ((unused));
		flags = REQ_FLUSH;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_FLUSH;
	]],
	    [["Dual BSD/GPL"]])], [req_flush])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_flush], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_FLUSH;
	]], [[]])], [req_flush_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_flush_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_preflush], [
		#include <linux/bio.h>
	], [
		int flags __attribute__ ((unused));
		flags = REQ_PREFLUSH;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_PREFLUSH;
	]],
	    [["Dual BSD/GPL"]])], [req_preflush])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_preflush], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		int flags __attribute__ ((unused));
		flags = REQ_PREFLUSH;
	]], [[]])], [req_preflush_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_preflush_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_OPS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_op_discard], [
		#include <linux/blk_types.h>
	], [
		int op __attribute__ ((unused)) = REQ_OP_DISCARD;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_DISCARD;
	]],
	    [["Dual BSD/GPL"]])], [req_op_discard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_discard], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_DISCARD;
	]], [[]])], [req_op_discard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_discard_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_op_secure_erase], [
		#include <linux/blk_types.h>
	], [
		int op __attribute__ ((unused)) = REQ_OP_SECURE_ERASE;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_SECURE_ERASE;
	]],
	    [["Dual BSD/GPL"]])], [req_op_secure_erase])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_secure_erase], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_SECURE_ERASE;
	]], [[]])], [req_op_secure_erase_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_secure_erase_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([req_op_flush], [
		#include <linux/blk_types.h>
	], [
		int op __attribute__ ((unused)) = REQ_OP_FLUSH;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_FLUSH;
	]],
	    [["Dual BSD/GPL"]])], [req_op_flush])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_flush], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk_types.h>
	]], [[
		int op __attribute__ ((unused)) = REQ_OP_FLUSH;
	]], [[]])], [req_op_flush_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([req_op_flush_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bi_opf], [
		#include <linux/bio.h>
	], [
		struct bio bio __attribute__ ((unused));
		bio.bi_opf = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio bio __attribute__ ((unused));
		bio.bi_opf = 0;
	]],
	    [["Dual BSD/GPL"]])], [bio_bi_opf])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bi_opf], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio bio __attribute__ ((unused));
		bio.bi_opf = 0;
	]], [[]])], [bio_bi_opf_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bi_opf_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_set_op_attrs], [
		#include <linux/bio.h>
	], [
		struct bio *bio __attribute__ ((unused)) = NULL;
		bio_set_op_attrs(bio, 0, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio *bio __attribute__ ((unused)) = NULL;
		bio_set_op_attrs(bio, 0, 0);
	]],
	    [["Dual BSD/GPL"]])], [bio_set_op_attrs])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_op_attrs], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio *bio __attribute__ ((unused)) = NULL;
		bio_set_op_attrs(bio, 0, 0);
	]], [[]])], [bio_set_op_attrs_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_op_attrs_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_SET_DEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_set_dev], [
		#include <linux/bio.h>
		#include <linux/fs.h>
	], [
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		bio_set_dev(bio, bdev);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		bio_set_dev(bio, bdev);
	]],
	    [["Dual BSD/GPL"]])], [bio_set_dev])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_dev], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		bio_set_dev(bio, bdev);
	]], [[ZFS_META_LICENSE]])], [bio_set_dev_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_dev_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_END_IO_T_ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_end_io_t_args], [
		#include <linux/bio.h>
		void wanted_end_io(struct bio *bio) { return; }
		bio_end_io_t *end_io __attribute__ ((unused)) = wanted_end_io;
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
		void wanted_end_io(struct bio *bio) { return; }
		bio_end_io_t *end_io __attribute__ ((unused)) = wanted_end_io;
	]], [[]],
	    [["Dual BSD/GPL"]])], [bio_end_io_t_args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_end_io_t_args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
		void wanted_end_io(struct bio *bio) { return; }
		bio_end_io_t *end_io __attribute__ ((unused)) = wanted_end_io;
	]], [[]], [[]])], [bio_end_io_t_args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_end_io_t_args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_BI_STATUS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bi_status], [
		#include <linux/bio.h>
	], [
		struct bio bio __attribute__ ((unused));
		blk_status_t status __attribute__ ((unused)) = BLK_STS_OK;
		bio.bi_status = status;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio bio __attribute__ ((unused));
		blk_status_t status __attribute__ ((unused)) = BLK_STS_OK;
		bio.bi_status = status;
	]],
	    [["Dual BSD/GPL"]])], [bio_bi_status])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bi_status], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio bio __attribute__ ((unused));
		blk_status_t status __attribute__ ((unused)) = BLK_STS_OK;
		bio.bi_status = status;
	]], [[]])], [bio_bi_status_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bi_status_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_BVEC_ITER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bvec_iter], [
		#include <linux/bio.h>
	], [
		struct bio bio;
		bio.bi_iter.bi_sector = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio bio;
		bio.bi_iter.bi_sector = 0;
	]],
	    [["Dual BSD/GPL"]])], [bio_bvec_iter])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bvec_iter], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio bio;
		bio.bi_iter.bi_sector = 0;
	]], [[]])], [bio_bvec_iter_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bvec_iter_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_SUBMIT_BIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([submit_bio], [
		#include <linux/bio.h>
	], [
		struct bio *bio = NULL;
		(void) submit_bio(bio);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		struct bio *bio = NULL;
		(void) submit_bio(bio);
	]],
	    [["Dual BSD/GPL"]])], [submit_bio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([submit_bio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		struct bio *bio = NULL;
		(void) submit_bio(bio);
	]], [[]])], [submit_bio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([submit_bio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_CURRENT_BIO_LIST
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([current_bio_list], [
		#include <linux/sched.h>
	], [
		current->bio_list = (struct bio_list *) NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
	]], [[
		current->bio_list = (struct bio_list *) NULL;
	]],
	    [["Dual BSD/GPL"]])], [current_bio_list])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([current_bio_list], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
	]], [[
		current->bio_list = (struct bio_list *) NULL;
	]], [[]])], [current_bio_list_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([current_bio_list_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKG_TRYGET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkg_tryget], [
		#include <linux/blk-cgroup.h>
		#include <linux/bio.h>
		#include <linux/fs.h>
	], [
		struct blkcg_gq blkg __attribute__ ((unused)) = {};
		bool rc __attribute__ ((unused));
		rc = blkg_tryget(&blkg);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk-cgroup.h>
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		struct blkcg_gq blkg __attribute__ ((unused)) = {};
		bool rc __attribute__ ((unused));
		rc = blkg_tryget(&blkg);
	]],
	    [["Dual BSD/GPL"]])], [blkg_tryget])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkg_tryget], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk-cgroup.h>
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		struct blkcg_gq blkg __attribute__ ((unused)) = {};
		bool rc __attribute__ ((unused));
		rc = blkg_tryget(&blkg);
	]], [[ZFS_META_LICENSE]])], [blkg_tryget_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkg_tryget_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_BDEV_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bdev_disk], [
		#include <linux/blk_types.h>
		#include <linux/blkdev.h>
	], [
		struct bio *b = NULL;
		struct gendisk *d = b->bi_bdev->bd_disk;
		blk_register_queue(d);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk_types.h>
		#include <linux/blkdev.h>
	]], [[
		struct bio *b = NULL;
		struct gendisk *d = b->bi_bdev->bd_disk;
		blk_register_queue(d);
	]],
	    [["Dual BSD/GPL"]])], [bio_bdev_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bdev_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk_types.h>
		#include <linux/blkdev.h>
	]], [[
		struct bio *b = NULL;
		struct gendisk *d = b->bi_bdev->bd_disk;
		blk_register_queue(d);
	]], [[]])], [bio_bdev_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bdev_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BDEV_SUBMIT_BIO_RETURNS_VOID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_bdev_submit_bio_void], [
		#include <linux/blkdev.h>
	], [
		struct block_device_operations *bdev = NULL;
		__attribute__((unused)) void(*f)(struct bio *) = bdev->submit_bio;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device_operations *bdev = NULL;
		__attribute__((unused)) void(*f)(struct bio *) = bdev->submit_bio;
	]],
	    [["Dual BSD/GPL"]])], [bio_bdev_submit_bio_void])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bdev_submit_bio_void], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device_operations *bdev = NULL;
		__attribute__((unused)) void(*f)(struct bio *) = bdev->submit_bio;
	]], [[]])], [bio_bdev_submit_bio_void_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_bdev_submit_bio_void_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_SET_DEV_MACRO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_set_dev_macro], [
		#include <linux/bio.h>
		#include <linux/fs.h>
	], [
		#ifndef bio_set_dev
		#error Not a macro
		#endif
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		#ifndef bio_set_dev
		#error Not a macro
		#endif
	]],
	    [["Dual BSD/GPL"]])], [bio_set_dev_macro])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_dev_macro], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
		#include <linux/fs.h>
	]], [[
		#ifndef bio_set_dev
		#error Not a macro
		#endif
	]], [[ZFS_META_LICENSE]])], [bio_set_dev_macro_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_set_dev_macro_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_CGROUP_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_cgroup_header], [
		#include <linux/blk-cgroup.h>
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk-cgroup.h>
	]], [[]],
	    [["Dual BSD/GPL"]])], [blk_cgroup_header])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_cgroup_header], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk-cgroup.h>
	]], [[]], [[]])], [blk_cgroup_header_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_cgroup_header_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_ALLOC_4ARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_alloc_4arg], [
		#include <linux/bio.h>
	], [
		gfp_t gfp_mask = 0;
		unsigned short nr_iovecs = 0;
		struct block_device *bdev = NULL;
		unsigned int opf = 0;

		struct bio *__attribute__((unused)) allocated = bio_alloc(bdev, nr_iovecs, opf, gfp_mask);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		gfp_t gfp_mask = 0;
		unsigned short nr_iovecs = 0;
		struct block_device *bdev = NULL;
		unsigned int opf = 0;

		struct bio *__attribute__((unused)) allocated = bio_alloc(bdev, nr_iovecs, opf, gfp_mask);
	]],
	    [["Dual BSD/GPL"]])], [bio_alloc_4arg])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_alloc_4arg], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		gfp_t gfp_mask = 0;
		unsigned short nr_iovecs = 0;
		struct block_device *bdev = NULL;
		unsigned int opf = 0;

		struct bio *__attribute__((unused)) allocated = bio_alloc(bdev, nr_iovecs, opf, gfp_mask);
	]], [[]])], [bio_alloc_4arg_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_alloc_4arg_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_GET_BY_PATH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_get_by_path], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		const char *path = "path";
		fmode_t mode = 0;
		void *holder = NULL;

		bdev = blkdev_get_by_path(path, mode, holder);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		const char *path = "path";
		fmode_t mode = 0;
		void *holder = NULL;

		bdev = blkdev_get_by_path(path, mode, holder);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_get_by_path])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_get_by_path], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		const char *path = "path";
		fmode_t mode = 0;
		void *holder = NULL;

		bdev = blkdev_get_by_path(path, mode, holder);
	]], [[]])], [blkdev_get_by_path_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_get_by_path_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_PUT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_put], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		fmode_t mode = 0;

		blkdev_put(bdev, mode);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		fmode_t mode = 0;

		blkdev_put(bdev, mode);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_put])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_put], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		fmode_t mode = 0;

		blkdev_put(bdev, mode);
	]], [[]])], [blkdev_put_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_put_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_REREAD_PART
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_reread_part], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		int error;

		error = blkdev_reread_part(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		int error;

		error = blkdev_reread_part(bdev);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_reread_part])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_reread_part], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		int error;

		error = blkdev_reread_part(bdev);
	]], [[]])], [blkdev_reread_part_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_reread_part_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_INVALIDATE_BDEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([invalidate_bdev], [
		#include <linux/buffer_head.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		invalidate_bdev(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/buffer_head.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		invalidate_bdev(bdev);
	]],
	    [["Dual BSD/GPL"]])], [invalidate_bdev])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([invalidate_bdev], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/buffer_head.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		invalidate_bdev(bdev);
	]], [[]])], [invalidate_bdev_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([invalidate_bdev_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_LOOKUP_BDEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lookup_bdev_devt], [
		#include <linux/blkdev.h>
	], [
		int error __attribute__ ((unused));
		const char path[] = "/example/path";
		dev_t dev;

		error = lookup_bdev(path, &dev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		int error __attribute__ ((unused));
		const char path[] = "/example/path";
		dev_t dev;

		error = lookup_bdev(path, &dev);
	]],
	    [["Dual BSD/GPL"]])], [lookup_bdev_devt])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_devt], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		int error __attribute__ ((unused));
		const char path[] = "/example/path";
		dev_t dev;

		error = lookup_bdev(path, &dev);
	]], [[]])], [lookup_bdev_devt_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_devt_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lookup_bdev_1arg], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path);
	]],
	    [["Dual BSD/GPL"]])], [lookup_bdev_1arg])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_1arg], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path);
	]], [[]])], [lookup_bdev_1arg_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_1arg_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lookup_bdev_mode], [
		#include <linux/fs.h>
	], [
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path, FMODE_READ);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path, FMODE_READ);
	]],
	    [["Dual BSD/GPL"]])], [lookup_bdev_mode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_mode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused));
		const char path[] = "/example/path";

		bdev = lookup_bdev(path, FMODE_READ);
	]], [[]])], [lookup_bdev_mode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_bdev_mode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_LOGICAL_BLOCK_SIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_logical_block_size], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_logical_block_size(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_logical_block_size(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_logical_block_size])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_logical_block_size], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_logical_block_size(bdev);
	]], [[]])], [bdev_logical_block_size_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_logical_block_size_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_PHYSICAL_BLOCK_SIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_physical_block_size], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_physical_block_size(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_physical_block_size(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_physical_block_size])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_physical_block_size], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		bdev_physical_block_size(bdev);
	]], [[]])], [bdev_physical_block_size_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_physical_block_size_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_CHECK_DISK_CHANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([check_disk_change], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		bool error;

		error = check_disk_change(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		bool error;

		error = check_disk_change(bdev);
	]],
	    [["Dual BSD/GPL"]])], [check_disk_change])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([check_disk_change], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		bool error;

		error = check_disk_change(bdev);
	]], [[]])], [check_disk_change_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([check_disk_change_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_CHECK_MEDIA_CHANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_check_media_change], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		int error;

		error = bdev_check_media_change(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		int error;

		error = bdev_check_media_change(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_check_media_change])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_check_media_change], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		int error;

		error = bdev_check_media_change(bdev);
	]], [[]])], [bdev_check_media_change_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_check_media_change_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_WHOLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_whole], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		bdev = bdev_whole(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		bdev = bdev_whole(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_whole])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_whole], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		bdev = bdev_whole(bdev);
	]], [[]])], [bdev_whole_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_whole_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEVNAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdevname], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		char path[BDEVNAME_SIZE];

		(void) bdevname(bdev, path);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		char path[BDEVNAME_SIZE];

		(void) bdevname(bdev, path);
	]],
	    [["Dual BSD/GPL"]])], [bdevname])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdevname], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		char path[BDEVNAME_SIZE];

		(void) bdevname(bdev, path);
	]], [[]])], [bdevname_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdevname_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_ISSUE_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_issue_secure_erase], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_secure_erase(bdev,
		    sector, nr_sects, GFP_KERNEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_secure_erase(bdev,
		    sector, nr_sects, GFP_KERNEL);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_issue_secure_erase])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_issue_secure_erase], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_secure_erase(bdev,
		    sector, nr_sects, GFP_KERNEL);
	]], [[]])], [blkdev_issue_secure_erase_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_issue_secure_erase_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blkdev_issue_discard_flags], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		unsigned long flags = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_discard(bdev,
		    sector, nr_sects, GFP_KERNEL, flags);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		unsigned long flags = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_discard(bdev,
		    sector, nr_sects, GFP_KERNEL, flags);
	]],
	    [["Dual BSD/GPL"]])], [blkdev_issue_discard_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_issue_discard_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		sector_t sector = 0;
		sector_t nr_sects = 0;
		unsigned long flags = 0;
		int error __attribute__ ((unused));

		error = blkdev_issue_discard(bdev,
		    sector, nr_sects, GFP_KERNEL, flags);
	]], [[]])], [blkdev_issue_discard_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blkdev_issue_discard_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_BDEV_KOBJ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_kobj], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
		#include <linux/kobject.h>
	], [
		struct block_device *bdev = NULL;
		struct kobject *disk_kobj;
		disk_kobj = bdev_kobj(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
		#include <linux/kobject.h>
	]], [[
		struct block_device *bdev = NULL;
		struct kobject *disk_kobj;
		disk_kobj = bdev_kobj(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_kobj])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_kobj], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
		#include <linux/kobject.h>
	]], [[
		struct block_device *bdev = NULL;
		struct kobject *disk_kobj;
		disk_kobj = bdev_kobj(bdev);
	]], [[]])], [bdev_kobj_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_kobj_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLKDEV_PART_TO_DEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([part_to_dev], [
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	], [
		struct hd_struct *p = NULL;
		struct device *pdev;
		pdev = part_to_dev(p);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct hd_struct *p = NULL;
		struct device *pdev;
		pdev = part_to_dev(p);
	]],
	    [["Dual BSD/GPL"]])], [part_to_dev])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([part_to_dev], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/blkdev.h>
	]], [[
		struct hd_struct *p = NULL;
		struct device *pdev;
		pdev = part_to_dev(p);
	]], [[]])], [part_to_dev_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([part_to_dev_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_PLUG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_plug], [
		#include <linux/blkdev.h>
	], [
		struct blk_plug plug __attribute__ ((unused));

		blk_start_plug(&plug);
		blk_finish_plug(&plug);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct blk_plug plug __attribute__ ((unused));

		blk_start_plug(&plug);
		blk_finish_plug(&plug);
	]],
	    [["Dual BSD/GPL"]])], [blk_plug])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_plug], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct blk_plug plug __attribute__ ((unused));

		blk_start_plug(&plug);
		blk_finish_plug(&plug);
	]], [[]])], [blk_plug_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_plug_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_BDI
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_bdi], [
		#include <linux/blkdev.h>
	], [
		struct request_queue q;
		struct backing_dev_info bdi;
		q.backing_dev_info = &bdi;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue q;
		struct backing_dev_info bdi;
		q.backing_dev_info = &bdi;
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_bdi])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_bdi], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue q;
		struct backing_dev_info bdi;
		q.backing_dev_info = &bdi;
	]], [[]])], [blk_queue_bdi_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_bdi_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_UPDATE_READAHEAD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_update_readahead], [
		#include <linux/blkdev.h>
	], [
		struct request_queue q;
		blk_queue_update_readahead(&q);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue q;
		blk_queue_update_readahead(&q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_update_readahead])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_update_readahead], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue q;
		blk_queue_update_readahead(&q);
	]], [[]])], [blk_queue_update_readahead_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_update_readahead_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([disk_update_readahead], [
		#include <linux/blkdev.h>
	], [
		struct gendisk disk;
		disk_update_readahead(&disk);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk disk;
		disk_update_readahead(&disk);
	]],
	    [["Dual BSD/GPL"]])], [disk_update_readahead])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([disk_update_readahead], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk disk;
		disk_update_readahead(&disk);
	]], [[]])], [disk_update_readahead_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([disk_update_readahead_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_DISCARD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_max_discard_sectors], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_discard_sectors(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_discard_sectors(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_max_discard_sectors])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_max_discard_sectors], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_discard_sectors(bdev);
	]], [[]])], [bdev_max_discard_sectors_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_max_discard_sectors_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_discard], [
		#include <linux/blkdev.h>
	], [
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_discard(q);
	], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_discard(q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_discard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_discard], [yes], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_discard(q);
	]], [[]])], [blk_queue_discard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_discard_license], [yes], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_max_secure_erase_sectors], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_secure_erase_sectors(bdev);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_secure_erase_sectors(bdev);
	]],
	    [["Dual BSD/GPL"]])], [bdev_max_secure_erase_sectors])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_max_secure_erase_sectors], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev __attribute__ ((unused)) = NULL;
		unsigned int error __attribute__ ((unused));

		error = bdev_max_secure_erase_sectors(bdev);
	]], [[]])], [bdev_max_secure_erase_sectors_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_max_secure_erase_sectors_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_secure_erase], [
		#include <linux/blkdev.h>
	], [
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secure_erase(q);
	], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secure_erase(q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_secure_erase])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_secure_erase], [yes], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secure_erase(q);
	]], [[]])], [blk_queue_secure_erase_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_secure_erase_license], [yes], [-Wframe-larger-than=8192])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_secdiscard], [
		#include <linux/blkdev.h>
	], [
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secdiscard(q);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secdiscard(q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_secdiscard])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_secdiscard], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue r;
		struct request_queue *q = &r;
		int value __attribute__ ((unused));
		memset(q, 0, sizeof(r));
		value = blk_queue_secdiscard(q);
	]], [[]])], [blk_queue_secdiscard_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_secdiscard_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLAG_SET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_flag_set], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	], [
		struct request_queue *q = NULL;
		blk_queue_flag_set(0, q);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q = NULL;
		blk_queue_flag_set(0, q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_flag_set])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flag_set], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q = NULL;
		blk_queue_flag_set(0, q);
	]], [[]])], [blk_queue_flag_set_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flag_set_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLAG_CLEAR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_flag_clear], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	], [
		struct request_queue *q = NULL;
		blk_queue_flag_clear(0, q);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q = NULL;
		blk_queue_flag_clear(0, q);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_flag_clear])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flag_clear], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q = NULL;
		blk_queue_flag_clear(0, q);
	]], [[]])], [blk_queue_flag_clear_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flag_clear_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_FLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_flush], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_flush(q, REQ_FLUSH);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_flush(q, REQ_FLUSH);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_flush])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flush], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_flush(q, REQ_FLUSH);
	]], [[ZFS_META_LICENSE]])], [blk_queue_flush_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_flush_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_write_cache], [
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		blk_queue_write_cache(q, true, true);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		blk_queue_write_cache(q, true, true);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_write_cache])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_write_cache], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kernel.h>
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		blk_queue_write_cache(q, true, true);
	]], [[ZFS_META_LICENSE]])], [blk_queue_write_cache_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_write_cache_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_MAX_HW_SECTORS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_max_hw_sectors], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_hw_sectors(q, BLK_SAFE_MAX_SECTORS);
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_hw_sectors(q, BLK_SAFE_MAX_SECTORS);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_max_hw_sectors])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_max_hw_sectors], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_hw_sectors(q, BLK_SAFE_MAX_SECTORS);
	]], [[]])], [blk_queue_max_hw_sectors_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_max_hw_sectors_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_QUEUE_MAX_SEGMENTS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_queue_max_segments], [
		#include <linux/blkdev.h>
	], [
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_segments(q, BLK_MAX_SEGMENTS);
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_segments(q, BLK_MAX_SEGMENTS);
	]],
	    [["Dual BSD/GPL"]])], [blk_queue_max_segments])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_max_segments], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct request_queue *q __attribute__ ((unused)) = NULL;
		(void) blk_queue_max_segments(q, BLK_MAX_SEGMENTS);
	]], [[]])], [blk_queue_max_segments_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_queue_max_segments_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BLK_MQ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_mq], [
		#include <linux/blk-mq.h>
	], [
		struct blk_mq_tag_set tag_set __attribute__ ((unused)) = {0};
		(void) blk_mq_alloc_tag_set(&tag_set);
		return BLK_STS_OK;
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blk-mq.h>
	]], [[
		struct blk_mq_tag_set tag_set __attribute__ ((unused)) = {0};
		(void) blk_mq_alloc_tag_set(&tag_set);
		return BLK_STS_OK;
	]],
	    [["Dual BSD/GPL"]])], [blk_mq])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_mq], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blk-mq.h>
	]], [[
		struct blk_mq_tag_set tag_set __attribute__ ((unused)) = {0};
		(void) blk_mq_alloc_tag_set(&tag_set);
		return BLK_STS_OK;
	]], [[]])], [blk_mq_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_mq_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENHD_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([genhd_fl_ext_devt], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_EXT_DEVT;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_EXT_DEVT;
	]],
	    [["Dual BSD/GPL"]])], [genhd_fl_ext_devt])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_ext_devt], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_EXT_DEVT;
	]], [[]])], [genhd_fl_ext_devt_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_ext_devt_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([genhd_fl_no_part], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART;
	]],
	    [["Dual BSD/GPL"]])], [genhd_fl_no_part])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_no_part], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART;
	]], [[]])], [genhd_fl_no_part_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_no_part_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([genhd_fl_no_part_scan], [
		#include <linux/blkdev.h>
	], [
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART_SCAN;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART_SCAN;
	]],
	    [["Dual BSD/GPL"]])], [genhd_fl_no_part_scan])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_no_part_scan], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		int flags __attribute__ ((unused)) = GENHD_FL_NO_PART_SCAN;
	]], [[]])], [genhd_fl_no_part_scan_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([genhd_fl_no_part_scan_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_REVALIDATE_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([revalidate_disk_size], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		(void) revalidate_disk_size(disk, false);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		(void) revalidate_disk_size(disk, false);
	]],
	    [["Dual BSD/GPL"]])], [revalidate_disk_size])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([revalidate_disk_size], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		(void) revalidate_disk_size(disk, false);
	]], [[]])], [revalidate_disk_size_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([revalidate_disk_size_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([revalidate_disk], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		(void) revalidate_disk(disk);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		(void) revalidate_disk(disk);
	]],
	    [["Dual BSD/GPL"]])], [revalidate_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([revalidate_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		(void) revalidate_disk(disk);
	]], [[]])], [revalidate_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([revalidate_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GET_DISK_RO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([get_disk_ro], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk __attribute__ ((unused)) = NULL;
		(void) get_disk_ro(disk);
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk __attribute__ ((unused)) = NULL;
		(void) get_disk_ro(disk);
	]],
	    [["Dual BSD/GPL"]])], [get_disk_ro])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([get_disk_ro], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk __attribute__ ((unused)) = NULL;
		(void) get_disk_ro(disk);
	]], [[]])], [get_disk_ro_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([get_disk_ro_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_READLINK_GLOBAL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_readlink_global], [
		#include <linux/fs.h>
	], [
		int i __attribute__ ((unused));
		i = generic_readlink(NULL, NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		int i __attribute__ ((unused));
		i = generic_readlink(NULL, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [generic_readlink_global])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_readlink_global], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		int i __attribute__ ((unused));
		i = generic_readlink(NULL, NULL, 0);
	]], [[]])], [generic_readlink_global_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_readlink_global_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_DISCARD_GRANULARITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([discard_granularity], [
		#include <linux/blkdev.h>
	], [
		struct queue_limits ql __attribute__ ((unused));
		ql.discard_granularity = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct queue_limits ql __attribute__ ((unused));
		ql.discard_granularity = 0;
	]],
	    [["Dual BSD/GPL"]])], [discard_granularity])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([discard_granularity], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct queue_limits ql __attribute__ ((unused));
		ql.discard_granularity = 0;
	]], [[]])], [discard_granularity_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([discard_granularity_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_OWNER_OR_CAPABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_owner_or_capable], [
		#include <linux/fs.h>
	], [
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(ip);
	]],
	    [["Dual BSD/GPL"]])], [inode_owner_or_capable])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(ip);
	]], [[]])], [inode_owner_or_capable_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_owner_or_capable_userns], [
		#include <linux/fs.h>
	], [
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&init_user_ns, ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&init_user_ns, ip);
	]],
	    [["Dual BSD/GPL"]])], [inode_owner_or_capable_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&init_user_ns, ip);
	]], [[]])], [inode_owner_or_capable_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_owner_or_capable_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/mnt_idmapping.h>
	], [
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&nop_mnt_idmap, ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/mnt_idmapping.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&nop_mnt_idmap, ip);
	]],
	    [["Dual BSD/GPL"]])], [inode_owner_or_capable_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/mnt_idmapping.h>
	]], [[
		struct inode *ip = NULL;
		(void) inode_owner_or_capable(&nop_mnt_idmap, ip);
	]], [[]])], [inode_owner_or_capable_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_owner_or_capable_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONST_XATTR_HANDLER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([const_xattr_handler], [
		#include <linux/fs.h>
		#include <linux/xattr.h>

		const struct xattr_handler xattr_test_handler = {
			.prefix	= "test",
			.get	= NULL,
			.set	= NULL,
		};

		const struct xattr_handler *xattr_handlers[] = {
			&xattr_test_handler,
		};

		const struct super_block sb __attribute__ ((unused)) = {
			.s_xattr = xattr_handlers,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/xattr.h>

		const struct xattr_handler xattr_test_handler = {
			.prefix	= "test",
			.get	= NULL,
			.set	= NULL,
		};

		const struct xattr_handler *xattr_handlers[] = {
			&xattr_test_handler,
		};

		const struct super_block sb __attribute__ ((unused)) = {
			.s_xattr = xattr_handlers,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [const_xattr_handler])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([const_xattr_handler], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/xattr.h>

		const struct xattr_handler xattr_test_handler = {
			.prefix	= "test",
			.get	= NULL,
			.set	= NULL,
		};

		const struct xattr_handler *xattr_handlers[] = {
			&xattr_test_handler,
		};

		const struct super_block sb __attribute__ ((unused)) = {
			.s_xattr = xattr_handlers,
		};
	]], [[]], [[]])], [const_xattr_handler_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([const_xattr_handler_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR_HANDLER_NAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_name], [
		#include <linux/xattr.h>

		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.name = XATTR_NAME_POSIX_ACL_ACCESS,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.name = XATTR_NAME_POSIX_ACL_ACCESS,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_name])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_name], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.name = XATTR_NAME_POSIX_ACL_ACCESS,
		};
	]], [[]], [[]])], [xattr_handler_name_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_name_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR_HANDLER_GET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry_inode], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_get_dentry_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]], [[]])], [xattr_handler_get_dentry_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_get_xattr_handler], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_get_xattr_handler])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_xattr_handler], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    void *buffer, size_t size) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]], [[]])], [xattr_handler_get_xattr_handler_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_xattr_handler_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry], [
		#include <linux/xattr.h>

		int get(struct dentry *dentry, const char *name,
		    void *buffer, size_t size, int handler_flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int get(struct dentry *dentry, const char *name,
		    void *buffer, size_t size, int handler_flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_get_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int get(struct dentry *dentry, const char *name,
		    void *buffer, size_t size, int handler_flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]], [[]])], [xattr_handler_get_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_get_dentry_inode_flags], [
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer,
		    size_t size, int flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer,
		    size_t size, int flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_get_dentry_inode_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_inode_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int get(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, void *buffer,
		    size_t size, int flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.get = get,
		};
	]], [[]], [[]])], [xattr_handler_get_dentry_inode_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_get_dentry_inode_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR_HANDLER_SET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_mnt_idmap], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct mnt_idmap *idmap,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct mnt_idmap *idmap,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct mnt_idmap *idmap,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_userns], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct user_namespace *mnt_userns,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct user_namespace *mnt_userns,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
			struct user_namespace *mnt_userns,
			struct dentry *dentry, struct inode *inode,
			const char *name, const void *buffer,
			size_t size, int flags)
			{ return 0; }
		static const struct xattr_handler
			xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_dentry_inode], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, const void *buffer,
		    size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, const void *buffer,
		    size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_dentry_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_dentry_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, struct inode *inode,
		    const char *name, const void *buffer,
		    size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_dentry_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_dentry_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_xattr_handler], [
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_xattr_handler])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_xattr_handler], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(const struct xattr_handler *handler,
		    struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags)
		    { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_xattr_handler_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_xattr_handler_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_set_dentry], [
		#include <linux/xattr.h>

		int set(struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		int set(struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_set_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		int set(struct dentry *dentry, const char *name,
		    const void *buffer, size_t size, int flags,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.set = set,
		};
	]], [[]], [[]])], [xattr_handler_set_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_set_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_XATTR_HANDLER_LIST
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_list_simple], [
		#include <linux/xattr.h>

		bool list(struct dentry *dentry) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		bool list(struct dentry *dentry) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_list_simple])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_simple], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		bool list(struct dentry *dentry) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]], [[]])], [xattr_handler_list_simple_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_simple_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_list_xattr_handler], [
		#include <linux/xattr.h>

		size_t list(const struct xattr_handler *handler,
		    struct dentry *dentry, char *list, size_t list_size,
		    const char *name, size_t name_len) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		size_t list(const struct xattr_handler *handler,
		    struct dentry *dentry, char *list, size_t list_size,
		    const char *name, size_t name_len) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_list_xattr_handler])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_xattr_handler], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		size_t list(const struct xattr_handler *handler,
		    struct dentry *dentry, char *list, size_t list_size,
		    const char *name, size_t name_len) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]], [[]])], [xattr_handler_list_xattr_handler_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_xattr_handler_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([xattr_handler_list_dentry], [
		#include <linux/xattr.h>

		size_t list(struct dentry *dentry,
		    char *list, size_t list_size,
		    const char *name, size_t name_len,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/xattr.h>

		size_t list(struct dentry *dentry,
		    char *list, size_t list_size,
		    const char *name, size_t name_len,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [xattr_handler_list_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/xattr.h>

		size_t list(struct dentry *dentry,
		    char *list, size_t list_size,
		    const char *name, size_t name_len,
		    int handler_flags) { return 0; }
		static const struct xattr_handler
		    xops __attribute__ ((unused)) = {
			.list = list,
		};
	]], [[]], [[]])], [xattr_handler_list_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([xattr_handler_list_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_FROM_XATTR_USERNS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_from_xattr_userns], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl_xattr.h>
	], [
		posix_acl_from_xattr(&init_user_ns, NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl_xattr.h>
	]], [[
		posix_acl_from_xattr(&init_user_ns, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_from_xattr_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_from_xattr_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl_xattr.h>
	]], [[
		posix_acl_from_xattr(&init_user_ns, NULL, 0);
	]], [[]])], [posix_acl_from_xattr_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_from_xattr_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_SETXATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([have_generic_setxattr], [
		#include <linux/fs.h>
		#include <linux/xattr.h>

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setxattr = generic_setxattr
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/xattr.h>

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setxattr = generic_setxattr
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [have_generic_setxattr])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([have_generic_setxattr], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/xattr.h>

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setxattr = generic_setxattr
		};
	]], [[]], [[]])], [have_generic_setxattr_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([have_generic_setxattr_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ACL
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_RELEASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_release], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		struct posix_acl *tmp = posix_acl_alloc(1, 0);
		posix_acl_release(tmp);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct posix_acl *tmp = posix_acl_alloc(1, 0);
		posix_acl_release(tmp);
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_release])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_release], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct posix_acl *tmp = posix_acl_alloc(1, 0);
		posix_acl_release(tmp);
	]], [[ZFS_META_LICENSE]])], [posix_acl_release_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_release_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SET_CACHED_ACL_USABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([set_cached_acl], [
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		struct inode *ip = NULL;
		struct posix_acl *acl = posix_acl_alloc(1, 0);
		set_cached_acl(ip, ACL_TYPE_ACCESS, acl);
		forget_cached_acl(ip, ACL_TYPE_ACCESS);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct inode *ip = NULL;
		struct posix_acl *acl = posix_acl_alloc(1, 0);
		set_cached_acl(ip, ACL_TYPE_ACCESS, acl);
		forget_cached_acl(ip, ACL_TYPE_ACCESS);
	]],
	    [["Dual BSD/GPL"]])], [set_cached_acl])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_cached_acl], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct inode *ip = NULL;
		struct posix_acl *acl = posix_acl_alloc(1, 0);
		set_cached_acl(ip, ACL_TYPE_ACCESS, acl);
		forget_cached_acl(ip, ACL_TYPE_ACCESS);
	]], [[ZFS_META_LICENSE]])], [set_cached_acl_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_cached_acl_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_CHMOD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_chmod], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		posix_acl_chmod(NULL, 0, 0)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		posix_acl_chmod(NULL, 0, 0)
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_chmod])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_chmod], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		posix_acl_chmod(NULL, 0, 0)
	]], [[]])], [posix_acl_chmod_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_chmod_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([__posix_acl_chmod], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		__posix_acl_chmod(NULL, 0, 0)
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		__posix_acl_chmod(NULL, 0, 0)
	]],
	    [["Dual BSD/GPL"]])], [__posix_acl_chmod])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__posix_acl_chmod], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		__posix_acl_chmod(NULL, 0, 0)
	]], [[]])], [__posix_acl_chmod_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__posix_acl_chmod_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_EQUIV_MODE_WANTS_UMODE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_equiv_mode], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		umode_t tmp;
		posix_acl_equiv_mode(NULL, &tmp);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		umode_t tmp;
		posix_acl_equiv_mode(NULL, &tmp);
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_equiv_mode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_equiv_mode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		umode_t tmp;
		posix_acl_equiv_mode(NULL, &tmp);
	]], [[]])], [posix_acl_equiv_mode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_equiv_mode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_POSIX_ACL_VALID_WITH_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([posix_acl_valid_with_ns], [
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	], [
		struct user_namespace *user_ns = NULL;
		const struct posix_acl *acl = NULL;
		int error;

		error = posix_acl_valid(user_ns, acl);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct user_namespace *user_ns = NULL;
		const struct posix_acl *acl = NULL;
		int error;

		error = posix_acl_valid(user_ns, acl);
	]],
	    [["Dual BSD/GPL"]])], [posix_acl_valid_with_ns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_valid_with_ns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/posix_acl.h>
	]], [[
		struct user_namespace *user_ns = NULL;
		const struct posix_acl *acl = NULL;
		int error;

		error = posix_acl_valid(user_ns, acl);
	]], [[]])], [posix_acl_valid_with_ns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([posix_acl_valid_with_ns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_OPERATIONS_GET_ACL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_acl], [
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type)
		    { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type)
		    { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_acl])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_acl], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type)
		    { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_get_acl_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_acl_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_acl_rcu], [
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_acl_rcu])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_acl_rcu], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		struct posix_acl *get_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_acl = get_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_get_acl_rcu_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_acl_rcu_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_inode_acl], [
		#include <linux/fs.h>

		struct posix_acl *get_inode_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_inode_acl = get_inode_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		struct posix_acl *get_inode_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_inode_acl = get_inode_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_inode_acl])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_inode_acl], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		struct posix_acl *get_inode_acl_fn(struct inode *inode, int type,
		    bool rcu) { return NULL; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.get_inode_acl = get_inode_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_get_inode_acl_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_inode_acl_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_OPERATIONS_SET_ACL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_set_acl_mnt_idmap_dentry], [
		#include <linux/fs.h>

		int set_acl_fn(struct mnt_idmap *idmap,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int set_acl_fn(struct mnt_idmap *idmap,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_set_acl_mnt_idmap_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_mnt_idmap_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int set_acl_fn(struct mnt_idmap *idmap,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_set_acl_mnt_idmap_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_mnt_idmap_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_set_acl_userns_dentry], [
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_set_acl_userns_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_userns_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct dentry *dent, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_set_acl_userns_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_userns_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_set_acl_userns], [
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_set_acl_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int set_acl_fn(struct user_namespace *userns,
		    struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_set_acl_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_set_acl], [
		#include <linux/fs.h>

		int set_acl_fn(struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int set_acl_fn(struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_set_acl])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int set_acl_fn(struct inode *inode, struct posix_acl *acl,
		    int type) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.set_acl = set_acl_fn,
		};
	]], [[]], [[]])], [inode_operations_set_acl_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_set_acl_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GET_ACL_HANDLE_CACHE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([get_acl_handle_cache], [
		#include <linux/fs.h>
	], [
		void *sentinel __attribute__ ((unused)) =
		    uncached_acl_sentinel(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		void *sentinel __attribute__ ((unused)) =
		    uncached_acl_sentinel(NULL);
	]],
	    [["Dual BSD/GPL"]])], [get_acl_handle_cache])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([get_acl_handle_cache], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		void *sentinel __attribute__ ((unused)) =
		    uncached_acl_sentinel(NULL);
	]], [[]])], [get_acl_handle_cache_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([get_acl_handle_cache_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ACL_HAS_REFCOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([acl_refcount], [
		#include <linux/backing-dev.h>
		#include <linux/refcount.h>
		#include <linux/posix_acl.h>
	], [
		struct posix_acl acl;
		refcount_t *r __attribute__ ((unused)) = &acl.a_refcount;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/backing-dev.h>
		#include <linux/refcount.h>
		#include <linux/posix_acl.h>
	]], [[
		struct posix_acl acl;
		refcount_t *r __attribute__ ((unused)) = &acl.a_refcount;
	]],
	    [["Dual BSD/GPL"]])], [acl_refcount])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([acl_refcount], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/backing-dev.h>
		#include <linux/refcount.h>
		#include <linux/posix_acl.h>
	]], [[
		struct posix_acl acl;
		refcount_t *r __attribute__ ((unused)) = &acl.a_refcount;
	]], [[]])], [acl_refcount_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([acl_refcount_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_SETATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_setattr_mnt_idmap], [
		#include <linux/fs.h>

		int test_setattr(
		    struct mnt_idmap *idmap,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_setattr(
		    struct mnt_idmap *idmap,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_setattr_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_setattr(
		    struct mnt_idmap *idmap,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]], [[]])], [inode_operations_setattr_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_setattr_userns], [
		#include <linux/fs.h>

		int test_setattr(
		    struct user_namespace *userns,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_setattr(
		    struct user_namespace *userns,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_setattr_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_setattr(
		    struct user_namespace *userns,
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]], [[]])], [inode_operations_setattr_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_setattr], [
		#include <linux/fs.h>

		int test_setattr(
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_setattr(
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_setattr])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_setattr(
		    struct dentry *de, struct iattr *ia)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.setattr = test_setattr,
		};
	]], [[]], [[]])], [inode_operations_setattr_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_setattr_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_GETATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_getattr_mnt_idmap], [
		#include <linux/fs.h>

		int test_getattr(
		    struct mnt_idmap *idmap,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_getattr(
		    struct mnt_idmap *idmap,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_getattr_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_getattr(
		    struct mnt_idmap *idmap,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]], [[]])], [inode_operations_getattr_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_getattr_userns], [
		#include <linux/fs.h>

		int test_getattr(
			struct user_namespace *userns,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_getattr(
			struct user_namespace *userns,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_getattr_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_getattr(
			struct user_namespace *userns,
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]], [[]])], [inode_operations_getattr_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_getattr_path], [
		#include <linux/fs.h>

		int test_getattr(
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_getattr(
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_getattr_path])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_path], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_getattr(
		    const struct path *p, struct kstat *k,
		    u32 request_mask, unsigned int query_flags)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]], [[]])], [inode_operations_getattr_path_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_path_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_getattr_vfsmount], [
		#include <linux/fs.h>

		int test_getattr(
		    struct vfsmount *mnt, struct dentry *d,
		    struct kstat *k)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_getattr(
		    struct vfsmount *mnt, struct dentry *d,
		    struct kstat *k)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_getattr_vfsmount])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_vfsmount], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_getattr(
		    struct vfsmount *mnt, struct dentry *d,
		    struct kstat *k)
		    { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.getattr = test_getattr,
		};
	]], [[]], [[]])], [inode_operations_getattr_vfsmount_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_getattr_vfsmount_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_SET_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_set_flags], [
		#include <linux/fs.h>
	], [
		struct inode inode;
		inode_set_flags(&inode, S_IMMUTABLE, S_IMMUTABLE);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode inode;
		inode_set_flags(&inode, S_IMMUTABLE, S_IMMUTABLE);
	]],
	    [["Dual BSD/GPL"]])], [inode_set_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_set_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode inode;
		inode_set_flags(&inode, S_IMMUTABLE, S_IMMUTABLE);
	]], [[]])], [inode_set_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_set_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INODE_SET_IVERSION
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_set_iversion], [
		#include <linux/iversion.h>
	], [
		struct inode inode;
		inode_set_iversion(&inode, 1);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/iversion.h>
	]], [[
		struct inode inode;
		inode_set_iversion(&inode, 1);
	]],
	    [["Dual BSD/GPL"]])], [inode_set_iversion])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_set_iversion], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/iversion.h>
	]], [[
		struct inode inode;
		inode_set_iversion(&inode, 1);
	]], [[]])], [inode_set_iversion_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_set_iversion_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHOW_OPTIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_operations_show_options], [
		#include <linux/fs.h>

		int show_options(struct seq_file * x, struct dentry * y) {
			return 0;
		};

		static struct super_operations sops __attribute__ ((unused)) = {
			.show_options = show_options,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int show_options(struct seq_file * x, struct dentry * y) {
			return 0;
		};

		static struct super_operations sops __attribute__ ((unused)) = {
			.show_options = show_options,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [super_operations_show_options])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_operations_show_options], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int show_options(struct seq_file * x, struct dentry * y) {
			return 0;
		};

		static struct super_operations sops __attribute__ ((unused)) = {
			.show_options = show_options,
		};
	]], [[]], [[]])], [super_operations_show_options_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_operations_show_options_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FILE_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_inode], [
		#include <linux/fs.h>
	], [
		struct file *f = NULL;
		file_inode(f);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *f = NULL;
		file_inode(f);
	]],
	    [["Dual BSD/GPL"]])], [file_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *f = NULL;
		file_inode(f);
	]], [[]])], [file_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FILE_DENTRY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_dentry], [
		#include <linux/fs.h>
	], [
		struct file *f = NULL;
		file_dentry(f);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *f = NULL;
		file_dentry(f);
	]],
	    [["Dual BSD/GPL"]])], [file_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *f = NULL;
		file_dentry(f);
	]], [[]])], [file_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FSYNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([fsync_without_dentry], [
		#include <linux/fs.h>

		int test_fsync(struct file *f, int x) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_fsync(struct file *f, int x) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [fsync_without_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fsync_without_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_fsync(struct file *f, int x) { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	]], [[]], [[]])], [fsync_without_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fsync_without_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([fsync_range], [
		#include <linux/fs.h>

		int test_fsync(struct file *f, loff_t a, loff_t b, int c)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int test_fsync(struct file *f, loff_t a, loff_t b, int c)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [fsync_range])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fsync_range], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int test_fsync(struct file *f, loff_t a, loff_t b, int c)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.fsync = test_fsync,
		};
	]], [[]], [[]])], [fsync_range_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fsync_range_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_AIO_FSYNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([aio_fsync], [
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.aio_fsync = NULL,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.aio_fsync = NULL,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [aio_fsync])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([aio_fsync], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
			.aio_fsync = NULL,
		};
	]], [[]], [[]])], [aio_fsync_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([aio_fsync_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_EVICT_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([evict_inode], [
		#include <linux/fs.h>
		void evict_inode (struct inode * t) { return; }
		static struct super_operations sops __attribute__ ((unused)) = {
			.evict_inode = evict_inode,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		void evict_inode (struct inode * t) { return; }
		static struct super_operations sops __attribute__ ((unused)) = {
			.evict_inode = evict_inode,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [evict_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([evict_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		void evict_inode (struct inode * t) { return; }
		static struct super_operations sops __attribute__ ((unused)) = {
			.evict_inode = evict_inode,
		};
	]], [[]], [[]])], [evict_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([evict_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_DIRTY_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dirty_inode_with_flags], [
		#include <linux/fs.h>

		void dirty_inode(struct inode *a, int b) { return; }

		static const struct super_operations
		    sops __attribute__ ((unused)) = {
			.dirty_inode = dirty_inode,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		void dirty_inode(struct inode *a, int b) { return; }

		static const struct super_operations
		    sops __attribute__ ((unused)) = {
			.dirty_inode = dirty_inode,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [dirty_inode_with_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dirty_inode_with_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		void dirty_inode(struct inode *a, int b) { return; }

		static const struct super_operations
		    sops __attribute__ ((unused)) = {
			.dirty_inode = dirty_inode,
		};
	]], [[]], [[]])], [dirty_inode_with_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dirty_inode_with_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHRINKER
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SUPER_BLOCK_S_SHRINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_block_s_shrink], [
		#include <linux/fs.h>

		int shrink(struct shrinker *s, struct shrink_control *sc)
		    { return 0; }

		static const struct super_block
		    sb __attribute__ ((unused)) = {
			.s_shrink.seeks = DEFAULT_SEEKS,
			.s_shrink.batch = 0,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int shrink(struct shrinker *s, struct shrink_control *sc)
		    { return 0; }

		static const struct super_block
		    sb __attribute__ ((unused)) = {
			.s_shrink.seeks = DEFAULT_SEEKS,
			.s_shrink.batch = 0,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [super_block_s_shrink])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_block_s_shrink], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int shrink(struct shrinker *s, struct shrink_control *sc)
		    { return 0; }

		static const struct super_block
		    sb __attribute__ ((unused)) = {
			.s_shrink.seeks = DEFAULT_SEEKS,
			.s_shrink.batch = 0,
		};
	]], [[]], [[]])], [super_block_s_shrink_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_block_s_shrink_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHRINK_CONTROL_HAS_NID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([shrink_control_nid], [
		#include <linux/fs.h>
	], [
		struct shrink_control sc __attribute__ ((unused));
		unsigned long scnidsize __attribute__ ((unused)) =
		    sizeof(sc.nid);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct shrink_control sc __attribute__ ((unused));
		unsigned long scnidsize __attribute__ ((unused)) =
		    sizeof(sc.nid);
	]],
	    [["Dual BSD/GPL"]])], [shrink_control_nid])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrink_control_nid], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct shrink_control sc __attribute__ ((unused));
		unsigned long scnidsize __attribute__ ((unused)) =
		    sizeof(sc.nid);
	]], [[]])], [shrink_control_nid_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrink_control_nid_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHRINKER_CALLBACK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([shrinker_cb_shrink_control], [
		#include <linux/mm.h>
		int shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	], [
		struct shrinker cache_shrinker = {
			.shrink = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		int shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.shrink = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	]],
	    [["Dual BSD/GPL"]])], [shrinker_cb_shrink_control])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrinker_cb_shrink_control], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		int shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.shrink = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	]], [[]])], [shrinker_cb_shrink_control_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrinker_cb_shrink_control_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([shrinker_cb_shrink_control_split], [
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	], [
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	]],
	    [["Dual BSD/GPL"]])], [shrinker_cb_shrink_control_split])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrinker_cb_shrink_control_split], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker);
	]], [[]])], [shrinker_cb_shrink_control_split_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrinker_cb_shrink_control_split_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SHRINK_CONTROL_STRUCT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([shrink_control_struct], [
		#include <linux/mm.h>
	], [
		struct shrink_control sc __attribute__ ((unused));

		sc.nr_to_scan = 0;
		sc.gfp_mask = GFP_KERNEL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		struct shrink_control sc __attribute__ ((unused));

		sc.nr_to_scan = 0;
		sc.gfp_mask = GFP_KERNEL;
	]],
	    [["Dual BSD/GPL"]])], [shrink_control_struct])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrink_control_struct], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		struct shrink_control sc __attribute__ ((unused));

		sc.nr_to_scan = 0;
		sc.gfp_mask = GFP_KERNEL;
	]], [[]])], [shrink_control_struct_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([shrink_control_struct_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_REGISTER_SHRINKER_VARARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([register_shrinker_vararg], [
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	], [
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker, "vararg-reg-shrink-test");
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker, "vararg-reg-shrink-test");
	]],
	    [["Dual BSD/GPL"]])], [register_shrinker_vararg])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([register_shrinker_vararg], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
		unsigned long shrinker_cb(struct shrinker *shrink,
		    struct shrink_control *sc) { return 0; }
	]], [[
		struct shrinker cache_shrinker = {
			.count_objects = shrinker_cb,
			.scan_objects = shrinker_cb,
			.seeks = DEFAULT_SEEKS,
		};
		register_shrinker(&cache_shrinker, "vararg-reg-shrink-test");
	]], [[]])], [register_shrinker_vararg_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([register_shrinker_vararg_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_MKDIR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([mkdir_mnt_idmap], [
		#include <linux/fs.h>

		int mkdir(struct mnt_idmap *idmap,
			struct inode *inode, struct dentry *dentry,
			umode_t umode) { return 0; }
		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int mkdir(struct mnt_idmap *idmap,
			struct inode *inode, struct dentry *dentry,
			umode_t umode) { return 0; }
		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [mkdir_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mkdir_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int mkdir(struct mnt_idmap *idmap,
			struct inode *inode, struct dentry *dentry,
			umode_t umode) { return 0; }
		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]], [[]])], [mkdir_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mkdir_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([mkdir_user_namespace], [
		#include <linux/fs.h>

		int mkdir(struct user_namespace *userns,
			struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int mkdir(struct user_namespace *userns,
			struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [mkdir_user_namespace])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mkdir_user_namespace], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int mkdir(struct user_namespace *userns,
			struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]], [[]])], [mkdir_user_namespace_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mkdir_user_namespace_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_mkdir], [
		#include <linux/fs.h>

		int mkdir(struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		int mkdir(struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_mkdir])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_mkdir], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		int mkdir(struct inode *inode, struct dentry *dentry,
		    umode_t umode) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.mkdir = mkdir,
		};
	]], [[]], [[]])], [inode_operations_mkdir_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_mkdir_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_LOOKUP_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lookup_flags], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		struct dentry *inode_lookup(struct inode *inode,
		    struct dentry *dentry, unsigned int flags) { return NULL; }

		static const struct inode_operations iops
		    __attribute__ ((unused)) = {
			.lookup	= inode_lookup,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		struct dentry *inode_lookup(struct inode *inode,
		    struct dentry *dentry, unsigned int flags) { return NULL; }

		static const struct inode_operations iops
		    __attribute__ ((unused)) = {
			.lookup	= inode_lookup,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [lookup_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		struct dentry *inode_lookup(struct inode *inode,
		    struct dentry *dentry, unsigned int flags) { return NULL; }

		static const struct inode_operations iops
		    __attribute__ ((unused)) = {
			.lookup	= inode_lookup,
		};
	]], [[]], [[]])], [lookup_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lookup_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CREATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([create_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create         = inode_create,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create         = inode_create,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [create_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create         = inode_create,
		};
	]], [[]], [[]])], [create_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([create_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [create_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	]], [[]], [[]])], [create_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([create_flags], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [create_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_create(struct inode *inode ,struct dentry *dentry,
		    umode_t umode, bool flag) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.create		= inode_create,
		};
	]], [[]], [[]])], [create_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([create_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERMISSION
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([permission_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct mnt_idmap *idmap,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission             = inode_permission,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct mnt_idmap *idmap,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission             = inode_permission,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [permission_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([permission_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct mnt_idmap *idmap,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission             = inode_permission,
		};
	]], [[]], [[]])], [permission_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([permission_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([permission_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct user_namespace *userns,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission		= inode_permission,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct user_namespace *userns,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission		= inode_permission,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [permission_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([permission_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int inode_permission(struct user_namespace *userns,
		    struct inode *inode, int mask) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.permission		= inode_permission,
		};
	]], [[]], [[]])], [permission_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([permission_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GET_LINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_link], [
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct inode *ip,
		    struct delayed_call *done) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct inode *ip,
		    struct delayed_call *done) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_link])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_link], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct inode *ip,
		    struct delayed_call *done) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	]], [[]], [[]])], [inode_operations_get_link_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_link_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_get_link_cookie], [
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct
		    inode *ip, void **cookie) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct
		    inode *ip, void **cookie) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_get_link_cookie])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_link_cookie], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		const char *get_link(struct dentry *de, struct
		    inode *ip, void **cookie) { return "symlink"; }
		static struct inode_operations
		     iops __attribute__ ((unused)) = {
			.get_link = get_link,
		};
	]], [[]], [[]])], [inode_operations_get_link_cookie_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_get_link_cookie_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_follow_link], [
		#include <linux/fs.h>
		const char *follow_link(struct dentry *de,
		    void **cookie) { return "symlink"; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		const char *follow_link(struct dentry *de,
		    void **cookie) { return "symlink"; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_follow_link])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_follow_link], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		const char *follow_link(struct dentry *de,
		    void **cookie) { return "symlink"; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	]], [[]], [[]])], [inode_operations_follow_link_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_follow_link_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_follow_link_nameidata], [
		#include <linux/fs.h>
		void *follow_link(struct dentry *de, struct
		    nameidata *nd) { return (void *)NULL; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		void *follow_link(struct dentry *de, struct
		    nameidata *nd) { return (void *)NULL; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_follow_link_nameidata])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_follow_link_nameidata], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		void *follow_link(struct dentry *de, struct
		    nameidata *nd) { return (void *)NULL; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.follow_link = follow_link,
		};
	]], [[]], [[]])], [inode_operations_follow_link_nameidata_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_follow_link_nameidata_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PUT_LINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([put_link_cookie], [
		#include <linux/fs.h>
		void put_link(struct inode *ip, void *cookie)
		    { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		void put_link(struct inode *ip, void *cookie)
		    { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [put_link_cookie])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([put_link_cookie], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		void put_link(struct inode *ip, void *cookie)
		    { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	]], [[]], [[]])], [put_link_cookie_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([put_link_cookie_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([put_link_nameidata], [
		#include <linux/fs.h>
		void put_link(struct dentry *de, struct
		    nameidata *nd, void *ptr) { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		void put_link(struct dentry *de, struct
		    nameidata *nd, void *ptr) { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [put_link_nameidata])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([put_link_nameidata], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		void put_link(struct dentry *de, struct
		    nameidata *nd, void *ptr) { return; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.put_link = put_link,
		};
	]], [[]], [[]])], [put_link_nameidata_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([put_link_nameidata_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TMPFILE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_mnt_idmap], [
		#include <linux/fs.h>
		int tmpfile(struct mnt_idmap *idmap,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int tmpfile(struct mnt_idmap *idmap,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_tmpfile_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int tmpfile(struct mnt_idmap *idmap,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]], [[]])], [inode_operations_tmpfile_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_tmpfile], [
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_tmpfile])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct file *file,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]], [[]])], [inode_operations_tmpfile_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_dentry_userns], [
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct dentry *dentry,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct dentry *dentry,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_tmpfile_dentry_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_dentry_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int tmpfile(struct user_namespace *userns,
		    struct inode *inode, struct dentry *dentry,
		    umode_t mode) { return 0; }
		static struct inode_operations
		    iops __attribute__ ((unused)) = {
			.tmpfile = tmpfile,
		};
	]], [[]], [[]])], [inode_operations_tmpfile_dentry_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_dentry_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_tmpfile_dentry], [
			#include <linux/fs.h>
			int tmpfile(struct inode *inode, struct dentry *dentry,
			    umode_t mode) { return 0; }
			static struct inode_operations
			    iops __attribute__ ((unused)) = {
				.tmpfile = tmpfile,
			};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
			#include <linux/fs.h>
			int tmpfile(struct inode *inode, struct dentry *dentry,
			    umode_t mode) { return 0; }
			static struct inode_operations
			    iops __attribute__ ((unused)) = {
				.tmpfile = tmpfile,
			};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_tmpfile_dentry])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_dentry], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
			#include <linux/fs.h>
			int tmpfile(struct inode *inode, struct dentry *dentry,
			    umode_t mode) { return 0; }
			static struct inode_operations
			    iops __attribute__ ((unused)) = {
				.tmpfile = tmpfile,
			};
	]], [[]], [[]])], [inode_operations_tmpfile_dentry_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_tmpfile_dentry_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_AUTOMOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dentry_operations_d_automount], [
		#include <linux/dcache.h>
		struct vfsmount *d_automount(struct path *p) { return NULL; }
		struct dentry_operations dops __attribute__ ((unused)) = {
			.d_automount = d_automount,
		};
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
		struct vfsmount *d_automount(struct path *p) { return NULL; }
		struct dentry_operations dops __attribute__ ((unused)) = {
			.d_automount = d_automount,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [dentry_operations_d_automount])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_d_automount], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
		struct vfsmount *d_automount(struct path *p) { return NULL; }
		struct dentry_operations dops __attribute__ ((unused)) = {
			.d_automount = d_automount,
		};
	]], [[]], [[]])], [dentry_operations_d_automount_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_d_automount_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ENCODE_FH_WITH_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([export_operations_encode_fh], [
		#include <linux/exportfs.h>
		int encode_fh(struct inode *inode, __u32 *fh, int *max_len,
		              struct inode *parent) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.encode_fh = encode_fh,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/exportfs.h>
		int encode_fh(struct inode *inode, __u32 *fh, int *max_len,
		              struct inode *parent) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.encode_fh = encode_fh,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [export_operations_encode_fh])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([export_operations_encode_fh], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/exportfs.h>
		int encode_fh(struct inode *inode, __u32 *fh, int *max_len,
		              struct inode *parent) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.encode_fh = encode_fh,
		};
	]], [[]], [[]])], [export_operations_encode_fh_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([export_operations_encode_fh_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_COMMIT_METADATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([export_operations_commit_metadata], [
		#include <linux/exportfs.h>
		int commit_metadata(struct inode *inode) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.commit_metadata = commit_metadata,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/exportfs.h>
		int commit_metadata(struct inode *inode) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.commit_metadata = commit_metadata,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [export_operations_commit_metadata])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([export_operations_commit_metadata], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/exportfs.h>
		int commit_metadata(struct inode *inode) { return 0; }
		static struct export_operations eops __attribute__ ((unused))={
			.commit_metadata = commit_metadata,
		};
	]], [[]], [[]])], [export_operations_commit_metadata_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([export_operations_commit_metadata_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CLEAR_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([clear_inode], [
		#include <linux/fs.h>
	], [
		clear_inode(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		clear_inode(NULL);
	]],
	    [["Dual BSD/GPL"]])], [clear_inode])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([clear_inode], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		clear_inode(NULL);
	]], [[]])], [clear_inode_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([clear_inode_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SETATTR_PREPARE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([setattr_prepare], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(dentry, attr);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(dentry, attr);
	]],
	    [["Dual BSD/GPL"]])], [setattr_prepare])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(dentry, attr);
	]], [[]])], [setattr_prepare_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([setattr_prepare_userns], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct user_namespace *userns = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(userns, dentry, attr);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct user_namespace *userns = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(userns, dentry, attr);
	]],
	    [["Dual BSD/GPL"]])], [setattr_prepare_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct user_namespace *userns = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(userns, dentry, attr);
	]], [[]])], [setattr_prepare_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([setattr_prepare_mnt_idmap], [
		#include <linux/fs.h>
	], [
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct mnt_idmap *idmap = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(idmap, dentry, attr);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct mnt_idmap *idmap = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(idmap, dentry, attr);
	]],
	    [["Dual BSD/GPL"]])], [setattr_prepare_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct dentry *dentry = NULL;
		struct iattr *attr = NULL;
		struct mnt_idmap *idmap = NULL;
		int error __attribute__ ((unused)) =
			setattr_prepare(idmap, dentry, attr);
	]], [[]])], [setattr_prepare_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([setattr_prepare_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_INSERT_INODE_LOCKED
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([insert_inode_locked], [
		#include <linux/fs.h>
	], [
		insert_inode_locked(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		insert_inode_locked(NULL);
	]],
	    [["Dual BSD/GPL"]])], [insert_inode_locked])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([insert_inode_locked], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		insert_inode_locked(NULL);
	]], [[]])], [insert_inode_locked_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([insert_inode_locked_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_DENTRY
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_MAKE_ROOT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([d_make_root], [
		#include <linux/dcache.h>
	], [
		d_make_root(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
	]], [[
		d_make_root(NULL);
	]],
	    [["Dual BSD/GPL"]])], [d_make_root])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_make_root], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
	]], [[
		d_make_root(NULL);
	]], [[]])], [d_make_root_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_make_root_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_OBTAIN_ALIAS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([d_obtain_alias], [
		#include <linux/dcache.h>
	], [
		d_obtain_alias(NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
	]], [[
		d_obtain_alias(NULL);
	]],
	    [["Dual BSD/GPL"]])], [d_obtain_alias])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_obtain_alias], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
	]], [[
		d_obtain_alias(NULL);
	]], [[]])], [d_obtain_alias_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_obtain_alias_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_PRUNE_ALIASES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([d_prune_aliases], [
		#include <linux/dcache.h>
	], [
		struct inode *ip = NULL;
		d_prune_aliases(ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
	]], [[
		struct inode *ip = NULL;
		d_prune_aliases(ip);
	]],
	    [["Dual BSD/GPL"]])], [d_prune_aliases])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_prune_aliases], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
	]], [[
		struct inode *ip = NULL;
		d_prune_aliases(ip);
	]], [[]])], [d_prune_aliases_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_prune_aliases_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_SET_D_OP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([d_set_d_op], [
		#include <linux/dcache.h>
	], [
		d_set_d_op(NULL, NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
	]], [[
		d_set_d_op(NULL, NULL);
	]],
	    [["Dual BSD/GPL"]])], [d_set_d_op])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_set_d_op], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
	]], [[
		d_set_d_op(NULL, NULL);
	]], [[]])], [d_set_d_op_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([d_set_d_op_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_D_REVALIDATE_NAMEIDATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dentry_operations_revalidate], [
		#include <linux/dcache.h>
		#include <linux/sched.h>

		int revalidate (struct dentry *dentry,
		    struct nameidata *nidata) { return 0; }

		static const struct dentry_operations
		    dops __attribute__ ((unused)) = {
			.d_revalidate	= revalidate,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>
		#include <linux/sched.h>

		int revalidate (struct dentry *dentry,
		    struct nameidata *nidata) { return 0; }

		static const struct dentry_operations
		    dops __attribute__ ((unused)) = {
			.d_revalidate	= revalidate,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [dentry_operations_revalidate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_revalidate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>
		#include <linux/sched.h>

		int revalidate (struct dentry *dentry,
		    struct nameidata *nidata) { return 0; }

		static const struct dentry_operations
		    dops __attribute__ ((unused)) = {
			.d_revalidate	= revalidate,
		};
	]], [[]], [[]])], [dentry_operations_revalidate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_revalidate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CONST_DENTRY_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dentry_operations_const], [
		#include <linux/dcache.h>

		const struct dentry_operations test_d_op = {
			.d_revalidate = NULL,
		};
	], [
		struct dentry d __attribute__ ((unused));
		d.d_op = &test_d_op;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/dcache.h>

		const struct dentry_operations test_d_op = {
			.d_revalidate = NULL,
		};
	]], [[
		struct dentry d __attribute__ ((unused));
		d.d_op = &test_d_op;
	]],
	    [["Dual BSD/GPL"]])], [dentry_operations_const])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_const], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/dcache.h>

		const struct dentry_operations test_d_op = {
			.d_revalidate = NULL,
		};
	]], [[
		struct dentry d __attribute__ ((unused));
		d.d_op = &test_d_op;
	]], [[]])], [dentry_operations_const_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_operations_const_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_S_D_OP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_block_s_d_op], [
		#include <linux/fs.h>
	], [
		struct super_block sb __attribute__ ((unused));
		sb.s_d_op = NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct super_block sb __attribute__ ((unused));
		sb.s_d_op = NULL;
	]],
	    [["Dual BSD/GPL"]])], [super_block_s_d_op])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_block_s_d_op], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct super_block sb __attribute__ ((unused));
		sb.s_d_op = NULL;
	]], [[]])], [super_block_s_d_op_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_block_s_d_op_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_DENTRY_ALIAS_D_U
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dentry_alias_d_u], [
		#include <linux/fs.h>
		#include <linux/dcache.h>
		#include <linux/list.h>
	], [
		struct inode *inode __attribute__ ((unused)) = NULL;
		struct dentry *dentry __attribute__ ((unused)) = NULL;
		hlist_for_each_entry(dentry, &inode->i_dentry,
		    d_u.d_alias) {
			d_drop(dentry);
		}
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/dcache.h>
		#include <linux/list.h>
	]], [[
		struct inode *inode __attribute__ ((unused)) = NULL;
		struct dentry *dentry __attribute__ ((unused)) = NULL;
		hlist_for_each_entry(dentry, &inode->i_dentry,
		    d_u.d_alias) {
			d_drop(dentry);
		}
	]],
	    [["Dual BSD/GPL"]])], [dentry_alias_d_u])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_alias_d_u], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/dcache.h>
		#include <linux/list.h>
	]], [[
		struct inode *inode __attribute__ ((unused)) = NULL;
		struct dentry *dentry __attribute__ ((unused)) = NULL;
		hlist_for_each_entry(dentry, &inode->i_dentry,
		    d_u.d_alias) {
			d_drop(dentry);
		}
	]], [[]])], [dentry_alias_d_u_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dentry_alias_d_u_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TRUNCATE_SETSIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([truncate_setsize], [
		#include <linux/mm.h>
	], [
		truncate_setsize(NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		truncate_setsize(NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [truncate_setsize])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([truncate_setsize], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		truncate_setsize(NULL, 0);
	]], [[]])], [truncate_setsize_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([truncate_setsize_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SECURITY_INODE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SECURITY_INODE_INIT_SECURITY_CALLBACK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([security_inode_init_security], [
		#include <linux/security.h>
	], [
		struct inode *ip __attribute__ ((unused)) = NULL;
		struct inode *dip __attribute__ ((unused)) = NULL;
		const struct qstr *str __attribute__ ((unused)) = NULL;
		initxattrs func __attribute__ ((unused)) = NULL;

		security_inode_init_security(ip, dip, str, func, NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/security.h>
	]], [[
		struct inode *ip __attribute__ ((unused)) = NULL;
		struct inode *dip __attribute__ ((unused)) = NULL;
		const struct qstr *str __attribute__ ((unused)) = NULL;
		initxattrs func __attribute__ ((unused)) = NULL;

		security_inode_init_security(ip, dip, str, func, NULL);
	]],
	    [["Dual BSD/GPL"]])], [security_inode_init_security])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([security_inode_init_security], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/security.h>
	]], [[
		struct inode *ip __attribute__ ((unused)) = NULL;
		struct inode *dip __attribute__ ((unused)) = NULL;
		const struct qstr *str __attribute__ ((unused)) = NULL;
		initxattrs func __attribute__ ((unused)) = NULL;

		security_inode_init_security(ip, dip, str, func, NULL);
	]], [[]])], [security_inode_init_security_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([security_inode_init_security_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FST_MOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_system_type_mount], [
                #include <linux/fs.h>

                static struct dentry *
                mount(struct file_system_type *fs_type, int flags,
                    const char *osname, void *data) {
                        struct dentry *d = NULL;
                        return (d);
                }

                static struct file_system_type fst __attribute__ ((unused)) = {
                        .mount = mount,
                };
        ], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
                #include <linux/fs.h>

                static struct dentry *
                mount(struct file_system_type *fs_type, int flags,
                    const char *osname, void *data) {
                        struct dentry *d = NULL;
                        return (d);
                }

                static struct file_system_type fst __attribute__ ((unused)) = {
                        .mount = mount,
                };
        ]], [[]],
	    [["Dual BSD/GPL"]])], [file_system_type_mount])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_system_type_mount], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
                #include <linux/fs.h>

                static struct dentry *
                mount(struct file_system_type *fs_type, int flags,
                    const char *osname, void *data) {
                        struct dentry *d = NULL;
                        return (d);
                }

                static struct file_system_type fst __attribute__ ((unused)) = {
                        .mount = mount,
                };
        ]], [[]], [[]])], [file_system_type_mount_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_system_type_mount_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BDI
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([super_setup_bdi_name], [
		#include <linux/fs.h>
		struct super_block sb;
	], [
		char *name = "bdi";
		atomic_long_t zfs_bdi_seq;
		int error __attribute__((unused));
		atomic_long_set(&zfs_bdi_seq, 0);
		error =
		    super_setup_bdi_name(&sb, "%.28s-%ld", name,
		    atomic_long_inc_return(&zfs_bdi_seq));
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		struct super_block sb;
	]], [[
		char *name = "bdi";
		atomic_long_t zfs_bdi_seq;
		int error __attribute__((unused));
		atomic_long_set(&zfs_bdi_seq, 0);
		error =
		    super_setup_bdi_name(&sb, "%.28s-%ld", name,
		    atomic_long_inc_return(&zfs_bdi_seq));
	]],
	    [["Dual BSD/GPL"]])], [super_setup_bdi_name])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_setup_bdi_name], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		struct super_block sb;
	]], [[
		char *name = "bdi";
		atomic_long_t zfs_bdi_seq;
		int error __attribute__((unused));
		atomic_long_set(&zfs_bdi_seq, 0);
		error =
		    super_setup_bdi_name(&sb, "%.28s-%ld", name,
		    atomic_long_inc_return(&zfs_bdi_seq));
	]], [[]])], [super_setup_bdi_name_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([super_setup_bdi_name_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdi_setup_and_register], [
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	], [
		char *name = "bdi";
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	]], [[
		char *name = "bdi";
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name);
	]],
	    [["Dual BSD/GPL"]])], [bdi_setup_and_register])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdi_setup_and_register], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	]], [[
		char *name = "bdi";
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name);
	]], [[]])], [bdi_setup_and_register_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdi_setup_and_register_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdi_setup_and_register_3args], [
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	], [
		char *name = "bdi";
		unsigned int cap = BDI_CAP_MAP_COPY;
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name, cap);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	]], [[
		char *name = "bdi";
		unsigned int cap = BDI_CAP_MAP_COPY;
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name, cap);
	]],
	    [["Dual BSD/GPL"]])], [bdi_setup_and_register_3args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdi_setup_and_register_3args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/backing-dev.h>
		struct backing_dev_info bdi;
	]], [[
		char *name = "bdi";
		unsigned int cap = BDI_CAP_MAP_COPY;
		int error __attribute__((unused)) =
		    bdi_setup_and_register(&bdi, name, cap);
	]], [[]])], [bdi_setup_and_register_3args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdi_setup_and_register_3args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SET_NLINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([set_nlink], [
		#include <linux/fs.h>
	], [
		struct inode node;
		unsigned int link = 0;
		(void) set_nlink(&node, link);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode node;
		unsigned int link = 0;
		(void) set_nlink(&node, link);
	]],
	    [["Dual BSD/GPL"]])], [set_nlink])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_nlink], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode node;
		unsigned int link = 0;
		(void) set_nlink(&node, link);
	]], [[]])], [set_nlink_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_nlink_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SGET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([sget_5args], [
		#include <linux/fs.h>
	], [
		struct file_system_type *type = NULL;
		int (*test)(struct super_block *,void *) = NULL;
		int (*set)(struct super_block *,void *) = NULL;
		int flags = 0;
		void *data = NULL;
		(void) sget(type, test, set, flags, data);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file_system_type *type = NULL;
		int (*test)(struct super_block *,void *) = NULL;
		int (*set)(struct super_block *,void *) = NULL;
		int flags = 0;
		void *data = NULL;
		(void) sget(type, test, set, flags, data);
	]],
	    [["Dual BSD/GPL"]])], [sget_5args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sget_5args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file_system_type *type = NULL;
		int (*test)(struct super_block *,void *) = NULL;
		int (*set)(struct super_block *,void *) = NULL;
		int flags = 0;
		void *data = NULL;
		(void) sget(type, test, set, flags, data);
	]], [[]])], [sget_5args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sget_5args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_LSEEK_EXECUTE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([lseek_execute], [
		#include <linux/fs.h>
	], [
		struct file *fp __attribute__ ((unused)) = NULL;
		struct inode *ip __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t maxsize __attribute__ ((unused)) = 0;

		lseek_execute(fp, ip, offset, maxsize);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct file *fp __attribute__ ((unused)) = NULL;
		struct inode *ip __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t maxsize __attribute__ ((unused)) = 0;

		lseek_execute(fp, ip, offset, maxsize);
	]],
	    [["Dual BSD/GPL"]])], [lseek_execute])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lseek_execute], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct file *fp __attribute__ ((unused)) = NULL;
		struct inode *ip __attribute__ ((unused)) = NULL;
		loff_t offset __attribute__ ((unused)) = 0;
		loff_t maxsize __attribute__ ((unused)) = 0;

		lseek_execute(fp, ip, offset, maxsize);
	]], [[]])], [lseek_execute_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([lseek_execute_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_FILEMAP_DIRTY_FOLIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_has_filemap_dirty_folio], [
		#include <linux/pagemap.h>
		#include <linux/writeback.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.dirty_folio	= filemap_dirty_folio,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/pagemap.h>
		#include <linux/writeback.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.dirty_folio	= filemap_dirty_folio,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [vfs_has_filemap_dirty_folio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_filemap_dirty_folio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/pagemap.h>
		#include <linux/writeback.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.dirty_folio	= filemap_dirty_folio,
		};
	]], [[]], [[]])], [vfs_has_filemap_dirty_folio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_filemap_dirty_folio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_READ_FOLIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_has_read_folio], [
		#include <linux/fs.h>

		static int
		test_read_folio(struct file *file, struct folio *folio) {
			(void) file; (void) folio;
			return (0);
		}

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.read_folio	= test_read_folio,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		static int
		test_read_folio(struct file *file, struct folio *folio) {
			(void) file; (void) folio;
			return (0);
		}

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.read_folio	= test_read_folio,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [vfs_has_read_folio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_read_folio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		static int
		test_read_folio(struct file *file, struct folio *folio) {
			(void) file; (void) folio;
			return (0);
		}

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.read_folio	= test_read_folio,
		};
	]], [[]], [[]])], [vfs_has_read_folio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_read_folio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GETATTR
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GETATTR_4ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_getattr_4args], [
		#include <linux/fs.h>
	], [
		vfs_getattr((const struct path *)NULL,
			(struct kstat *)NULL,
			(u32)0,
			(unsigned int)0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((const struct path *)NULL,
			(struct kstat *)NULL,
			(u32)0,
			(unsigned int)0);
	]],
	    [["Dual BSD/GPL"]])], [vfs_getattr_4args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_4args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((const struct path *)NULL,
			(struct kstat *)NULL,
			(u32)0,
			(unsigned int)0);
	]], [[]])], [vfs_getattr_4args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_4args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GETATTR_2ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_getattr_2args], [
		#include <linux/fs.h>
	], [
		vfs_getattr((struct path *) NULL,
			(struct kstat *)NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((struct path *) NULL,
			(struct kstat *)NULL);
	]],
	    [["Dual BSD/GPL"]])], [vfs_getattr_2args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_2args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((struct path *) NULL,
			(struct kstat *)NULL);
	]], [[]])], [vfs_getattr_2args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_2args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GETATTR_3ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_getattr_3args], [
		#include <linux/fs.h>
	], [
		vfs_getattr((struct vfsmount *)NULL,
			(struct dentry *)NULL,
			(struct kstat *)NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((struct vfsmount *)NULL,
			(struct dentry *)NULL,
			(struct kstat *)NULL);
	]],
	    [["Dual BSD/GPL"]])], [vfs_getattr_3args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_3args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		vfs_getattr((struct vfsmount *)NULL,
			(struct dentry *)NULL,
			(struct kstat *)NULL);
	]], [[]])], [vfs_getattr_3args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_getattr_3args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_FSYNC_2ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_fsync_2args], [
		#include <linux/fs.h>
	], [
		vfs_fsync(NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		vfs_fsync(NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [vfs_fsync_2args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_fsync_2args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		vfs_fsync(NULL, 0);
	]], [[]])], [vfs_fsync_2args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_fsync_2args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_ITERATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_operations_iterate_shared], [
		#include <linux/fs.h>
		int iterate(struct file *filp, struct dir_context * context)
		    { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate_shared	 = iterate,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int iterate(struct file *filp, struct dir_context * context)
		    { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate_shared	 = iterate,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_operations_iterate_shared])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_iterate_shared], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int iterate(struct file *filp, struct dir_context * context)
		    { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate_shared	 = iterate,
		};
	]], [[]], [[]])], [file_operations_iterate_shared_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_iterate_shared_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_operations_iterate], [
		#include <linux/fs.h>
		int iterate(struct file *filp,
		    struct dir_context *context) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate	 = iterate,
		};

		#if defined(FMODE_KABI_ITERATE)
		#error "RHEL 7.5, FMODE_KABI_ITERATE interface"
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int iterate(struct file *filp,
		    struct dir_context *context) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate	 = iterate,
		};

		#if defined(FMODE_KABI_ITERATE)
		#error "RHEL 7.5, FMODE_KABI_ITERATE interface"
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_operations_iterate])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_iterate], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int iterate(struct file *filp,
		    struct dir_context *context) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.iterate	 = iterate,
		};

		#if defined(FMODE_KABI_ITERATE)
		#error "RHEL 7.5, FMODE_KABI_ITERATE interface"
		#endif
	]], [[]], [[]])], [file_operations_iterate_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_iterate_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_operations_readdir], [
		#include <linux/fs.h>
		int readdir(struct file *filp, void *entry,
		    filldir_t func) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.readdir = readdir,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int readdir(struct file *filp, void *entry,
		    filldir_t func) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.readdir = readdir,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_operations_readdir])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_readdir], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int readdir(struct file *filp, void *entry,
		    filldir_t func) { return 0; }

		static const struct file_operations fops
		    __attribute__ ((unused)) = {
			.readdir = readdir,
		};
	]], [[]], [[]])], [file_operations_readdir_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_readdir_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_DIRECT_IO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([direct_io_iter], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [direct_io_iter])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	]], [[]], [[]])], [direct_io_iter_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([direct_io_iter_offset], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [direct_io_iter_offset])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_offset], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_direct_IO(struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.direct_IO = test_direct_IO,
		};
	]], [[]], [[]])], [direct_io_iter_offset_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_offset_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([direct_io_iter_rw_offset], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [direct_io_iter_rw_offset])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_rw_offset], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    struct iov_iter *iter, loff_t offset) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	]], [[]], [[]])], [direct_io_iter_rw_offset_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iter_rw_offset_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([direct_io_iovec], [
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    const struct iovec *iov, loff_t offset,
		    unsigned long nr_segs) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    const struct iovec *iov, loff_t offset,
		    unsigned long nr_segs) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [direct_io_iovec])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iovec], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_direct_IO(int rw, struct kiocb *kiocb,
		    const struct iovec *iov, loff_t offset,
		    unsigned long nr_segs) { return 0; }

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
		    .direct_IO = test_direct_IO,
		};
	]], [[]], [[]])], [direct_io_iovec_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([direct_io_iovec_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_READPAGES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_has_readpages], [
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.readpages = NULL,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.readpages = NULL,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [vfs_has_readpages])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_readpages], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.readpages = NULL,
		};
	]], [[]], [[]])], [vfs_has_readpages_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_readpages_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_SET_PAGE_DIRTY_NOBUFFERS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([vfs_has_set_page_dirty_nobuffers], [
		#include <linux/pagemap.h>
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.set_page_dirty = __set_page_dirty_nobuffers,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/pagemap.h>
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.set_page_dirty = __set_page_dirty_nobuffers,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [vfs_has_set_page_dirty_nobuffers])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_set_page_dirty_nobuffers], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/pagemap.h>
		#include <linux/fs.h>

		static const struct address_space_operations
		    aops __attribute__ ((unused)) = {
			.set_page_dirty = __set_page_dirty_nobuffers,
		};
	]], [[]], [[]])], [vfs_has_set_page_dirty_nobuffers_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([vfs_has_set_page_dirty_nobuffers_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_RW_ITERATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([file_operations_rw], [
		#include <linux/fs.h>

		ssize_t test_read(struct kiocb *kiocb, struct iov_iter *to)
		    { return 0; }
		ssize_t test_write(struct kiocb *kiocb, struct iov_iter *from)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
		    .read_iter = test_read,
		    .write_iter = test_write,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>

		ssize_t test_read(struct kiocb *kiocb, struct iov_iter *to)
		    { return 0; }
		ssize_t test_write(struct kiocb *kiocb, struct iov_iter *from)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
		    .read_iter = test_read,
		    .write_iter = test_write,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [file_operations_rw])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_rw], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>

		ssize_t test_read(struct kiocb *kiocb, struct iov_iter *to)
		    { return 0; }
		ssize_t test_write(struct kiocb *kiocb, struct iov_iter *from)
		    { return 0; }

		static const struct file_operations
		    fops __attribute__ ((unused)) = {
		    .read_iter = test_read,
		    .write_iter = test_write,
		};
	]], [[]], [[]])], [file_operations_rw_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([file_operations_rw_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([new_sync_rw], [
		#include <linux/fs.h>
	], [
	        ssize_t ret __attribute__ ((unused));
		struct file *filp = NULL;
		char __user *rbuf = NULL;
		const char __user *wbuf = NULL;
		size_t len = 0;
		loff_t ppos;

		ret = new_sync_read(filp, rbuf, len, &ppos);
		ret = new_sync_write(filp, wbuf, len, &ppos);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
	        ssize_t ret __attribute__ ((unused));
		struct file *filp = NULL;
		char __user *rbuf = NULL;
		const char __user *wbuf = NULL;
		size_t len = 0;
		loff_t ppos;

		ret = new_sync_read(filp, rbuf, len, &ppos);
		ret = new_sync_write(filp, wbuf, len, &ppos);
	]],
	    [["Dual BSD/GPL"]])], [new_sync_rw])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([new_sync_rw], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
	        ssize_t ret __attribute__ ((unused));
		struct file *filp = NULL;
		char __user *rbuf = NULL;
		const char __user *wbuf = NULL;
		size_t len = 0;
		loff_t ppos;

		ret = new_sync_read(filp, rbuf, len, &ppos);
		ret = new_sync_write(filp, wbuf, len, &ppos);
	]], [[]])], [new_sync_rw_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([new_sync_rw_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_GENERIC_WRITE_CHECKS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_write_checks], [
		#include <linux/fs.h>
	], [
		struct kiocb *iocb = NULL;
		struct iov_iter *iov = NULL;
		generic_write_checks(iocb, iov);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct kiocb *iocb = NULL;
		struct iov_iter *iov = NULL;
		generic_write_checks(iocb, iov);
	]],
	    [["Dual BSD/GPL"]])], [generic_write_checks])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_write_checks], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct kiocb *iocb = NULL;
		struct iov_iter *iov = NULL;
		generic_write_checks(iocb, iov);
	]], [[]])], [generic_write_checks_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_write_checks_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_VFS_IOV_ITER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_types], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		int type __attribute__ ((unused)) =
		    ITER_IOVEC | ITER_KVEC | ITER_BVEC | ITER_PIPE;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		int type __attribute__ ((unused)) =
		    ITER_IOVEC | ITER_KVEC | ITER_BVEC | ITER_PIPE;
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_types])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_types], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		int type __attribute__ ((unused)) =
		    ITER_IOVEC | ITER_KVEC | ITER_BVEC | ITER_PIPE;
	]], [[]])], [iov_iter_types_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_types_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_advance], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t advance = 512;

		iov_iter_advance(&iter, advance);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t advance = 512;

		iov_iter_advance(&iter, advance);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_advance])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_advance], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t advance = 512;

		iov_iter_advance(&iter, advance);
	]], [[]])], [iov_iter_advance_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_advance_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_revert], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t revert = 512;

		iov_iter_revert(&iter, revert);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t revert = 512;

		iov_iter_revert(&iter, revert);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_revert])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_revert], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t revert = 512;

		iov_iter_revert(&iter, revert);
	]], [[]])], [iov_iter_revert_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_revert_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_fault_in_readable], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = iov_iter_fault_in_readable(&iter, size);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = iov_iter_fault_in_readable(&iter, size);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_fault_in_readable])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_fault_in_readable], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = iov_iter_fault_in_readable(&iter, size);
	]], [[]])], [iov_iter_fault_in_readable_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_fault_in_readable_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([fault_in_iov_iter_readable], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = fault_in_iov_iter_readable(&iter, size);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = fault_in_iov_iter_readable(&iter, size);
	]],
	    [["Dual BSD/GPL"]])], [fault_in_iov_iter_readable])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fault_in_iov_iter_readable], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t size = 512;
		int error __attribute__ ((unused));

		error = fault_in_iov_iter_readable(&iter, size);
	]], [[]])], [fault_in_iov_iter_readable_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([fault_in_iov_iter_readable_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_count], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		size_t bytes __attribute__ ((unused));

		bytes = iov_iter_count(&iter);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t bytes __attribute__ ((unused));

		bytes = iov_iter_count(&iter);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_count])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_count], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		size_t bytes __attribute__ ((unused));

		bytes = iov_iter_count(&iter);
	]], [[]])], [iov_iter_count_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_count_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([copy_to_iter], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_to_iter((const void *)&buf, size, &iter);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_to_iter((const void *)&buf, size, &iter);
	]],
	    [["Dual BSD/GPL"]])], [copy_to_iter])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([copy_to_iter], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_to_iter((const void *)&buf, size, &iter);
	]], [[]])], [copy_to_iter_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([copy_to_iter_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([copy_from_iter], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_from_iter((void *)&buf, size, &iter);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_from_iter((void *)&buf, size, &iter);
	]],
	    [["Dual BSD/GPL"]])], [copy_from_iter])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([copy_from_iter], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		char buf[512] = { 0 };
		size_t size = 512;
		size_t bytes __attribute__ ((unused));

		bytes = copy_from_iter((void *)&buf, size, &iter);
	]], [[]])], [copy_from_iter_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([copy_from_iter_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iov_iter_type], [
		#include <linux/fs.h>
		#include <linux/uio.h>
	], [
		struct iov_iter iter = { 0 };
		__attribute__((unused)) enum iter_type i = iov_iter_type(&iter);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		__attribute__((unused)) enum iter_type i = iov_iter_type(&iter);
	]],
	    [["Dual BSD/GPL"]])], [iov_iter_type])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_type], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/uio.h>
	]], [[
		struct iov_iter iter = { 0 };
		__attribute__((unused)) enum iter_type i = iov_iter_type(&iter);
	]], [[]])], [iov_iter_type_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iov_iter_type_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KMAP_ATOMIC_ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kmap_atomic], [
		#include <linux/pagemap.h>
	], [
		struct page page;
		kmap_atomic(&page);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/pagemap.h>
	]], [[
		struct page page;
		kmap_atomic(&page);
	]],
	    [["Dual BSD/GPL"]])], [kmap_atomic])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kmap_atomic], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/pagemap.h>
	]], [[
		struct page page;
		kmap_atomic(&page);
	]], [[]])], [kmap_atomic_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kmap_atomic_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FOLLOW_DOWN_ONE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([follow_down_one], [
		#include <linux/namei.h>
	], [
		struct path *p = NULL;
		follow_down_one(p);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/namei.h>
	]], [[
		struct path *p = NULL;
		follow_down_one(p);
	]],
	    [["Dual BSD/GPL"]])], [follow_down_one])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([follow_down_one], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/namei.h>
	]], [[
		struct path *p = NULL;
		follow_down_one(p);
	]], [[]])], [follow_down_one_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([follow_down_one_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_MAKE_REQUEST_FN
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([make_request_fn_void], [
		#include <linux/blkdev.h>
		void make_request(struct request_queue *q,
		    struct bio *bio) { return; }
	], [
		blk_queue_make_request(NULL, &make_request);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
		void make_request(struct request_queue *q,
		    struct bio *bio) { return; }
	]], [[
		blk_queue_make_request(NULL, &make_request);
	]],
	    [["Dual BSD/GPL"]])], [make_request_fn_void])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([make_request_fn_void], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
		void make_request(struct request_queue *q,
		    struct bio *bio) { return; }
	]], [[
		blk_queue_make_request(NULL, &make_request);
	]], [[]])], [make_request_fn_void_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([make_request_fn_void_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([make_request_fn_blk_qc_t], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	], [
		blk_queue_make_request(NULL, &make_request);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		blk_queue_make_request(NULL, &make_request);
	]],
	    [["Dual BSD/GPL"]])], [make_request_fn_blk_qc_t])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([make_request_fn_blk_qc_t], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		blk_queue_make_request(NULL, &make_request);
	]], [[]])], [make_request_fn_blk_qc_t_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([make_request_fn_blk_qc_t_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_alloc_queue_request_fn], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	], [
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue(make_request, NUMA_NO_NODE);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue(make_request, NUMA_NO_NODE);
	]],
	    [["Dual BSD/GPL"]])], [blk_alloc_queue_request_fn])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_queue_request_fn], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue(make_request, NUMA_NO_NODE);
	]], [[]])], [blk_alloc_queue_request_fn_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_queue_request_fn_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_alloc_queue_request_fn_rh], [
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	], [
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue_rh(make_request, NUMA_NO_NODE);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue_rh(make_request, NUMA_NO_NODE);
	]],
	    [["Dual BSD/GPL"]])], [blk_alloc_queue_request_fn_rh])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_queue_request_fn_rh], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
		blk_qc_t make_request(struct request_queue *q,
		    struct bio *bio) { return (BLK_QC_T_NONE); }
	]], [[
		struct request_queue *q __attribute__ ((unused));
		q = blk_alloc_queue_rh(make_request, NUMA_NO_NODE);
	]], [[]])], [blk_alloc_queue_request_fn_rh_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_queue_request_fn_rh_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([block_device_operations_submit_bio], [
		#include <linux/blkdev.h>
	], [
		struct block_device_operations o;
		o.submit_bio = NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device_operations o;
		o.submit_bio = NULL;
	]],
	    [["Dual BSD/GPL"]])], [block_device_operations_submit_bio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_submit_bio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device_operations o;
		o.submit_bio = NULL;
	]], [[]])], [block_device_operations_submit_bio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([block_device_operations_submit_bio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_alloc_disk], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk  __attribute__ ((unused));
		disk = blk_alloc_disk(NUMA_NO_NODE);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk  __attribute__ ((unused));
		disk = blk_alloc_disk(NUMA_NO_NODE);
	]],
	    [["Dual BSD/GPL"]])], [blk_alloc_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk  __attribute__ ((unused));
		disk = blk_alloc_disk(NUMA_NO_NODE);
	]], [[]])], [blk_alloc_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_alloc_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([blk_cleanup_disk], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk  __attribute__ ((unused));
		blk_cleanup_disk(disk);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk  __attribute__ ((unused));
		blk_cleanup_disk(disk);
	]],
	    [["Dual BSD/GPL"]])], [blk_cleanup_disk])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_cleanup_disk], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk  __attribute__ ((unused));
		blk_cleanup_disk(disk);
	]], [[]])], [blk_cleanup_disk_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([blk_cleanup_disk_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_io_acct_63], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_op(bio),
		    passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), bio_sectors(bio), start_time);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_op(bio),
		    passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), bio_sectors(bio), start_time);
	]],
	    [["Dual BSD/GPL"]])], [bdev_io_acct_63])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_io_acct_63], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_op(bio),
		    passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), bio_sectors(bio), start_time);
	]], [[]])], [bdev_io_acct_63_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_io_acct_63_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bdev_io_acct_old], [
		#include <linux/blkdev.h>
	], [
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_sectors(bio),
		    bio_op(bio), passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), start_time);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_sectors(bio),
		    bio_op(bio), passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), start_time);
	]],
	    [["Dual BSD/GPL"]])], [bdev_io_acct_old])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_io_acct_old], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct block_device *bdev = NULL;
		struct bio *bio = NULL;
		unsigned long passed_time = 0;
		unsigned long start_time;

		start_time = bdev_start_io_acct(bdev, bio_sectors(bio),
		    bio_op(bio), passed_time);
		bdev_end_io_acct(bdev, bio_op(bio), start_time);
	]], [[]])], [bdev_io_acct_old_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bdev_io_acct_old_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([disk_io_acct], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio));
		disk_end_io_acct(disk, bio_op(bio), start_time);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio));
		disk_end_io_acct(disk, bio_op(bio), start_time);
	]],
	    [["Dual BSD/GPL"]])], [disk_io_acct])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([disk_io_acct], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio));
		disk_end_io_acct(disk, bio_op(bio), start_time);
	]], [[]])], [disk_io_acct_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([disk_io_acct_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_io_acct], [
		#include <linux/blkdev.h>
	], [
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = bio_start_io_acct(bio);
		bio_end_io_acct(bio, start_time);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = bio_start_io_acct(bio);
		bio_end_io_acct(bio, start_time);
	]],
	    [["Dual BSD/GPL"]])], [bio_io_acct])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_io_acct], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct bio *bio = NULL;
		unsigned long start_time;

		start_time = bio_start_io_acct(bio);
		bio_end_io_acct(bio, start_time);
	]], [[]])], [bio_io_acct_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_io_acct_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_acct_3args], [
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(int, unsigned long,
		    struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(int, struct hd_struct *,
		    unsigned long) = &generic_end_io_acct;
	], [
		generic_start_io_acct(0, 0, NULL);
		generic_end_io_acct(0, NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(int, unsigned long,
		    struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(int, struct hd_struct *,
		    unsigned long) = &generic_end_io_acct;
	]], [[
		generic_start_io_acct(0, 0, NULL);
		generic_end_io_acct(0, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [generic_acct_3args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_acct_3args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(int, unsigned long,
		    struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(int, struct hd_struct *,
		    unsigned long) = &generic_end_io_acct;
	]], [[
		generic_start_io_acct(0, 0, NULL);
		generic_end_io_acct(0, NULL, 0);
	]], [[]])], [generic_acct_3args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_acct_3args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_acct_4args], [
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(struct request_queue *, int,
		    unsigned long, struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(struct request_queue *, int,
		    struct hd_struct *, unsigned long) = &generic_end_io_acct;
	], [
		generic_start_io_acct(NULL, 0, 0, NULL);
		generic_end_io_acct(NULL, 0, NULL, 0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(struct request_queue *, int,
		    unsigned long, struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(struct request_queue *, int,
		    struct hd_struct *, unsigned long) = &generic_end_io_acct;
	]], [[
		generic_start_io_acct(NULL, 0, 0, NULL);
		generic_end_io_acct(NULL, 0, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [generic_acct_4args])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_acct_4args], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>

		void (*generic_start_io_acct_f)(struct request_queue *, int,
		    unsigned long, struct hd_struct *) = &generic_start_io_acct;
		void (*generic_end_io_acct_f)(struct request_queue *, int,
		    struct hd_struct *, unsigned long) = &generic_end_io_acct;
	]], [[
		generic_start_io_acct(NULL, 0, 0, NULL);
		generic_end_io_acct(NULL, 0, NULL, 0);
	]], [[]])], [generic_acct_4args_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_acct_4args_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FPU
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kernel_fpu], [
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	], [
		kernel_fpu_begin();
		kernel_fpu_end();
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	]], [[
		kernel_fpu_begin();
		kernel_fpu_end();
	]],
	    [["Dual BSD/GPL"]])], [kernel_fpu])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_fpu], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	]], [[
		kernel_fpu_begin();
		kernel_fpu_end();
	]], [[ZFS_META_LICENSE]])], [kernel_fpu_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kernel_fpu_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([__kernel_fpu], [
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	], [
		__kernel_fpu_begin();
		__kernel_fpu_end();
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	]], [[
		__kernel_fpu_begin();
		__kernel_fpu_end();
	]],
	    [["Dual BSD/GPL"]])], [__kernel_fpu])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__kernel_fpu], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/types.h>
		#ifdef HAVE_KERNEL_FPU_API_HEADER
		#include <asm/fpu/api.h>
		#ifdef HAVE_KERNEL_FPU_INTERNAL_HEADER
		#include <asm/fpu/internal.h>
		#endif
		#else
		#include <asm/i387.h>
		#endif
	]], [[
		__kernel_fpu_begin();
		__kernel_fpu_end();
	]], [[ZFS_META_LICENSE]])], [__kernel_fpu_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__kernel_fpu_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FMODE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([type_fmode_t], [
		#include <linux/types.h>
	], [
		fmode_t *ptr __attribute__ ((unused));
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/types.h>
	]], [[
		fmode_t *ptr __attribute__ ((unused));
	]],
	    [["Dual BSD/GPL"]])], [type_fmode_t])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([type_fmode_t], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/types.h>
	]], [[
		fmode_t *ptr __attribute__ ((unused));
	]], [[]])], [type_fmode_t_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([type_fmode_t_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KUIDGID_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kuidgid_t], [
		#include <linux/uidgid.h>
	], [
		kuid_t userid __attribute__ ((unused)) = KUIDT_INIT(0);
		kgid_t groupid __attribute__ ((unused)) = KGIDT_INIT(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/uidgid.h>
	]], [[
		kuid_t userid __attribute__ ((unused)) = KUIDT_INIT(0);
		kgid_t groupid __attribute__ ((unused)) = KGIDT_INIT(0);
	]],
	    [["Dual BSD/GPL"]])], [kuidgid_t])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kuidgid_t], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/uidgid.h>
	]], [[
		kuid_t userid __attribute__ ((unused)) = KUIDT_INIT(0);
		kgid_t groupid __attribute__ ((unused)) = KGIDT_INIT(0);
	]], [[]])], [kuidgid_t_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kuidgid_t_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KUID_HELPERS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([i_uid_read], [
		#include <linux/fs.h>
	], [
		struct inode *ip = NULL;
		(void) i_uid_read(ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) i_uid_read(ip);
	]],
	    [["Dual BSD/GPL"]])], [i_uid_read])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([i_uid_read], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode *ip = NULL;
		(void) i_uid_read(ip);
	]], [[]])], [i_uid_read_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([i_uid_read_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_RENAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_rename2], [
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_rename2])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename2], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	]], [[]], [[]])], [inode_operations_rename2_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename2_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_rename_flags], [
		#include <linux/fs.h>
		int rename_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_rename_flags])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_flags], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]], [[]])], [inode_operations_rename_flags_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_flags_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([dir_inode_operations_wrapper_rename2], [
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations_wrapper
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations_wrapper
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [dir_inode_operations_wrapper_rename2])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dir_inode_operations_wrapper_rename2], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename2_fn(struct inode *sip, struct dentry *sdp,
			struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations_wrapper
		    iops __attribute__ ((unused)) = {
			.rename2 = rename2_fn,
		};
	]], [[]], [[]])], [dir_inode_operations_wrapper_rename2_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([dir_inode_operations_wrapper_rename2_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_rename_userns], [
		#include <linux/fs.h>
		int rename_fn(struct user_namespace *user_ns, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename_fn(struct user_namespace *user_ns, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_rename_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename_fn(struct user_namespace *user_ns, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]], [[]])], [inode_operations_rename_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([inode_operations_rename_mnt_idmap], [
		#include <linux/fs.h>
		int rename_fn(struct mnt_idmap *idmap, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		int rename_fn(struct mnt_idmap *idmap, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [inode_operations_rename_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		int rename_fn(struct mnt_idmap *idmap, struct inode *sip,
			struct dentry *sdp, struct inode *tip, struct dentry *tdp,
			unsigned int flags) { return 0; }

		static const struct inode_operations
		    iops __attribute__ ((unused)) = {
			.rename = rename_fn,
		};
	]], [[]], [[]])], [inode_operations_rename_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([inode_operations_rename_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CURRENT_TIME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([current_time], [
		#include <linux/fs.h>
	], [
		struct inode ip __attribute__ ((unused));
		ip.i_atime = current_time(&ip);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct inode ip __attribute__ ((unused));
		ip.i_atime = current_time(&ip);
	]],
	    [["Dual BSD/GPL"]])], [current_time])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([current_time], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct inode ip __attribute__ ((unused));
		ip.i_atime = current_time(&ip);
	]], [[]])], [current_time_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([current_time_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_USERNS_CAPABILITIES
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_NS_CAPABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([ns_capable], [
		#include <linux/capability.h>
	], [
		ns_capable((struct user_namespace *)NULL, CAP_SYS_ADMIN);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/capability.h>
	]], [[
		ns_capable((struct user_namespace *)NULL, CAP_SYS_ADMIN);
	]],
	    [["Dual BSD/GPL"]])], [ns_capable])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ns_capable], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/capability.h>
	]], [[
		ns_capable((struct user_namespace *)NULL, CAP_SYS_ADMIN);
	]], [[]])], [ns_capable_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ns_capable_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_HAS_CAPABILITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([has_capability], [
		#include <linux/capability.h>
	], [
		struct task_struct *task = NULL;
		int cap = 0;
		bool result __attribute__ ((unused));

		result = has_capability(task, cap);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/capability.h>
	]], [[
		struct task_struct *task = NULL;
		int cap = 0;
		bool result __attribute__ ((unused));

		result = has_capability(task, cap);
	]],
	    [["Dual BSD/GPL"]])], [has_capability])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([has_capability], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/capability.h>
	]], [[
		struct task_struct *task = NULL;
		int cap = 0;
		bool result __attribute__ ((unused));

		result = has_capability(task, cap);
	]], [[]])], [has_capability_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([has_capability_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CRED_USER_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([cred_user_ns], [
		#include <linux/cred.h>
	], [
		struct cred cr;
		cr.user_ns = (struct user_namespace *)NULL;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cred.h>
	]], [[
		struct cred cr;
		cr.user_ns = (struct user_namespace *)NULL;
	]],
	    [["Dual BSD/GPL"]])], [cred_user_ns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cred_user_ns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cred.h>
	]], [[
		struct cred cr;
		cr.user_ns = (struct user_namespace *)NULL;
	]], [[]])], [cred_user_ns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cred_user_ns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KUID_HAS_MAPPING
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kuid_has_mapping], [
		#include <linux/uidgid.h>
	], [
		kuid_has_mapping((struct user_namespace *)NULL, KUIDT_INIT(0));
		kgid_has_mapping((struct user_namespace *)NULL, KGIDT_INIT(0));
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/uidgid.h>
	]], [[
		kuid_has_mapping((struct user_namespace *)NULL, KUIDT_INIT(0));
		kgid_has_mapping((struct user_namespace *)NULL, KGIDT_INIT(0));
	]],
	    [["Dual BSD/GPL"]])], [kuid_has_mapping])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kuid_has_mapping], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/uidgid.h>
	]], [[
		kuid_has_mapping((struct user_namespace *)NULL, KUIDT_INIT(0));
		kgid_has_mapping((struct user_namespace *)NULL, KGIDT_INIT(0));
	]], [[]])], [kuid_has_mapping_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kuid_has_mapping_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_IN_COMPAT_SYSCALL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([in_compat_syscall], [
		#include <linux/compat.h>
	], [
		in_compat_syscall();
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/compat.h>
	]], [[
		in_compat_syscall();
	]],
	    [["Dual BSD/GPL"]])], [in_compat_syscall])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([in_compat_syscall], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/compat.h>
	]], [[
		in_compat_syscall();
	]], [[]])], [in_compat_syscall_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([in_compat_syscall_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTIME
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTIME_GET_COARSE_REAL_TS64
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([ktime_get_coarse_real_ts64], [
		#include <linux/mm.h>
	], [
		struct timespec64 ts;
		ktime_get_coarse_real_ts64(&ts);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		struct timespec64 ts;
		ktime_get_coarse_real_ts64(&ts);
	]],
	    [["Dual BSD/GPL"]])], [ktime_get_coarse_real_ts64])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ktime_get_coarse_real_ts64], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		struct timespec64 ts;
		ktime_get_coarse_real_ts64(&ts);
	]], [[]])], [ktime_get_coarse_real_ts64_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ktime_get_coarse_real_ts64_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTIME_GET_RAW_TS64
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([ktime_get_raw_ts64], [
		#include <linux/mm.h>
	], [
		struct timespec64 ts;
		ktime_get_raw_ts64(&ts);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		struct timespec64 ts;
		ktime_get_raw_ts64(&ts);
	]],
	    [["Dual BSD/GPL"]])], [ktime_get_raw_ts64])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ktime_get_raw_ts64], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		struct timespec64 ts;
		ktime_get_raw_ts64(&ts);
	]], [[]])], [ktime_get_raw_ts64_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([ktime_get_raw_ts64_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TOTALRAM_PAGES_FUNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([totalram_pages], [
		#include <linux/mm.h>
	], [
		unsigned long pages __attribute__ ((unused));
		pages = totalram_pages();
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/mm.h>
	]], [[
		unsigned long pages __attribute__ ((unused));
		pages = totalram_pages();
	]],
	    [["Dual BSD/GPL"]])], [totalram_pages])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([totalram_pages], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/mm.h>
	]], [[
		unsigned long pages __attribute__ ((unused));
		pages = totalram_pages();
	]], [[]])], [totalram_pages_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([totalram_pages_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_TOTALHIGH_PAGES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([totalhigh_pages], [
		#include <linux/highmem.h>
	], [
		unsigned long pages __attribute__ ((unused));
		pages = totalhigh_pages();
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/highmem.h>
	]], [[
		unsigned long pages __attribute__ ((unused));
		pages = totalhigh_pages();
	]],
	    [["Dual BSD/GPL"]])], [totalhigh_pages])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([totalhigh_pages], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/highmem.h>
	]], [[
		unsigned long pages __attribute__ ((unused));
		pages = totalhigh_pages();
	]], [[]])], [totalhigh_pages_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([totalhigh_pages_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KSTRTOUL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kstrtoul], [
		#include <linux/kernel.h>
	], [
		int ret __attribute__ ((unused)) = kstrtoul(NULL, 10, NULL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kernel.h>
	]], [[
		int ret __attribute__ ((unused)) = kstrtoul(NULL, 10, NULL);
	]],
	    [["Dual BSD/GPL"]])], [kstrtoul])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kstrtoul], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kernel.h>
	]], [[
		int ret __attribute__ ((unused)) = kstrtoul(NULL, 10, NULL);
	]], [[]])], [kstrtoul_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kstrtoul_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERCPU
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERCPU_COUNTER_INIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([percpu_counter_init_with_gfp], [
		#include <linux/gfp.h>
		#include <linux/percpu_counter.h>
	], [
		struct percpu_counter counter;
		int error;

		error = percpu_counter_init(&counter, 0, GFP_KERNEL);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/gfp.h>
		#include <linux/percpu_counter.h>
	]], [[
		struct percpu_counter counter;
		int error;

		error = percpu_counter_init(&counter, 0, GFP_KERNEL);
	]],
	    [["Dual BSD/GPL"]])], [percpu_counter_init_with_gfp])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_counter_init_with_gfp], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/gfp.h>
		#include <linux/percpu_counter.h>
	]], [[
		struct percpu_counter counter;
		int error;

		error = percpu_counter_init(&counter, 0, GFP_KERNEL);
	]], [[]])], [percpu_counter_init_with_gfp_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_counter_init_with_gfp_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERCPU_COUNTER_ADD_BATCH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([percpu_counter_add_batch], [
		#include <linux/percpu_counter.h>
	], [
		struct percpu_counter counter;

		percpu_counter_add_batch(&counter, 1, 1);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/percpu_counter.h>
	]], [[
		struct percpu_counter counter;

		percpu_counter_add_batch(&counter, 1, 1);
	]],
	    [["Dual BSD/GPL"]])], [percpu_counter_add_batch])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_counter_add_batch], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/percpu_counter.h>
	]], [[
		struct percpu_counter counter;

		percpu_counter_add_batch(&counter, 1, 1);
	]], [[]])], [percpu_counter_add_batch_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_counter_add_batch_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PERCPU_REF_COUNT_IN_DATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([percpu_ref_count_in_data], [
		#include <linux/percpu-refcount.h>
	], [
		struct percpu_ref_data d;

		atomic_long_set(&d.count, 1L);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/percpu-refcount.h>
	]], [[
		struct percpu_ref_data d;

		atomic_long_set(&d.count, 1L);
	]],
	    [["Dual BSD/GPL"]])], [percpu_ref_count_in_data])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_ref_count_in_data], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/percpu-refcount.h>
	]], [[
		struct percpu_ref_data d;

		atomic_long_set(&d.count, 1L);
	]], [[]])], [percpu_ref_count_in_data_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([percpu_ref_count_in_data_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CPU_HOTPLUG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([cpu_hotplug], [
		#include <linux/cpuhotplug.h>
	], [
		enum cpuhp_state state = CPUHP_ONLINE;
		int (*fp)(unsigned int, struct hlist_node *) = NULL;
		cpuhp_state_add_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_state_remove_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_setup_state_multi(state, "", fp, fp);
		cpuhp_remove_multi_state(0);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/cpuhotplug.h>
	]], [[
		enum cpuhp_state state = CPUHP_ONLINE;
		int (*fp)(unsigned int, struct hlist_node *) = NULL;
		cpuhp_state_add_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_state_remove_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_setup_state_multi(state, "", fp, fp);
		cpuhp_remove_multi_state(0);
	]],
	    [["Dual BSD/GPL"]])], [cpu_hotplug])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cpu_hotplug], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/cpuhotplug.h>
	]], [[
		enum cpuhp_state state = CPUHP_ONLINE;
		int (*fp)(unsigned int, struct hlist_node *) = NULL;
		cpuhp_state_add_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_state_remove_instance_nocalls(0, (struct hlist_node *)NULL);
		cpuhp_setup_state_multi(state, "", fp, fp);
		cpuhp_remove_multi_state(0);
	]], [[]])], [cpu_hotplug_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cpu_hotplug_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_GENERIC_FILLATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_fillattr_userns], [
		#include <linux/fs.h>
	], [
		struct user_namespace *userns = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(userns, in, k);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct user_namespace *userns = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(userns, in, k);
	]],
	    [["Dual BSD/GPL"]])], [generic_fillattr_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fillattr_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct user_namespace *userns = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(userns, in, k);
	]], [[]])], [generic_fillattr_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fillattr_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([generic_fillattr_mnt_idmap], [
		#include <linux/fs.h>
	], [
		struct mnt_idmap *idmap = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(idmap, in, k);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct mnt_idmap *idmap = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(idmap, in, k);
	]],
	    [["Dual BSD/GPL"]])], [generic_fillattr_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fillattr_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct mnt_idmap *idmap = NULL;
		struct inode *in = NULL;
		struct kstat *k = NULL;
		generic_fillattr(idmap, in, k);
	]], [[]])], [generic_fillattr_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([generic_fillattr_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_MKNOD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([mknod_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod          = tmp_mknod,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod          = tmp_mknod,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [mknod_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mknod_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod          = tmp_mknod,
		};
	]], [[]], [[]])], [mknod_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mknod_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([mknod_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod		= tmp_mknod,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod		= tmp_mknod,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [mknod_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mknod_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_mknod(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    umode_t u, dev_t d) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.mknod		= tmp_mknod,
		};
	]], [[]], [[]])], [mknod_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([mknod_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SYMLINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([symlink_mnt_idmap], [
		#include <linux/fs.h>
		#include <linux/sched.h>
		int tmp_symlink(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink                = tmp_symlink,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>
		int tmp_symlink(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink                = tmp_symlink,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [symlink_mnt_idmap])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([symlink_mnt_idmap], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>
		int tmp_symlink(struct mnt_idmap *idmap,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink                = tmp_symlink,
		};
	]], [[]], [[]])], [symlink_mnt_idmap_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([symlink_mnt_idmap_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([symlink_userns], [
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_symlink(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink		= tmp_symlink,
		};
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_symlink(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink		= tmp_symlink,
		};
	]], [[]],
	    [["Dual BSD/GPL"]])], [symlink_userns])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([symlink_userns], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
		#include <linux/sched.h>

		int tmp_symlink(struct user_namespace *userns,
		    struct inode *inode ,struct dentry *dentry,
		    const char *path) { return 0; }

		static const struct inode_operations
			iops __attribute__ ((unused)) = {
			.symlink		= tmp_symlink,
		};
	]], [[]], [[]])], [symlink_userns_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([symlink_userns_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_BIO_MAX_SEGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([bio_max_segs], [
		#include <linux/bio.h>
	], [
		bio_max_segs(1);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/bio.h>
	]], [[
		bio_max_segs(1);
	]],
	    [["Dual BSD/GPL"]])], [bio_max_segs])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_max_segs], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/bio.h>
	]], [[
		bio_max_segs(1);
	]], [[]])], [bio_max_segs_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([bio_max_segs_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SIGNAL_STOP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([signal_stop], [
		#include <linux/sched/signal.h>
	], [
		kernel_signal_stop();
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched/signal.h>
	]], [[
		kernel_signal_stop();
	]],
	    [["Dual BSD/GPL"]])], [signal_stop])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([signal_stop], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched/signal.h>
	]], [[
		kernel_signal_stop();
	]], [[]])], [signal_stop_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([signal_stop_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SIGINFO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([siginfo], [
		#include <linux/signal_types.h>
	], [
		kernel_siginfo_t info __attribute__ ((unused));
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/signal_types.h>
	]], [[
		kernel_siginfo_t info __attribute__ ((unused));
	]],
	    [["Dual BSD/GPL"]])], [siginfo])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([siginfo], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/signal_types.h>
	]], [[
		kernel_siginfo_t info __attribute__ ((unused));
	]], [[]])], [siginfo_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([siginfo_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SYSFS
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SYSFS_DEFAULT_GROUPS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([sysfs_default_groups], [
		#include <linux/kobject.h>
	], [
		struct kobj_type __attribute__ ((unused)) kt = {
			.default_groups = (const struct attribute_group **)NULL };
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kobject.h>
	]], [[
		struct kobj_type __attribute__ ((unused)) kt = {
			.default_groups = (const struct attribute_group **)NULL };
	]],
	    [["Dual BSD/GPL"]])], [sysfs_default_groups])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sysfs_default_groups], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kobject.h>
	]], [[
		struct kobj_type __attribute__ ((unused)) kt = {
			.default_groups = (const struct attribute_group **)NULL };
	]], [[]])], [sysfs_default_groups_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([sysfs_default_groups_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_SET_SPECIAL_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([set_special_state], [
		#include <linux/sched.h>
	], [
		set_special_state(TASK_STOPPED);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched.h>
	]], [[
		set_special_state(TASK_STOPPED);
	]],
	    [["Dual BSD/GPL"]])], [set_special_state])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_special_state], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched.h>
	]], [[
		set_special_state(TASK_STOPPED);
	]], [[]])], [set_special_state_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([set_special_state_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_STANDALONE_LINUX_STDARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([has_standalone_linux_stdarg], [
		#include <linux/stdarg.h>

		#if !defined(va_start) || !defined(va_end) || \
		    !defined(va_arg) || !defined(va_copy)
		#error "<linux/stdarg.h> is invalid"
		#endif
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/stdarg.h>

		#if !defined(va_start) || !defined(va_end) || \
		    !defined(va_arg) || !defined(va_copy)
		#error "<linux/stdarg.h> is invalid"
		#endif
	]], [[]],
	    [["Dual BSD/GPL"]])], [has_standalone_linux_stdarg])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([has_standalone_linux_stdarg], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/stdarg.h>

		#if !defined(va_start) || !defined(va_end) || \
		    !defined(va_arg) || !defined(va_copy)
		#error "<linux/stdarg.h> is invalid"
		#endif
	]], [[]], [[]])], [has_standalone_linux_stdarg_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([has_standalone_linux_stdarg_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_PAGEMAP_FOLIO_WAIT_BIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([pagemap_has_folio_wait_bit], [
		#include <linux/pagemap.h>
	], [
		static struct folio *f = NULL;

		folio_wait_bit(f, PG_writeback);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/pagemap.h>
	]], [[
		static struct folio *f = NULL;

		folio_wait_bit(f, PG_writeback);
	]],
	    [["Dual BSD/GPL"]])], [pagemap_has_folio_wait_bit])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([pagemap_has_folio_wait_bit], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/pagemap.h>
	]], [[
		static struct folio *f = NULL;

		folio_wait_bit(f, PG_writeback);
	]], [[]])], [pagemap_has_folio_wait_bit_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([pagemap_has_folio_wait_bit_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ADD_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([add_disk_ret], [
		#include <linux/blkdev.h>
	], [
		struct gendisk *disk = NULL;
		int error __attribute__ ((unused)) = add_disk(disk);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		int error __attribute__ ((unused)) = add_disk(disk);
	]],
	    [["Dual BSD/GPL"]])], [add_disk_ret])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([add_disk_ret], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/blkdev.h>
	]], [[
		struct gendisk *disk = NULL;
		int error __attribute__ ((unused)) = add_disk(disk);
	]], [[]])], [add_disk_ret_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([add_disk_ret_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTHREAD
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTHREAD_COMPLETE_AND_EXIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kthread_complete_and_exit], [
		#include <linux/kthread.h>
	], [
		struct completion *completion = NULL;
		long code = 0;

		kthread_complete_and_exit(completion, code);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/kthread.h>
	]], [[
		struct completion *completion = NULL;
		long code = 0;

		kthread_complete_and_exit(completion, code);
	]],
	    [["Dual BSD/GPL"]])], [kthread_complete_and_exit])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kthread_complete_and_exit], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/kthread.h>
	]], [[
		struct completion *completion = NULL;
		long code = 0;

		kthread_complete_and_exit(completion, code);
	]], [[]])], [kthread_complete_and_exit_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kthread_complete_and_exit_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_KTHREAD_DEQUEUE_SIGNAL_4ARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([kthread_dequeue_signal], [
		#include <linux/sched/signal.h>
	], [
		struct task_struct *task = NULL;
		sigset_t *mask = NULL;
		kernel_siginfo_t *info = NULL;
		enum pid_type *type = NULL;
		int error __attribute__ ((unused));

		error = dequeue_signal(task, mask, info, type);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/sched/signal.h>
	]], [[
		struct task_struct *task = NULL;
		sigset_t *mask = NULL;
		kernel_siginfo_t *info = NULL;
		enum pid_type *type = NULL;
		int error __attribute__ ((unused));

		error = dequeue_signal(task, mask, info, type);
	]],
	    [["Dual BSD/GPL"]])], [kthread_dequeue_signal])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kthread_dequeue_signal], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/sched/signal.h>
	]], [[
		struct task_struct *task = NULL;
		sigset_t *mask = NULL;
		kernel_siginfo_t *info = NULL;
		enum pid_type *type = NULL;
		int error __attribute__ ((unused));

		error = dequeue_signal(task, mask, info, type);
	]], [[]])], [kthread_dequeue_signal_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([kthread_dequeue_signal_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_ZERO_PAGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([zero_page], [
		#include <asm/pgtable.h>
	], [
		struct page *p __attribute__ ((unused));
		p = ZERO_PAGE(0);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <asm/pgtable.h>
	]], [[
		struct page *p __attribute__ ((unused));
		p = ZERO_PAGE(0);
	]],
	    [["Dual BSD/GPL"]])], [zero_page])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([zero_page], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <asm/pgtable.h>
	]], [[
		struct page *p __attribute__ ((unused));
		p = ZERO_PAGE(0);
	]], [[ZFS_META_LICENSE]])], [zero_page_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([zero_page_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC___COPY_FROM_USER_INATOMIC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([__copy_from_user_inatomic], [
		#include <linux/uaccess.h>
	], [
		int result __attribute__ ((unused)) = __copy_from_user_inatomic(NULL, NULL, 0);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/uaccess.h>
	]], [[
		int result __attribute__ ((unused)) = __copy_from_user_inatomic(NULL, NULL, 0);
	]],
	    [["Dual BSD/GPL"]])], [__copy_from_user_inatomic])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__copy_from_user_inatomic], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/uaccess.h>
	]], [[
		int result __attribute__ ((unused)) = __copy_from_user_inatomic(NULL, NULL, 0);
	]], [[ZFS_META_LICENSE]])], [__copy_from_user_inatomic_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([__copy_from_user_inatomic_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_USER_NS_COMMON_INUM
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([user_ns_common_inum], [
		#include <linux/user_namespace.h>
	], [
		struct user_namespace uns;
		uns.ns.inum = 0;
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/user_namespace.h>
	]], [[
		struct user_namespace uns;
		uns.ns.inum = 0;
	]],
	    [["Dual BSD/GPL"]])], [user_ns_common_inum])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([user_ns_common_inum], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/user_namespace.h>
	]], [[
		struct user_namespace uns;
		uns.ns.inum = 0;
	]], [[]])], [user_ns_common_inum_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([user_ns_common_inum_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_IDMAP_MNT_API
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([idmap_mnt_api], [
                #include <linux/fs.h>
        ], [
		int fs_flags = 0;
		fs_flags |= FS_ALLOW_IDMAP;
        ])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
                #include <linux/fs.h>
        ]], [[
		int fs_flags = 0;
		fs_flags |= FS_ALLOW_IDMAP;
        ]],
	    [["Dual BSD/GPL"]])], [idmap_mnt_api])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([idmap_mnt_api], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
                #include <linux/fs.h>
        ]], [[
		int fs_flags = 0;
		fs_flags |= FS_ALLOW_IDMAP;
        ]], [[]])], [idmap_mnt_api_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([idmap_mnt_api_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_IATTR_VFSID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([iattr_vfsid], [
		#include <linux/fs.h>
	], [
		struct iattr ia;
		ia.ia_vfsuid = (vfsuid_t){0};
		ia.ia_vfsgid = (vfsgid_t){0};
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct iattr ia;
		ia.ia_vfsuid = (vfsuid_t){0};
		ia.ia_vfsgid = (vfsgid_t){0};
	]],
	    [["Dual BSD/GPL"]])], [iattr_vfsid])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iattr_vfsid], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct iattr ia;
		ia.ia_vfsuid = (vfsuid_t){0};
		ia.ia_vfsgid = (vfsgid_t){0};
	]], [[]])], [iattr_vfsid_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([iattr_vfsid_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FILEMAP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([filemap_range_has_page], [
		#include <linux/fs.h>
	], [
		struct address_space *mapping = NULL;
		loff_t lstart = 0;
		loff_t lend = 0;
		bool ret __attribute__ ((unused));

		ret = filemap_range_has_page(mapping, lstart, lend);
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/fs.h>
	]], [[
		struct address_space *mapping = NULL;
		loff_t lstart = 0;
		loff_t lend = 0;
		bool ret __attribute__ ((unused));

		ret = filemap_range_has_page(mapping, lstart, lend);
	]],
	    [["Dual BSD/GPL"]])], [filemap_range_has_page])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([filemap_range_has_page], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/fs.h>
	]], [[
		struct address_space *mapping = NULL;
		loff_t lstart = 0;
		loff_t lend = 0;
		bool ret __attribute__ ((unused));

		ret = filemap_range_has_page(mapping, lstart, lend);
	]], [[]])], [filemap_range_has_page_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([filemap_range_has_page_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_WRITEPAGE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([writepage_t_folio], [
		#include <linux/writeback.h>
		int putpage(struct folio *folio,
		    struct writeback_control *wbc, void *data)
		{ return 0; }
		writepage_t func = putpage;
	], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/writeback.h>
		int putpage(struct folio *folio,
		    struct writeback_control *wbc, void *data)
		{ return 0; }
		writepage_t func = putpage;
	]], [[]],
	    [["Dual BSD/GPL"]])], [writepage_t_folio])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([writepage_t_folio], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/writeback.h>
		int putpage(struct folio *folio,
		    struct writeback_control *wbc, void *data)
		{ return 0; }
		writepage_t func = putpage;
	]], [[]], [[]])], [writepage_t_folio_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([writepage_t_folio_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_CPU_HAS_FEATURE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([cpu_has_feature], [
		#include <linux/version.h>
		#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 7, 0)
		#include <asm/cpu_has_feature.h>
		#else
		#include <asm/cputable.h>
		#endif
	], [
		return cpu_has_feature(CPU_FTR_ALTIVEC) ? 0 : 1;
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <linux/version.h>
		#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 7, 0)
		#include <asm/cpu_has_feature.h>
		#else
		#include <asm/cputable.h>
		#endif
	]], [[
		return cpu_has_feature(CPU_FTR_ALTIVEC) ? 0 : 1;
	]],
	    [["Dual BSD/GPL"]])], [cpu_has_feature])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cpu_has_feature], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <linux/version.h>
		#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 7, 0)
		#include <asm/cpu_has_feature.h>
		#else
		#include <asm/cputable.h>
		#endif
	]], [[
		return cpu_has_feature(CPU_FTR_ALTIVEC) ? 0 : 1;
	]], [[ZFS_META_LICENSE]])], [cpu_has_feature_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([cpu_has_feature_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SRC_FLUSH_DCACHE_PAGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_SRC([flush_dcache_page], [
		#include <asm/cacheflush.h>
	], [
		flush_dcache_page(0);
	], [], [ZFS_META_LICENSE])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM([[
		#include <asm/cacheflush.h>
	]], [[
		flush_dcache_page(0);
	]],
	    [["Dual BSD/GPL"]])], [flush_dcache_page])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([flush_dcache_page], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_C([ZFS_LINUX_TEST_PROGRAM(
		    [[
		#include <asm/cacheflush.h>
	]], [[
		flush_dcache_page(0);
	]], [[ZFS_META_LICENSE]])], [flush_dcache_page_license])
m4trace:configure.ac:60: -1- ZFS_LINUX_CONFTEST_MAKEFILE([flush_dcache_page_license], [yes], [])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_COMPILE_ALL([kabi])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_COMPILE([kabi], [build])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build], [test -f build/build.log], [
		mv build/Makefile build/Makefile.compile.kabi
		mv build/build.log build/build.log.kabi
	], [
	        AC_MSG_ERROR([
        *** Unable to compile test source to determine kernel interfaces.])
	], [yes], [])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_MODPOST([kabi], [build/$name])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build/$name], [test -f build/$name/build.log], [
		mv build/$name/Makefile build/$name/Makefile.modpost.kabi
		cat build/$name/build.log >>build/build.log.kabi
	], [
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_MODPOST([kabi], [build])
m4trace:configure.ac:60: -1- ZFS_LINUX_COMPILE([build], [test -f build/build.log], [
		mv build/Makefile build/Makefile.modpost.kabi
		cat build/build.log >>build/build.log.kabi
	], [
	        AC_MSG_ERROR([
        *** Unable to modpost test source to determine kernel interfaces.])
	], [], [yes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_CC$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LD$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_LLVM$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TEST_RESULT
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ACCESS_OK_TYPE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([access_ok_type], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ACCESS_OK_TYPE, 1,
		    [kernel has access_ok with 'type' parameter])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ACCESS_OK_TYPE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_NODE_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([global_node_page_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GLOBAL_NODE_PAGE_STATE, 1,
		    [global_node_page_state() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GLOBAL_NODE_PAGE_STATE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_ZONE_PAGE_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([global_zone_page_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GLOBAL_ZONE_PAGE_STATE, 1,
		    [global_zone_page_state() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GLOBAL_ZONE_PAGE_STATE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_FILE_PAGES], [node_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_NODE_STAT_ITEM_NR_FILE_PAGES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_ANON], [node_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_NODE_STAT_ITEM_NR_INACTIVE_ANON$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_FILE], [node_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_NODE_STAT_ITEM_NR_INACTIVE_FILE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_FILE_PAGES], [zone_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_ZONE_STAT_ITEM_NR_FILE_PAGES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_ANON], [zone_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_ZONE_STAT_ITEM_NR_INACTIVE_ANON$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENUM_MEMBER([NR_INACTIVE_FILE], [zone_stat_item], [$LINUX/include/linux/mmzone.h])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_ENUM_ZONE_STAT_ITEM_NR_INACTIVE_FILE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_ZONE_PAGE_STATE_SANITY
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_FILE_PAGES])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_FILE_PAGES], [DUPLICATE])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_FILE_PAGES], [NOT FOUND])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_INACTIVE_ANON])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_INACTIVE_ANON], [DUPLICATE])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_INACTIVE_ANON], [NOT FOUND])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_CHECK([NR_INACTIVE_FILE])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_INACTIVE_FILE], [DUPLICATE])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GLOBAL_PAGE_STATE_ENUM_ERROR([NR_INACTIVE_FILE], [NOT FOUND])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([global page state])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_OBJTOOL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([objtool], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_OBJTOOL, 1,
		    [kernel does stack verification])

		AC_MSG_CHECKING([whether STACK_FRAME_NON_STANDARD is defined])
		ZFS_LINUX_TEST_RESULT([stack_frame_non_standard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STACK_FRAME_NON_STANDARD, 1,
			   [STACK_FRAME_NON_STANDARD is defined])
		],[
			AC_MSG_RESULT(no)
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_OBJTOOL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([stack_frame_non_standard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_STACK_FRAME_NON_STANDARD, 1,
			   [STACK_FRAME_NON_STANDARD is defined])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_STACK_FRAME_NON_STANDARD$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PDE_DATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([pde_data], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SPL_PDE_DATA, pde_data, [pde_data() is pde_data()])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(SPL_PDE_DATA, PDE_DATA, [pde_data() is PDE_DATA()])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SPL_PDE_DATA$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SPL_PDE_DATA$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FALLOCATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_fallocate], [
		AC_MSG_RESULT(yes)
		AC_MSG_CHECKING([whether FALLOC_FL_ZERO_RANGE exists])
		ZFS_LINUX_TEST_RESULT([falloc_fl_zero_range], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FALLOC_FL_ZERO_RANGE, 1, [FALLOC_FL_ZERO_RANGE is defined])
		],[
			AC_MSG_RESULT(no)
		])
	], [
		ZFS_LINUX_TEST_ERROR([file_fallocate])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([falloc_fl_zero_range], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FALLOC_FL_ZERO_RANGE, 1, [FALLOC_FL_ZERO_RANGE is defined])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FALLOC_FL_ZERO_RANGE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([file_fallocate])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FADVISE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_fadvise], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_FADVISE, 1, [fops->fadvise() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILE_FADVISE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_FADVISE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([generic_fadvise], [generic_fadvise], [mm/fadvise.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_FADVISE, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([generic_fadvise], [mm/fadvise.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_FADVISE, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FADVISE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FADVISE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FADVISE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([2args_zlib_deflate_workspacesize], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE, 1,
		    [zlib_deflate_workspacesize() wants 2 args])
	], [
		ZFS_LINUX_TEST_ERROR([zlib_deflate_workspacesize()])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_ZLIB_DEFLATE_WORKSPACESIZE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([zlib_deflate_workspacesize()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RWSEM
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RWSEM_ACTIVITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([rwsem_activity], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_RWSEM_ACTIVITY, 1,
		    [struct rw_semaphore has member activity])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RWSEM_ACTIVITY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RWSEM_ATOMIC_LONG_COUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([rwsem_atomic_long_count], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_RWSEM_ATOMIC_LONG_COUNT, 1,
		    [struct rw_semaphore has atomic_long_t member count])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RWSEM_ATOMIC_LONG_COUNT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SCHED
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SCHED_RT_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([sched_rt_header], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([sched_rt_header])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([sched_rt_header])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SCHED_SIGNAL_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([sched_signal_header], [
		AC_DEFINE(HAVE_SCHED_SIGNAL_HEADER, 1,
		    [linux/sched/signal.h exists])
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SCHED_SIGNAL_HEADER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_IO_SCHEDULE_TIMEOUT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([io_schedule_timeout], [io_schedule_timeout], [], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IO_SCHEDULE_TIMEOUT, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([io_schedule_timeout], [], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IO_SCHEDULE_TIMEOUT, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IO_SCHEDULE_TIMEOUT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IO_SCHEDULE_TIMEOUT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IO_SCHEDULE_TIMEOUT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_USLEEP_RANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([usleep_range], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([usleep_range()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([usleep_range()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KMEM_CACHE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KMEM_CACHE_CREATE_USERCOPY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kmem_cache_create_usercopy], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KMEM_CACHE_CREATE_USERCOPY, 1,
		    [kmem_cache_create_usercopy() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KMEM_CACHE_CREATE_USERCOPY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KVMALLOC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kvmalloc], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KVMALLOC, 1, [kvmalloc exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KVMALLOC$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VMALLOC_PAGE_KERNEL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([__vmalloc], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VMALLOC_PAGE_KERNEL, 1, [__vmalloc page flags exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VMALLOC_PAGE_KERNEL$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WAIT
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WAIT_ON_BIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([wait_on_bit], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_ON_BIT_ACTION, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WAIT_ON_BIT_ACTION$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WAIT_QUEUE_HEAD_ENTRY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([wait_queue_head_entry], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WAIT_QUEUE_HEAD_ENTRY, 1,
		    [wq_head->head and wq_entry->entry exist])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WAIT_QUEUE_HEAD_ENTRY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_TIMES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([timestamp_truncate], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_TIMESTAMP_TRUNCATE, 1,
		    [timestamp_truncate() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_TIMESTAMP_TRUNCATE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_times], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_TIMESPEC64_TIMES, 1,
		    [inode->i_*time's are timespec64])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_TIMESPEC64_TIMES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_LOCK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_lock], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_LOCK_SHARED, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_LOCK_SHARED$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GROUP_INFO_GID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([group_info_gid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GROUP_INFO_GID, 1, [group_info->gid exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GROUP_INFO_GID$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RW
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WRITE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kernel_write], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_WRITE_PPOS, 1,
		    [kernel_write() take loff_t pointer])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_WRITE_PPOS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_READ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kernel_read], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_READ_PPOS, 1,
		    [kernel_read() take loff_t pointer])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_READ_PPOS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TIMER_SETUP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([timer_setup], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_SETUP, 1,
		    [timer_setup() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_TIMER_SETUP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([timer_list_function], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_FUNCTION_TIMER_LIST, 1,
		    [timer_list.function gets a timer_list])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_TIMER_FUNCTION_TIMER_LIST$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([timer_list_flags], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_TIMER_LIST_FLAGS, 1,
		    [struct timer_list has a flags member])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_TIMER_LIST_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SUPER_USER_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([super_user_ns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SUPER_USER_NS, 1,
		    [super_block->s_user_ns exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUPER_USER_NS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PROC_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([proc_ops_struct], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PROC_OPS_STRUCT, 1, [proc_ops structure exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PROC_OPS_STRUCT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_CHECK_EVENTS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([block_device_operations_check_events], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bops->check_events()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bops->check_events()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_RELEASE_VOID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([block_device_operations_release_void], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bops->release()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bops->release()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([block_device_operations_revalidate_disk], [
		AC_DEFINE([HAVE_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK], [1],
			[Define if revalidate_disk() in block_device_operations])
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLOCK_DEVICE_OPERATIONS_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_FAILFAST_MASK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_failfast_mask], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([REQ_FAILFAST_MASK])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([REQ_FAILFAST_MASK])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_DISCARD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_discard], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_DISCARD, 1, [REQ_DISCARD is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_DISCARD$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_FLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_FLUSH, 1, [REQ_FLUSH is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_FLUSH$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_PREFLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_preflush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_PREFLUSH, 1, [REQ_PREFLUSH is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_PREFLUSH$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_OP_DISCARD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_op_discard], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_DISCARD, 1, [REQ_OP_DISCARD is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_OP_DISCARD$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_OP_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_op_secure_erase], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_SECURE_ERASE, 1,
		    [REQ_OP_SECURE_ERASE is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_OP_SECURE_ERASE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_REQ_OP_FLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([req_op_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REQ_OP_FLUSH, 1, [REQ_OP_FLUSH is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REQ_OP_FLUSH$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_BI_OPF
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bi_opf], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BI_OPF, 1, [bio->bi_opf is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_BI_OPF$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_SET_OP_ATTRS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_set_op_attrs], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_SET_OP_ATTRS, 1,
		    [bio_set_op_attrs is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_SET_OP_ATTRS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_SET_DEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_set_dev], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_SET_DEV, 1, [bio_set_dev() is available])

		AC_MSG_CHECKING([whether bio_set_dev() is GPL-only])
		ZFS_LINUX_TEST_RESULT([bio_set_dev_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_GPL_ONLY, 1,
			    [bio_set_dev() GPL-only])
		])

		AC_MSG_CHECKING([whether bio_set_dev() is a macro])
		ZFS_LINUX_TEST_RESULT([bio_set_dev_macro], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_MACRO, 1,
			    [bio_set_dev() is a macro])
		],[
			AC_MSG_RESULT(no)
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_SET_DEV$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_set_dev_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_GPL_ONLY, 1,
			    [bio_set_dev() GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_SET_DEV_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_set_dev_macro], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BIO_SET_DEV_MACRO, 1,
			    [bio_set_dev() is a macro])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_SET_DEV_MACRO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_END_IO_T_ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_end_io_t_args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_1ARG_BIO_END_IO_T, 1,
		    [bio_end_io_t wants 1 arg])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_BIO_END_IO_T$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_BI_STATUS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bi_status], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BI_STATUS, 1, [bio->bi_status exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_BI_STATUS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_BVEC_ITER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bvec_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BVEC_ITER, 1, [bio has bi_iter])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_BVEC_ITER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_SUBMIT_BIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([submit_bio], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_1ARG_SUBMIT_BIO, 1, [submit_bio() wants 1 arg])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_SUBMIT_BIO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_CURRENT_BIO_LIST
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([current_bio_list], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bio_list])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bio_list])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKG_TRYGET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkg_tryget], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKG_TRYGET, 1, [blkg_tryget() is available])

		AC_MSG_CHECKING([whether blkg_tryget() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blkg_tryget_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKG_TRYGET_GPL_ONLY, 1,
			    [blkg_tryget() GPL-only])
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKG_TRYGET$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkg_tryget_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKG_TRYGET_GPL_ONLY, 1,
			    [blkg_tryget() GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKG_TRYGET_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_BDEV_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bdev_disk], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BIO_BDEV_DISK, 1, [bio->bi_bdev->bd_disk exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_BDEV_DISK$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BDEV_SUBMIT_BIO_RETURNS_VOID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_bdev_submit_bio_void], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_SUBMIT_BIO_RETURNS_VOID, 1,
			[block_device_operations->submit_bio() returns void])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_SUBMIT_BIO_RETURNS_VOID$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_CGROUP_HEADER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_cgroup_header], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_LINUX_BLK_CGROUP_HEADER, 1,
			[linux/blk-cgroup.h exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LINUX_BLK_CGROUP_HEADER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_ALLOC_4ARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_alloc_4arg], [
		AC_MSG_RESULT(yes)
		AC_DEFINE([HAVE_BIO_ALLOC_4ARG], 1, [bio_alloc() takes 4 arguments])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_ALLOC_4ARG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_GET_BY_PATH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_get_by_path], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blkdev_get_by_path()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blkdev_get_by_path()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_PUT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_put], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blkdev_put()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blkdev_put()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_REREAD_PART
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_reread_part], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKDEV_REREAD_PART, 1,
		    [blkdev_reread_part() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKDEV_REREAD_PART$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_INVALIDATE_BDEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([invalidate_bdev], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([invalidate_bdev()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([invalidate_bdev()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_LOOKUP_BDEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_devt], [lookup_bdev], [fs/block_dev.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DEVT_LOOKUP_BDEV, 1,
		    [lookup_bdev() wants dev_t arg])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether lookup_bdev() wants 1 arg])
		ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg],
		    [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg], [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode], [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode], [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DEVT_LOOKUP_BDEV, 1,
		    [lookup_bdev() wants dev_t arg])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether lookup_bdev() wants 1 arg])
		ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg],
		    [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_1arg], [lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode], [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_1ARG_LOOKUP_BDEV, 1,
			    [lookup_bdev() wants 1 arg])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether lookup_bdev() wants mode arg])
			ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode],
			    [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lookup_bdev_mode], [lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lookup_bdev], [fs/block_dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MODE_LOOKUP_BDEV, 1,
				    [lookup_bdev() wants mode arg])
			], [
				ZFS_LINUX_TEST_ERROR([lookup_bdev()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([lookup_bdev()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MODE_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_1ARG_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DEVT_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DEVT_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DEVT_LOOKUP_BDEV$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_LOGICAL_BLOCK_SIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_logical_block_size], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bdev_logical_block_size()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdev_logical_block_size()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_PHYSICAL_BLOCK_SIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_physical_block_size], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([bdev_physical_block_size()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdev_physical_block_size()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_CHECK_DISK_CHANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([check_disk_change], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CHECK_DISK_CHANGE, 1,
		    [check_disk_change() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CHECK_DISK_CHANGE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_CHECK_MEDIA_CHANGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_check_media_change], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_CHECK_MEDIA_CHANGE, 1,
		    [bdev_check_media_change() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_CHECK_MEDIA_CHANGE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_WHOLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_whole], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_WHOLE, 1, [bdev_whole() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_WHOLE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEVNAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdevname], [
		AC_DEFINE(HAVE_BDEVNAME, 1, [bdevname() is available])
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEVNAME$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_GET_ERESTARTSYS
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKDEV_GET_ERESTARTSYS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_ISSUE_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_issue_secure_erase], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLKDEV_ISSUE_SECURE_ERASE, 1,
		    [blkdev_issue_secure_erase() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blkdev_issue_discard() is available])
		ZFS_LINUX_TEST_RESULT([blkdev_issue_discard_flags], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKDEV_ISSUE_DISCARD, 1,
			    [blkdev_issue_discard() is available])
		],[
			ZFS_LINUX_TEST_ERROR([blkdev_issue_discard()])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKDEV_ISSUE_SECURE_ERASE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blkdev_issue_discard_flags], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLKDEV_ISSUE_DISCARD, 1,
			    [blkdev_issue_discard() is available])
		], [
			ZFS_LINUX_TEST_ERROR([blkdev_issue_discard()])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLKDEV_ISSUE_DISCARD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blkdev_issue_discard()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_BDEV_KOBJ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_kobj], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_KOBJ, 1,
		    [bdev_kobj() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_KOBJ$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLKDEV_PART_TO_DEV
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([part_to_dev], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PART_TO_DEV, 1,
		    [part_to_dev() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PART_TO_DEV$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_PLUG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_plug], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blk_plug])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_plug])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_BDI
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_bdi], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_BDI_DYNAMIC, 1,
		    [blk queue backing_dev_info is dynamic])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_BDI_DYNAMIC$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_UPDATE_READAHEAD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_update_readahead], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_UPDATE_READAHEAD, 1,
		    [blk_queue_update_readahead() exists])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether disk_update_readahead() exists])
		ZFS_LINUX_TEST_RESULT([disk_update_readahead], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_DISK_UPDATE_READAHEAD, 1,
			    [disk_update_readahead() exists])
		],[
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_UPDATE_READAHEAD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([disk_update_readahead], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_DISK_UPDATE_READAHEAD, 1,
			    [disk_update_readahead() exists])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DISK_UPDATE_READAHEAD$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_DISCARD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_max_discard_sectors], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_MAX_DISCARD_SECTORS, 1,
		    [bdev_max_discard_sectors() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blk_queue_discard() is available])
		ZFS_LINUX_TEST_RESULT([blk_queue_discard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_DISCARD, 1,
			    [blk_queue_discard() is available])
		],[
			ZFS_LINUX_TEST_ERROR([blk_queue_discard])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_MAX_DISCARD_SECTORS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_discard], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_DISCARD, 1,
			    [blk_queue_discard() is available])
		], [
			ZFS_LINUX_TEST_ERROR([blk_queue_discard])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_DISCARD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_queue_discard])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_SECURE_ERASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_max_secure_erase_sectors], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_MAX_SECURE_ERASE_SECTORS, 1,
		    [bdev_max_secure_erase_sectors() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether blk_queue_secure_erase() is available])
		ZFS_LINUX_TEST_RESULT([blk_queue_secure_erase], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECURE_ERASE, 1,
			    [blk_queue_secure_erase() is available])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether blk_queue_secdiscard() is available])
			ZFS_LINUX_TEST_RESULT([blk_queue_secdiscard], [
				AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECDISCARD, 1,
				    [blk_queue_secdiscard() is available])
			],[
				ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_MAX_SECURE_ERASE_SECTORS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_secure_erase], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECURE_ERASE, 1,
			    [blk_queue_secure_erase() is available])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether blk_queue_secdiscard() is available])
			ZFS_LINUX_TEST_RESULT([blk_queue_secdiscard], [
				AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECDISCARD, 1,
				    [blk_queue_secdiscard() is available])
			],[
				ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_SECURE_ERASE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_secdiscard], [
				AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_SECDISCARD, 1,
				    [blk_queue_secdiscard() is available])
			], [
				ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_SECDISCARD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_queue_secure_erase])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_FLAG_SET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_flag_set], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLAG_SET, 1,
		    [blk_queue_flag_set() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_FLAG_SET$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_FLAG_CLEAR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_flag_clear], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLAG_CLEAR, 1,
		    [blk_queue_flag_clear() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_FLAG_CLEAR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_FLUSH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_flush], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_FLUSH, 1,
		    [blk_queue_flush() is available])

		AC_MSG_CHECKING([whether blk_queue_flush() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blk_queue_flush_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_FLUSH_GPL_ONLY, 1,
			    [blk_queue_flush() is GPL-only])
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_FLUSH$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_flush_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_FLUSH_GPL_ONLY, 1,
			    [blk_queue_flush() is GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_FLUSH_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_write_cache], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_QUEUE_WRITE_CACHE, 1,
		    [blk_queue_write_cache() exists])

		AC_MSG_CHECKING([whether blk_queue_write_cache() is GPL-only])
		ZFS_LINUX_TEST_RESULT([blk_queue_write_cache_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_WRITE_CACHE_GPL_ONLY, 1,
			    [blk_queue_write_cache() is GPL-only])
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_WRITE_CACHE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_write_cache_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BLK_QUEUE_WRITE_CACHE_GPL_ONLY, 1,
			    [blk_queue_write_cache() is GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_QUEUE_WRITE_CACHE_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_MAX_HW_SECTORS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_max_hw_sectors], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blk_queue_max_hw_sectors])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_queue_max_hw_sectors])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_QUEUE_MAX_SEGMENTS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_queue_max_segments], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([blk_queue_max_segments])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([blk_queue_max_segments])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BLK_MQ
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_mq], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BLK_MQ, 1, [block multiqueue is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_MQ$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENHD_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([genhd_fl_ext_devt], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GENHD_FL_EXT_DEVT, GENHD_FL_EXT_DEVT,
		    [GENHD_FL_EXT_DEVT flag is available])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(ZFS_GENHD_FL_EXT_DEVT, 0,
		    [GENHD_FL_EXT_DEVT flag is not available])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GENHD_FL_EXT_DEVT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GENHD_FL_EXT_DEVT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([genhd_fl_no_part], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_GENHD_FL_NO_PART, GENHD_FL_NO_PART,
		    [GENHD_FL_NO_PART flag is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether GENHD_FL_NO_PART_SCAN flag is available])
		ZFS_LINUX_TEST_RESULT([genhd_fl_no_part_scan], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(ZFS_GENHD_FL_NO_PART, GENHD_FL_NO_PART_SCAN,
			    [GENHD_FL_NO_PART_SCAN flag is available])
		], [
			ZFS_LINUX_TEST_ERROR([GENHD_FL_NO_PART|GENHD_FL_NO_PART_SCAN])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GENHD_FL_NO_PART$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([genhd_fl_no_part_scan], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(ZFS_GENHD_FL_NO_PART, GENHD_FL_NO_PART_SCAN,
			    [GENHD_FL_NO_PART_SCAN flag is available])
		], [
			ZFS_LINUX_TEST_ERROR([GENHD_FL_NO_PART|GENHD_FL_NO_PART_SCAN])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_GENHD_FL_NO_PART$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([GENHD_FL_NO_PART|GENHD_FL_NO_PART_SCAN])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_REVALIDATE_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk_size], [revalidate_disk_size], [block/genhd.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REVALIDATE_DISK_SIZE, 1,
		    [revalidate_disk_size() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether revalidate_disk() is available])
		ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk],
		    [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk], [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([revalidate_disk_size], [block/genhd.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REVALIDATE_DISK_SIZE, 1,
		    [revalidate_disk_size() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether revalidate_disk() is available])
		ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk],
		    [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([revalidate_disk], [revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([revalidate_disk], [block/genhd.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_REVALIDATE_DISK, 1,
			    [revalidate_disk() is available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK_SIZE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK_SIZE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REVALIDATE_DISK_SIZE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GET_DISK_RO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([get_disk_ro], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([get_disk_ro()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([get_disk_ro()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_READLINK_GLOBAL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([generic_readlink_global], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_GENERIC_READLINK, 1,
		    [generic_readlink is global])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_READLINK$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DISCARD_GRANULARITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([discard_granularity], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([ql->discard_granularity])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([ql->discard_granularity])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_OWNER_OR_CAPABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_owner_or_capable], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE, 1,
		    [inode_owner_or_capable() exists])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING(
		    [whether inode_owner_or_capable() takes user_ns])
		ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_USERNS, 1,
			    [inode_owner_or_capable() takes user_ns])
		],[
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether inode_owner_or_capable() takes mnt_idmap])
			ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_mnt_idmap], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_IDMAP, 1,
				    [inode_owner_or_capable() takes mnt_idmap])
			], [
				ZFS_LINUX_TEST_ERROR([capability])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_OWNER_OR_CAPABLE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_USERNS, 1,
			    [inode_owner_or_capable() takes user_ns])
		], [
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether inode_owner_or_capable() takes mnt_idmap])
			ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_mnt_idmap], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_IDMAP, 1,
				    [inode_owner_or_capable() takes mnt_idmap])
			], [
				ZFS_LINUX_TEST_ERROR([capability])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_OWNER_OR_CAPABLE_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_owner_or_capable_mnt_idmap], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE_IDMAP, 1,
				    [inode_owner_or_capable() takes mnt_idmap])
			], [
				ZFS_LINUX_TEST_ERROR([capability])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_OWNER_OR_CAPABLE_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([capability])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONST_XATTR_HANDLER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([const_xattr_handler], [
		AC_MSG_RESULT([yes])
	], [
		ZFS_LINUX_TEST_ERROR([const xattr_handler])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([const xattr_handler])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR_HANDLER_NAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_name], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_HANDLER_NAME, 1,
		    [xattr_handler has name])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_HANDLER_NAME$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR_HANDLER_GET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE, 1,
		    [xattr_handler->get() wants both dentry and inode])
	], [
		dnl #
		dnl # 4.4 API change,
		dnl # The xattr_handler->get() callback was changed to take a
		dnl # attr_handler, and handler_flags argument was removed and
		dnl # should be accessed by handler->flags.
		dnl #
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(
		    [whether xattr_handler->get() wants xattr_handler])
		ZFS_LINUX_TEST_RESULT([xattr_handler_get_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_GET_HANDLER, 1,
			    [xattr_handler->get() wants xattr_handler])
		],[
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->get() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->get() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_GET_DENTRY, 1,
				    [xattr_handler->get() wants dentry])
			],[
				dnl #
				dnl # Android API change,
				dnl # The xattr_handler->get() callback was
				dnl # changed to take dentry, inode and flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->get() wants dentry and inode and flags])
				ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				],[
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_GET_DENTRY_INODE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_get_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_GET_HANDLER, 1,
			    [xattr_handler->get() wants xattr_handler])
		], [
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->get() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->get() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_GET_DENTRY, 1,
				    [xattr_handler->get() wants dentry])
			],[
				dnl #
				dnl # Android API change,
				dnl # The xattr_handler->get() callback was
				dnl # changed to take dentry, inode and flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->get() wants dentry and inode and flags])
				ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				],[
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_GET_HANDLER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_GET_DENTRY, 1,
				    [xattr_handler->get() wants dentry])
			], [
				dnl #
				dnl # Android API change,
				dnl # The xattr_handler->get() callback was
				dnl # changed to take dentry, inode and flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->get() wants dentry and inode and flags])
				ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				],[
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_GET_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_get_dentry_inode_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_GET_DENTRY_INODE_FLAGS, 1,
					    [xattr_handler->get() wants dentry and inode and flags])
				], [
					ZFS_LINUX_TEST_ERROR([xattr get()])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_GET_DENTRY_INODE_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([xattr get()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR_HANDLER_SET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_SET_IDMAP, 1,
		    [xattr_handler->set() takes mnt_idmap])
	], [
		AC_MSG_CHECKING([whether xattr_handler->set() wants dentry, inode, and user_namespace])
		ZFS_LINUX_TEST_RESULT([xattr_handler_set_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_SET_USERNS, 1,
			    [xattr_handler->set() takes user_namespace])
		],[
			dnl #
			dnl # 4.7 API change,
			dnl # The xattr_handler->set() callback was changed to take both
			dnl # dentry and inode.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING([whether xattr_handler->set() wants dentry and inode])
			ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry_inode], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_SET_DENTRY_INODE, 1,
				    [xattr_handler->set() wants both dentry and inode])
			],[
				dnl #
				dnl # 4.4 API change,
				dnl # The xattr_handler->set() callback was changed to take a
				dnl # xattr_handler, and handler_flags argument was removed and
				dnl # should be accessed by handler->flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->set() wants xattr_handler])
				ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				],[
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_SET_USERNS, 1,
			    [xattr_handler->set() takes user_namespace])
		], [
			dnl #
			dnl # 4.7 API change,
			dnl # The xattr_handler->set() callback was changed to take both
			dnl # dentry and inode.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING([whether xattr_handler->set() wants dentry and inode])
			ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry_inode], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_SET_DENTRY_INODE, 1,
				    [xattr_handler->set() wants both dentry and inode])
			],[
				dnl #
				dnl # 4.4 API change,
				dnl # The xattr_handler->set() callback was changed to take a
				dnl # xattr_handler, and handler_flags argument was removed and
				dnl # should be accessed by handler->flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->set() wants xattr_handler])
				ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				],[
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry_inode], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_SET_DENTRY_INODE, 1,
				    [xattr_handler->set() wants both dentry and inode])
			], [
				dnl #
				dnl # 4.4 API change,
				dnl # The xattr_handler->set() callback was changed to take a
				dnl # xattr_handler, and handler_flags argument was removed and
				dnl # should be accessed by handler->flags.
				dnl #
				AC_MSG_RESULT(no)
				AC_MSG_CHECKING(
				    [whether xattr_handler->set() wants xattr_handler])
				ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				],[
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_DENTRY_INODE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_xattr_handler], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_XATTR_SET_HANDLER, 1,
					    [xattr_handler->set() wants xattr_handler])
				], [
					dnl #
					dnl # 2.6.33 API change,
					dnl # The xattr_handler->set() callback was changed
					dnl # to take a dentry instead of an inode, and a
					dnl # handler_flags argument was added.
					dnl #
					AC_MSG_RESULT(no)
					AC_MSG_CHECKING(
					    [whether xattr_handler->set() wants dentry])
					ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					],[
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_HANDLER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_set_dentry], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_XATTR_SET_DENTRY, 1,
						    [xattr_handler->set() wants dentry])
					], [
						ZFS_LINUX_TEST_ERROR([xattr set()])
					])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_SET_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([xattr set()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_XATTR_HANDLER_LIST
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_list_simple], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_XATTR_LIST_SIMPLE, 1,
		    [xattr_handler->list() wants simple])
	], [
		dnl #
		dnl # 4.4 API change,
		dnl # The xattr_handler->list() callback was changed to take a
		dnl # xattr_handler, and handler_flags argument was removed
		dnl # and should be accessed by handler->flags.
		dnl #
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING(
		    [whether xattr_handler->list() wants xattr_handler])
		ZFS_LINUX_TEST_RESULT([xattr_handler_list_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_LIST_HANDLER, 1,
			    [xattr_handler->list() wants xattr_handler])
		],[
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->list() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->list() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_list_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_LIST_DENTRY, 1,
				    [xattr_handler->list() wants dentry])
			],[
				ZFS_LINUX_TEST_ERROR([xattr list()])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_LIST_SIMPLE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_list_xattr_handler], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_XATTR_LIST_HANDLER, 1,
			    [xattr_handler->list() wants xattr_handler])
		], [
			dnl #
			dnl # 2.6.33 API change,
			dnl # The xattr_handler->list() callback was changed
			dnl # to take a dentry instead of an inode, and a
			dnl # handler_flags argument was added.
			dnl #
			AC_MSG_RESULT(no)
			AC_MSG_CHECKING(
			    [whether xattr_handler->list() wants dentry])
			ZFS_LINUX_TEST_RESULT([xattr_handler_list_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_LIST_DENTRY, 1,
				    [xattr_handler->list() wants dentry])
			],[
				ZFS_LINUX_TEST_ERROR([xattr list()])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_LIST_HANDLER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([xattr_handler_list_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_XATTR_LIST_DENTRY, 1,
				    [xattr_handler->list() wants dentry])
			], [
				ZFS_LINUX_TEST_ERROR([xattr list()])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_XATTR_LIST_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([xattr list()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_FROM_XATTR_USERNS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_from_xattr_userns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_FROM_XATTR_USERNS, 1,
		    [posix_acl_from_xattr() needs user_ns])
	], [
		ZFS_LINUX_TEST_ERROR([posix_acl_from_xattr()])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_FROM_XATTR_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([posix_acl_from_xattr()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_SETXATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([have_generic_setxattr], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_SETXATTR, 1,
		    [generic_setxattr() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_SETXATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ACL
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_RELEASE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_release], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_RELEASE, 1,
		    [posix_acl_release() is available])

		AC_MSG_CHECKING([whether posix_acl_release() is GPL-only])
		ZFS_LINUX_TEST_RESULT([posix_acl_release_license], [
			AC_MSG_RESULT(no)
		],[
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_RELEASE_GPL_ONLY, 1,
			    [posix_acl_release() is GPL-only])
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_RELEASE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_release_license], [
			AC_MSG_RESULT(no)
		], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_RELEASE_GPL_ONLY, 1,
			    [posix_acl_release() is GPL-only])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_RELEASE_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SET_CACHED_ACL_USABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([set_cached_acl_license], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_CACHED_ACL_USABLE, 1,
		    [set_cached_acl() is usable])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_CACHED_ACL_USABLE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_CHMOD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([__posix_acl_chmod], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE___POSIX_ACL_CHMOD, 1,
		    [__posix_acl_chmod() exists])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether posix_acl_chmod exists])
		ZFS_LINUX_TEST_RESULT([posix_acl_chmod], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_CHMOD, 1,
			    [posix_acl_chmod() exists])
		],[
			ZFS_LINUX_TEST_ERROR([posix_acl_chmod()])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE___POSIX_ACL_CHMOD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_chmod], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_POSIX_ACL_CHMOD, 1,
			    [posix_acl_chmod() exists])
		], [
			ZFS_LINUX_TEST_ERROR([posix_acl_chmod()])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_CHMOD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([posix_acl_chmod()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_EQUIV_MODE_WANTS_UMODE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_equiv_mode], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([posix_acl_equiv_mode()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([posix_acl_equiv_mode()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_POSIX_ACL_VALID_WITH_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([posix_acl_valid_with_ns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_POSIX_ACL_VALID_WITH_NS, 1,
		    [posix_acl_valid() wants user namespace])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_POSIX_ACL_VALID_WITH_NS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_OPERATIONS_GET_ACL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_acl], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GET_ACL, 1, [iops->get_acl() exists])
	], [
		ZFS_LINUX_TEST_RESULT([inode_operations_get_acl_rcu], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_ACL_RCU, 1, [iops->get_acl() takes rcu])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_get_inode_acl], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_GET_INODE_ACL, 1, [has iops->get_inode_acl()])
			],[
				ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_ACL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_acl_rcu], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_ACL_RCU, 1, [iops->get_acl() takes rcu])
		], [
			ZFS_LINUX_TEST_RESULT([inode_operations_get_inode_acl], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_GET_INODE_ACL, 1, [has iops->get_inode_acl()])
			],[
				ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_ACL_RCU$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_inode_acl], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_GET_INODE_ACL, 1, [has iops->get_inode_acl()])
			], [
				ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_INODE_ACL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([iops->get_acl() or iops->get_inode_acl()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_OPERATIONS_SET_ACL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
		AC_DEFINE(HAVE_SET_ACL_USERNS, 1, [iops->set_acl() takes 4 args])
	], [
		ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_mnt_idmap_dentry], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
			AC_DEFINE(HAVE_SET_ACL_IDMAP_DENTRY, 1,
			    [iops->set_acl() takes 4 args, arg1 is struct mnt_idmap *])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
				AC_DEFINE(HAVE_SET_ACL_USERNS_DENTRY_ARG2, 1,
				    [iops->set_acl() takes 4 args, arg2 is struct dentry *])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_mnt_idmap_dentry], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
			AC_DEFINE(HAVE_SET_ACL_IDMAP_DENTRY, 1,
			    [iops->set_acl() takes 4 args, arg1 is struct mnt_idmap *])
		], [
			ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
				AC_DEFINE(HAVE_SET_ACL_USERNS_DENTRY_ARG2, 1,
				    [iops->set_acl() takes 4 args, arg2 is struct dentry *])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL_IDMAP_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_set_acl_userns_dentry], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists])
				AC_DEFINE(HAVE_SET_ACL_USERNS_DENTRY_ARG2, 1,
				    [iops->set_acl() takes 4 args, arg2 is struct dentry *])
			], [
				ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL_USERNS_DENTRY_ARG2$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_set_acl], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SET_ACL, 1, [iops->set_acl() exists, takes 3 args])
				], [
					ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_ACL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_REQUIRE_API([i_op->set_acl()], [3.14])
m4trace:configure.ac:60: -1- AS_VERSION_COMPARE_LE([3.14], [$kernsrcver], [
		AC_MSG_ERROR([
		*** None of the expected "i_op->set_acl()" interfaces were detected. This
		*** interface is expected for kernels version "3.14" and above.
		*** This may be because your kernel version is newer than what is
		*** supported, or you are using a patched custom kernel with
		*** incompatible modifications.  Newer kernels may have incompatible
		*** APIs.
		***
		*** ZFS Version: $ZFS_META_ALIAS
		*** Compatible Kernels: $ZFS_META_KVER_MIN - $ZFS_META_KVER_MAX
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GET_ACL_HANDLE_CACHE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([get_acl_handle_cache], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KERNEL_GET_ACL_HANDLE_CACHE, 1,
		    [uncached_acl_sentinel() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_GET_ACL_HANDLE_CACHE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ACL_HAS_REFCOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([acl_refcount], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ACL_REFCOUNT, 1, [posix_acl has refcount_t])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ACL_REFCOUNT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_SETATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_setattr_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IDMAP_IOPS_SETATTR, 1,
		    [iops->setattr() takes struct mnt_idmap*])
	], [
		AC_MSG_RESULT(no)
		dnl #
		dnl # Kernel 5.12 test
		dnl #
		AC_MSG_CHECKING([whether iops->setattr() takes user_namespace])
		ZFS_LINUX_TEST_RESULT([inode_operations_setattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_SETATTR, 1,
			    [iops->setattr() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->setattr() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_setattr], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_IOPS_SETATTR, 1,
					[iops->setattr() exists])
			],[
				AC_MSG_RESULT(no)
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IDMAP_IOPS_SETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_setattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_SETATTR, 1,
			    [iops->setattr() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->setattr() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_setattr], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_IOPS_SETATTR, 1,
					[iops->setattr() exists])
			],[
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_USERNS_IOPS_SETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_setattr], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_IOPS_SETATTR, 1,
					[iops->setattr() exists])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_SETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_GETATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_getattr_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IDMAP_IOPS_GETATTR, 1,
		    [iops->getattr() takes struct mnt_idmap*])
	], [
		AC_MSG_RESULT(no)
		dnl #
		dnl # Kernel 5.12 test
		dnl #
		AC_MSG_CHECKING([whether iops->getattr() takes user_namespace])
		ZFS_LINUX_TEST_RESULT([inode_operations_getattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_GETATTR, 1,
			    [iops->getattr() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # Kernel 4.11 test
			dnl #
			AC_MSG_CHECKING([whether iops->getattr() takes a path])
			ZFS_LINUX_TEST_RESULT([inode_operations_getattr_path], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PATH_IOPS_GETATTR, 1,
					[iops->getattr() takes a path])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Kernel < 4.11 test
				dnl #
				AC_MSG_CHECKING([whether iops->getattr() takes a vfsmount])
				ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				],[
					AC_MSG_RESULT(no)
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IDMAP_IOPS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_getattr_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_USERNS_IOPS_GETATTR, 1,
			    [iops->getattr() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # Kernel 4.11 test
			dnl #
			AC_MSG_CHECKING([whether iops->getattr() takes a path])
			ZFS_LINUX_TEST_RESULT([inode_operations_getattr_path], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PATH_IOPS_GETATTR, 1,
					[iops->getattr() takes a path])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Kernel < 4.11 test
				dnl #
				AC_MSG_CHECKING([whether iops->getattr() takes a vfsmount])
				ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				],[
					AC_MSG_RESULT(no)
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_USERNS_IOPS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_getattr_path], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PATH_IOPS_GETATTR, 1,
					[iops->getattr() takes a path])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # Kernel < 4.11 test
				dnl #
				AC_MSG_CHECKING([whether iops->getattr() takes a vfsmount])
				ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				],[
					AC_MSG_RESULT(no)
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PATH_IOPS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_getattr_vfsmount], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_VFSMOUNT_IOPS_GETATTR, 1,
						[iops->getattr() takes a vfsmount])
				], [
					AC_MSG_RESULT(no)
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFSMOUNT_IOPS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_SET_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_set_flags], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_SET_FLAGS, 1, [inode_set_flags() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_SET_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INODE_SET_IVERSION
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_set_iversion], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_INODE_SET_IVERSION, 1,
		    [inode_set_iversion() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_INODE_SET_IVERSION$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHOW_OPTIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([super_operations_show_options], [
		AC_MSG_RESULT([yes])
	], [
		ZFS_LINUX_TEST_ERROR([sops->show_options()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([sops->show_options()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FILE_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_INODE, 1, [file_inode() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILE_INODE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FILE_DENTRY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_dentry], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_DENTRY, 1, [file_dentry() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILE_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FSYNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([fsync_without_dentry], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_FSYNC_WITHOUT_DENTRY, 1,
		    [fops->fsync() without dentry])
	], [
		AC_MSG_RESULT([no])

		dnl #
		dnl # Linux 3.1 - 3.x API
		dnl #
		AC_MSG_CHECKING([whether fops->fsync() wants range])
		ZFS_LINUX_TEST_RESULT([fsync_range], [
			AC_MSG_RESULT([range])
			AC_DEFINE(HAVE_FSYNC_RANGE, 1,
			    [fops->fsync() with range])
		],[
			ZFS_LINUX_TEST_ERROR([fops->fsync])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FSYNC_WITHOUT_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([fsync_range], [
			AC_MSG_RESULT([range])
			AC_DEFINE(HAVE_FSYNC_RANGE, 1,
			    [fops->fsync() with range])
		], [
			ZFS_LINUX_TEST_ERROR([fops->fsync])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FSYNC_RANGE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([fops->fsync])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_AIO_FSYNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([aio_fsync], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILE_AIO_FSYNC, 1, [fops->aio_fsync() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILE_AIO_FSYNC$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_EVICT_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([evict_inode], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_EVICT_INODE, 1, [sops->evict_inode() exists])
	], [
		ZFS_LINUX_TEST_ERROR([evict_inode])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_EVICT_INODE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([evict_inode])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DIRTY_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dirty_inode_with_flags], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_DIRTY_INODE_WITH_FLAGS, 1,
		    [sops->dirty_inode() wants flags])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DIRTY_INODE_WITH_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHRINKER
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SUPER_BLOCK_S_SHRINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([super_block_s_shrink], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([sb->s_shrink()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([sb->s_shrink()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHRINK_CONTROL_HAS_NID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([shrink_control_nid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SHRINK_CONTROL_HAS_NID, 1,
		    [struct shrink_control has nid])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SHRINK_CONTROL_HAS_NID$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHRINKER_CALLBACK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([register_shrinker_vararg], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_REGISTER_SHRINKER_VARARG, 1,
		    [register_shrinker is vararg])

		dnl # We assume that the split shrinker callback exists if the
		dnl # vararg register_shrinker() exists, because the latter is
		dnl # a much more recent addition, and the macro test for the
		dnl # var-arg version only works if the callback is split
		AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
			[cs->count_objects exists])
	], [
		AC_MSG_RESULT(no)
		dnl #
		dnl # 3.0 - 3.11 API change
		dnl # cs->shrink(struct shrinker *, struct shrink_control *sc)
		dnl #
		AC_MSG_CHECKING([whether new 2-argument shrinker exists])
		ZFS_LINUX_TEST_RESULT([shrinker_cb_shrink_control], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SINGLE_SHRINKER_CALLBACK, 1,
				[new shrinker callback wants 2 args])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 3.12 API change,
			dnl # cs->shrink() is logically split in to
			dnl # cs->count_objects() and cs->scan_objects()
			dnl #
			AC_MSG_CHECKING([if cs->count_objects callback exists])
			ZFS_LINUX_TEST_RESULT(
				[shrinker_cb_shrink_control_split],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
						[cs->count_objects exists])
			],[
					ZFS_LINUX_TEST_ERROR([shrinker])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_REGISTER_SHRINKER_VARARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SPLIT_SHRINKER_CALLBACK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([shrinker_cb_shrink_control], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SINGLE_SHRINKER_CALLBACK, 1,
				[new shrinker callback wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 3.12 API change,
			dnl # cs->shrink() is logically split in to
			dnl # cs->count_objects() and cs->scan_objects()
			dnl #
			AC_MSG_CHECKING([if cs->count_objects callback exists])
			ZFS_LINUX_TEST_RESULT(
				[shrinker_cb_shrink_control_split],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
						[cs->count_objects exists])
			],[
					ZFS_LINUX_TEST_ERROR([shrinker])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SINGLE_SHRINKER_CALLBACK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([shrinker_cb_shrink_control_split], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_SPLIT_SHRINKER_CALLBACK, 1,
						[cs->count_objects exists])
			], [
					ZFS_LINUX_TEST_ERROR([shrinker])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SPLIT_SHRINKER_CALLBACK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([shrinker])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SHRINK_CONTROL_STRUCT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([shrink_control_struct], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SHRINK_CONTROL_STRUCT, 1,
		    [struct shrink_control exists])
	], [
		ZFS_LINUX_TEST_ERROR([shrink_control])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SHRINK_CONTROL_STRUCT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([shrink_control])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_MKDIR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([mkdir_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_MKDIR_IDMAP, 1,
		    [iops->mkdir() takes struct mnt_idmap*])
	], [
		dnl #
		dnl # 5.12 API change
		dnl # The struct user_namespace arg was added as the first argument to
		dnl # mkdir() of the iops structure.
		dnl #
		AC_MSG_CHECKING([whether iops->mkdir() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([mkdir_user_namespace], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKDIR_USERNS, 1,
			    [iops->mkdir() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->mkdir() takes umode_t])
			ZFS_LINUX_TEST_RESULT([inode_operations_mkdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MKDIR_UMODE_T, 1,
				    [iops->mkdir() takes umode_t])
			],[
				ZFS_LINUX_TEST_ERROR([mkdir()])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_MKDIR_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([mkdir_user_namespace], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKDIR_USERNS, 1,
			    [iops->mkdir() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->mkdir() takes umode_t])
			ZFS_LINUX_TEST_RESULT([inode_operations_mkdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MKDIR_UMODE_T, 1,
				    [iops->mkdir() takes umode_t])
			],[
				ZFS_LINUX_TEST_ERROR([mkdir()])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_MKDIR_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_mkdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_MKDIR_UMODE_T, 1,
				    [iops->mkdir() takes umode_t])
			], [
				ZFS_LINUX_TEST_ERROR([mkdir()])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MKDIR_UMODE_T$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([mkdir()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_LOOKUP_FLAGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([lookup_flags], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([iops->lookup()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([iops->lookup()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CREATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([create_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_CREATE_IDMAP, 1,
		   [iops->create() takes struct mnt_idmap*])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether iops->create() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([create_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_CREATE_USERNS, 1,
			   [iops->create() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->create() passes flags])
			ZFS_LINUX_TEST_RESULT([create_flags], [
				AC_MSG_RESULT(yes)
			],[
				ZFS_LINUX_TEST_ERROR([iops->create()])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_CREATE_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([create_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_CREATE_USERNS, 1,
			   [iops->create() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->create() passes flags])
			ZFS_LINUX_TEST_RESULT([create_flags], [
				AC_MSG_RESULT(yes)
			],[
				ZFS_LINUX_TEST_ERROR([iops->create()])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_CREATE_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([create_flags], [
				AC_MSG_RESULT(yes)
			], [
				ZFS_LINUX_TEST_ERROR([iops->create()])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([iops->create()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERMISSION
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([permission_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_PERMISSION_IDMAP, 1,
		   [iops->permission() takes struct mnt_idmap*])
	], [
		AC_MSG_CHECKING([whether iops->permission() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([permission_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_PERMISSION_USERNS, 1,
			   [iops->permission() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_PERMISSION_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([permission_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_PERMISSION_USERNS, 1,
			   [iops->permission() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_PERMISSION_USERNS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GET_LINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_link], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GET_LINK_DELAYED, 1, [iops->get_link() delayed])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 4.5 API change
		dnl # The follow_link() interface has been replaced by
		dnl # get_link() which behaves the same as before except:
		dnl # - An inode is passed as a separate argument
		dnl # - When called in RCU mode a NULL dentry is passed.
		dnl #
		AC_MSG_CHECKING([whether iops->get_link() passes cookie])
		ZFS_LINUX_TEST_RESULT([inode_operations_get_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_LINK_COOKIE, 1,
			    [iops->get_link() cookie])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 4.2 API change
			dnl # This kernel retired the nameidata structure.
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->follow_link() passes cookie])
			ZFS_LINUX_TEST_RESULT([inode_operations_follow_link], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_FOLLOW_LINK_COOKIE, 1,
				    [iops->follow_link() cookie])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # 2.6.32 API
				dnl #
				AC_MSG_CHECKING(
				[whether iops->follow_link() passes nameidata])
				ZFS_LINUX_TEST_RESULT(
				    [inode_operations_follow_link_nameidata],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				],[
					ZFS_LINUX_TEST_ERROR([get_link])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_LINK_DELAYED$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_GET_LINK_COOKIE, 1,
			    [iops->get_link() cookie])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 4.2 API change
			dnl # This kernel retired the nameidata structure.
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->follow_link() passes cookie])
			ZFS_LINUX_TEST_RESULT([inode_operations_follow_link], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_FOLLOW_LINK_COOKIE, 1,
				    [iops->follow_link() cookie])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # 2.6.32 API
				dnl #
				AC_MSG_CHECKING(
				[whether iops->follow_link() passes nameidata])
				ZFS_LINUX_TEST_RESULT(
				    [inode_operations_follow_link_nameidata],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				],[
					ZFS_LINUX_TEST_ERROR([get_link])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GET_LINK_COOKIE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_follow_link], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_FOLLOW_LINK_COOKIE, 1,
				    [iops->follow_link() cookie])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 2.6.32 API
				dnl #
				AC_MSG_CHECKING(
				[whether iops->follow_link() passes nameidata])
				ZFS_LINUX_TEST_RESULT(
				    [inode_operations_follow_link_nameidata],[
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				],[
					ZFS_LINUX_TEST_ERROR([get_link])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FOLLOW_LINK_COOKIE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_follow_link_nameidata], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_FOLLOW_LINK_NAMEIDATA, 1,
					    [iops->follow_link() nameidata])
				], [
					ZFS_LINUX_TEST_ERROR([get_link])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FOLLOW_LINK_NAMEIDATA$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([get_link])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PUT_LINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_get_link], [
		AC_DEFINE(HAVE_PUT_LINK_DELAYED, 1, [iops->put_link() delayed])
	], [
		dnl #
		dnl # 4.2 API change
		dnl # This kernel retired the nameidata structure.
		dnl #
		AC_MSG_CHECKING([whether iops->put_link() passes cookie])
		ZFS_LINUX_TEST_RESULT([put_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_PUT_LINK_COOKIE, 1,
			    [iops->put_link() cookie])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.32 API
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->put_link() passes nameidata])
			ZFS_LINUX_TEST_RESULT([put_link_nameidata], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PUT_LINK_NAMEIDATA, 1,
				    [iops->put_link() nameidata])
			],[
				ZFS_LINUX_TEST_ERROR([put_link])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PUT_LINK_DELAYED$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([put_link_cookie], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_PUT_LINK_COOKIE, 1,
			    [iops->put_link() cookie])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.32 API
			dnl #
			AC_MSG_CHECKING(
			    [whether iops->put_link() passes nameidata])
			ZFS_LINUX_TEST_RESULT([put_link_nameidata], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PUT_LINK_NAMEIDATA, 1,
				    [iops->put_link() nameidata])
			],[
				ZFS_LINUX_TEST_ERROR([put_link])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PUT_LINK_COOKIE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([put_link_nameidata], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_PUT_LINK_NAMEIDATA, 1,
				    [iops->put_link() nameidata])
			], [
				ZFS_LINUX_TEST_ERROR([put_link])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PUT_LINK_NAMEIDATA$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([put_link])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TMPFILE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
		AC_DEFINE(HAVE_TMPFILE_IDMAP, 1, [i_op->tmpfile() has mnt_idmap])
	], [
		ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
			AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
		],[
			ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry_userns], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
				AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
				AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
			AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
		], [
			ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry_userns], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
				AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
				AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
			],[
				ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry_userns], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
				AC_DEFINE(HAVE_TMPFILE_USERNS, 1, [i_op->tmpfile() has userns])
				AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
			], [
				ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				],[
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_tmpfile_dentry], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_TMPFILE, 1, [i_op->tmpfile() exists])
					AC_DEFINE(HAVE_TMPFILE_DENTRY, 1, [i_op->tmpfile() uses old dentry signature])
				], [
					ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TMPFILE_DENTRY$])
m4trace:configure.ac:60: -1- ZFS_LINUX_REQUIRE_API([i_op->tmpfile()], [3.11])
m4trace:configure.ac:60: -1- AS_VERSION_COMPARE_LE([3.11], [$kernsrcver], [
		AC_MSG_ERROR([
		*** None of the expected "i_op->tmpfile()" interfaces were detected. This
		*** interface is expected for kernels version "3.11" and above.
		*** This may be because your kernel version is newer than what is
		*** supported, or you are using a patched custom kernel with
		*** incompatible modifications.  Newer kernels may have incompatible
		*** APIs.
		***
		*** ZFS Version: $ZFS_META_ALIAS
		*** Compatible Kernels: $ZFS_META_KVER_MIN - $ZFS_META_KVER_MAX
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_AUTOMOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dentry_operations_d_automount], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([dops->d_automount()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([dops->d_automount()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ENCODE_FH_WITH_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([export_operations_encode_fh], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ENCODE_FH_WITH_INODE, 1,
		    [eops->encode_fh() wants child and parent inodes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ENCODE_FH_WITH_INODE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_COMMIT_METADATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([export_operations_commit_metadata], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([eops->commit_metadata()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([eops->commit_metadata()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CLEAR_INODE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([clear_inode], [clear_inode], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CLEAR_INODE, 1, [clear_inode() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([clear_inode], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CLEAR_INODE, 1, [clear_inode() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CLEAR_INODE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CLEAR_INODE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CLEAR_INODE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SETATTR_PREPARE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_mnt_idmap], [setattr_prepare], [fs/attr.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SETATTR_PREPARE_IDMAP, 1,
		    [setattr_prepare() accepts mnt_idmap])
	], [
		AC_MSG_CHECKING([whether setattr_prepare() is available and accepts struct user_namespace*])
		ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns],
		    [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns], [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare], [setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare], [setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SETATTR_PREPARE_IDMAP, 1,
		    [setattr_prepare() accepts mnt_idmap])
	], [
		AC_MSG_CHECKING([whether setattr_prepare() is available and accepts struct user_namespace*])
		ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns],
		    [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare_userns], [setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare], [setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_SETATTR_PREPARE_USERNS, 1,
			    [setattr_prepare() accepts user_namespace])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether setattr_prepare() is available, doesn't accept user_namespace])
			ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare],
				[setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([setattr_prepare], [setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([setattr_prepare], [fs/attr.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_SETATTR_PREPARE_NO_USERNS, 1,
					[setattr_prepare() is available, doesn't accept user_namespace])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_NO_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_USERNS$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_IDMAP$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_IDMAP$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SETATTR_PREPARE_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_INSERT_INODE_LOCKED
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([insert_inode_locked], [insert_inode_locked], [fs/inode.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([insert_inode_locked], [fs/inode.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([insert_inode_locked()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DENTRY
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_MAKE_ROOT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([d_make_root], [d_make_root], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_MAKE_ROOT, 1, [d_make_root() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([d_make_root], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_MAKE_ROOT, 1, [d_make_root() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_MAKE_ROOT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_MAKE_ROOT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_MAKE_ROOT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_OBTAIN_ALIAS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([d_obtain_alias], [d_obtain_alias], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([d_obtain_alias], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_obtain_alias()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_PRUNE_ALIASES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([d_prune_aliases], [d_prune_aliases], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_PRUNE_ALIASES, 1,
		    [d_prune_aliases() is available])
	], [
		ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([d_prune_aliases], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_PRUNE_ALIASES, 1,
		    [d_prune_aliases() is available])
	], [
		ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_prune_aliases()])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_PRUNE_ALIASES$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_PRUNE_ALIASES$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_PRUNE_ALIASES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_SET_D_OP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([d_set_d_op], [d_set_d_op], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_set_d_op])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_set_d_op])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([d_set_d_op], [fs/dcache.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([d_set_d_op])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([d_set_d_op])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_D_REVALIDATE_NAMEIDATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dentry_operations_revalidate], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_D_REVALIDATE_NAMEIDATA, 1,
		    [dops->d_revalidate() operation takes nameidata])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_D_REVALIDATE_NAMEIDATA$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CONST_DENTRY_OPERATIONS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dentry_operations_const], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CONST_DENTRY_OPERATIONS, 1,
		    [dentry uses const struct dentry_operations])
	], [
		ZFS_LINUX_TEST_ERROR([const dentry_operations])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CONST_DENTRY_OPERATIONS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([const dentry_operations])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_S_D_OP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([super_block_s_d_op], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([super_block s_d_op])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([super_block s_d_op])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_DENTRY_ALIAS_D_U
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dentry_alias_d_u], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DENTRY_D_U_ALIASES, 1,
		    [dentry aliases are in d_u member])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DENTRY_D_U_ALIASES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TRUNCATE_SETSIZE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([truncate_setsize], [truncate_setsize], [mm/truncate.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([truncate_setsize])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([truncate_setsize])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([truncate_setsize], [mm/truncate.c], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([truncate_setsize])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([truncate_setsize])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SECURITY_INODE
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SECURITY_INODE_INIT_SECURITY_CALLBACK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([security_inode_init_security], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([security_inode_init_security callback])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([security_inode_init_security callback])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FST_MOUNT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_system_type_mount], [
                AC_MSG_RESULT(yes)
        ], [
		ZFS_LINUX_TEST_ERROR([fst->mount()])
        ])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([fst->mount()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BDI
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([super_setup_bdi_name], [super_setup_bdi_name], [fs/super.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SUPER_SETUP_BDI_NAME, 1,
                    [super_setup_bdi_name() exits])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 4.0 - 4.11, bdi_setup_and_register() takes 2 arguments.
		dnl #
		AC_MSG_CHECKING(
		    [whether bdi_setup_and_register() wants 2 args])
		ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register],
		    [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register], [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register_3args], [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register_3args], [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([super_setup_bdi_name], [fs/super.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SUPER_SETUP_BDI_NAME, 1,
                    [super_setup_bdi_name() exits])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 4.0 - 4.11, bdi_setup_and_register() takes 2 arguments.
		dnl #
		AC_MSG_CHECKING(
		    [whether bdi_setup_and_register() wants 2 args])
		ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register],
		    [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register], [bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register_3args], [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_2ARGS_BDI_SETUP_AND_REGISTER, 1,
			    [bdi_setup_and_register() wants 2 args])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # 2.6.34 - 3.19, bdi_setup_and_register()
			dnl # takes 3 arguments.
			dnl #
			AC_MSG_CHECKING(
			    [whether bdi_setup_and_register() wants 3 args])
			ZFS_LINUX_TEST_RESULT_SYMBOL(
			    [bdi_setup_and_register_3args],
			    [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
		])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([bdi_setup_and_register_3args], [bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([bdi_setup_and_register], [mm/backing-dev.c], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_3ARGS_BDI_SETUP_AND_REGISTER, 1,
				    [bdi_setup_and_register() wants 3 args])
			], [
				ZFS_LINUX_TEST_ERROR([bdi_setup])
			])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([bdi_setup])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_BDI_SETUP_AND_REGISTER$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUPER_SETUP_BDI_NAME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUPER_SETUP_BDI_NAME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUPER_SETUP_BDI_NAME$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SET_NLINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([set_nlink], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([set_nlink()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([set_nlink()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SGET
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([sget_5args], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([sget()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([sget()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_LSEEK_EXECUTE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([lseek_execute], [lseek_exclusive], [fs/read_write.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_LSEEK_EXECUTE, 1, [lseek_execute() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([lseek_exclusive], [fs/read_write.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_LSEEK_EXECUTE, 1, [lseek_execute() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LSEEK_EXECUTE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LSEEK_EXECUTE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_LSEEK_EXECUTE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_FILEMAP_DIRTY_FOLIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_has_filemap_dirty_folio], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_FILEMAP_DIRTY_FOLIO, 1,
			[filemap_dirty_folio exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_FILEMAP_DIRTY_FOLIO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_READ_FOLIO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_has_read_folio], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_READ_FOLIO, 1, [read_folio exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_READ_FOLIO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GETATTR
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GETATTR_4ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_getattr_4args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_4ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 4 args])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_4ARGS_VFS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GETATTR_2ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_getattr_2args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_2ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 2 args])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_2ARGS_VFS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GETATTR_3ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_getattr_3args], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_3ARGS_VFS_GETATTR, 1,
		    [vfs_getattr wants 3 args])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_3ARGS_VFS_GETATTR$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_FSYNC_2ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_fsync_2args], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([vfs_fsync()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([vfs_fsync()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_ITERATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_operations_iterate_shared], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VFS_ITERATE_SHARED, 1,
		    [fops->iterate_shared() is available])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 3.11 API change
		dnl #
		dnl # RHEL 7.5 compatibility; the fops.iterate() method was
		dnl # added to the file_operations structure but in order to
		dnl # maintain KABI compatibility all callers must set
		dnl # FMODE_KABI_ITERATE which is checked in iterate_dir().
		dnl # When detected ignore this interface and fallback to
		dnl # to using fops.readdir() to retain KABI compatibility.
		dnl #
		AC_MSG_CHECKING([whether fops->iterate() is available])
		ZFS_LINUX_TEST_RESULT([file_operations_iterate], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_VFS_ITERATE, 1,
			    [fops->iterate() is available])
		],[
			AC_MSG_RESULT(no)

			dnl #
			dnl # readdir interface introduced
			dnl #
			AC_MSG_CHECKING([whether fops->readdir() is available])
			ZFS_LINUX_TEST_RESULT([file_operations_readdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_VFS_READDIR, 1,
				    [fops->readdir() is available])
			],[
				ZFS_LINUX_TEST_ERROR([vfs_iterate])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_ITERATE_SHARED$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_operations_iterate], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_VFS_ITERATE, 1,
			    [fops->iterate() is available])
		], [
			AC_MSG_RESULT(no)

			dnl #
			dnl # readdir interface introduced
			dnl #
			AC_MSG_CHECKING([whether fops->readdir() is available])
			ZFS_LINUX_TEST_RESULT([file_operations_readdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_VFS_READDIR, 1,
				    [fops->readdir() is available])
			],[
				ZFS_LINUX_TEST_ERROR([vfs_iterate])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_ITERATE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_operations_readdir], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_VFS_READDIR, 1,
				    [fops->readdir() is available])
			], [
				ZFS_LINUX_TEST_ERROR([vfs_iterate])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_READDIR$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([vfs_iterate])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_DIRECT_IO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([direct_io_iter], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER, 1,
		    [aops->direct_IO() uses iov_iter without rw])
	], [
		AC_MSG_RESULT([no])

		dnl #
		dnl # Linux 4.1.x API change
		dnl #
		AC_MSG_CHECKING(
		    [whether aops->direct_IO() uses offset])
		ZFS_LINUX_TEST_RESULT([direct_io_iter_offset], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_OFFSET, 1,
			    [aops->direct_IO() uses iov_iter with offset])

		],[
			AC_MSG_RESULT([no])

			dnl #
			dnl # Linux 3.16.x API change
			dnl #
			AC_MSG_CHECKING(
			    [whether aops->direct_IO() uses rw and offset])
			ZFS_LINUX_TEST_RESULT([direct_io_iter_rw_offset], [
				AC_MSG_RESULT([yes])
				AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET, 1,
				    [aops->direct_IO() uses iov_iter with ]
				    [rw and offset])
			],[
				AC_MSG_RESULT([no])

				dnl #
				dnl # Ancient Linux API (predates git)
				dnl #
				AC_MSG_CHECKING(
				    [whether aops->direct_IO() uses iovec])
				ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				],[
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_DIRECT_IO_ITER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([direct_io_iter_offset], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_OFFSET, 1,
			    [aops->direct_IO() uses iov_iter with offset])

		], [
			AC_MSG_RESULT([no])

			dnl #
			dnl # Linux 3.16.x API change
			dnl #
			AC_MSG_CHECKING(
			    [whether aops->direct_IO() uses rw and offset])
			ZFS_LINUX_TEST_RESULT([direct_io_iter_rw_offset], [
				AC_MSG_RESULT([yes])
				AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET, 1,
				    [aops->direct_IO() uses iov_iter with ]
				    [rw and offset])
			],[
				AC_MSG_RESULT([no])

				dnl #
				dnl # Ancient Linux API (predates git)
				dnl #
				AC_MSG_CHECKING(
				    [whether aops->direct_IO() uses iovec])
				ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				],[
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_DIRECT_IO_ITER_OFFSET$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([direct_io_iter_rw_offset], [
				AC_MSG_RESULT([yes])
				AC_DEFINE(HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET, 1,
				    [aops->direct_IO() uses iov_iter with ]
				    [rw and offset])
			], [
				AC_MSG_RESULT([no])

				dnl #
				dnl # Ancient Linux API (predates git)
				dnl #
				AC_MSG_CHECKING(
				    [whether aops->direct_IO() uses iovec])
				ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				],[
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_DIRECT_IO_ITER_RW_OFFSET$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([direct_io_iovec], [
					AC_MSG_RESULT([yes])
					AC_DEFINE(HAVE_VFS_DIRECT_IO_IOVEC, 1,
					    [aops->direct_IO() uses iovec])
				], [
					ZFS_LINUX_TEST_ERROR([direct IO])
					AC_MSG_RESULT([no])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_DIRECT_IO_IOVEC$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([direct IO])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_READPAGES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_has_readpages], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_READPAGES, 1,
			[address_space_operations->readpages exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_READPAGES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_SET_PAGE_DIRTY_NOBUFFERS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([vfs_has_set_page_dirty_nobuffers], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_VFS_SET_PAGE_DIRTY_NOBUFFERS, 1,
			[__set_page_dirty_nobuffers exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_SET_PAGE_DIRTY_NOBUFFERS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_RW_ITERATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([file_operations_rw], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_VFS_RW_ITERATE, 1,
		    [fops->read/write_iter() are available])

		dnl #
		dnl # Linux 4.1 API
		dnl #
		AC_MSG_CHECKING([whether new_sync_read/write() are available])
		ZFS_LINUX_TEST_RESULT([new_sync_rw], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_NEW_SYNC_READ, 1,
			    [new_sync_read()/new_sync_write() are available])
		],[
			AC_MSG_RESULT(no)
		])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_RW_ITERATE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([new_sync_rw], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_NEW_SYNC_READ, 1,
			    [new_sync_read()/new_sync_write() are available])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_NEW_SYNC_READ$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_GENERIC_WRITE_CHECKS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([generic_write_checks], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_GENERIC_WRITE_CHECKS_KIOCB, 1,
		    [generic_write_checks() takes kiocb])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_WRITE_CHECKS_KIOCB$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_VFS_IOV_ITER
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_types], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_TYPES, 1,
		    [iov_iter types are available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_TYPES$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_advance], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_ADVANCE, 1,
		    [iov_iter_advance() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_ADVANCE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_revert], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_REVERT, 1,
		    [iov_iter_revert() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_REVERT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_fault_in_readable], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_FAULT_IN_READABLE, 1,
		    [iov_iter_fault_in_readable() is available])
	], [
		AC_MSG_RESULT(no)

		AC_MSG_CHECKING([whether fault_in_iov_iter_readable() is available])
		ZFS_LINUX_TEST_RESULT([fault_in_iov_iter_readable], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FAULT_IN_IOV_ITER_READABLE, 1,
			    [fault_in_iov_iter_readable() is available])
		],[
			AC_MSG_RESULT(no)
			enable_vfs_iov_iter="no"
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_FAULT_IN_READABLE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([fault_in_iov_iter_readable], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_FAULT_IN_IOV_ITER_READABLE, 1,
			    [fault_in_iov_iter_readable() is available])
		], [
			AC_MSG_RESULT(no)
			enable_vfs_iov_iter="no"
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FAULT_IN_IOV_ITER_READABLE$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_count], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_COUNT, 1,
		    [iov_iter_count() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_COUNT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([copy_to_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_COPY_TO_ITER, 1,
		    [copy_to_iter() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_COPY_TO_ITER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([copy_from_iter], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_COPY_FROM_ITER, 1,
		    [copy_from_iter() is available])
	], [
		AC_MSG_RESULT(no)
		enable_vfs_iov_iter="no"
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_COPY_FROM_ITER$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iov_iter_type], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOV_ITER_TYPE, 1,
		    [iov_iter_type() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOV_ITER_TYPE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_VFS_IOV_ITER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KMAP_ATOMIC_ARGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kmap_atomic], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([kmap_atomic()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([kmap_atomic()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FOLLOW_DOWN_ONE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([follow_down_one], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([follow_down_one()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([follow_down_one()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_MAKE_REQUEST_FN
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([block_device_operations_submit_bio], [
		AC_MSG_RESULT(yes)

		AC_DEFINE(HAVE_SUBMIT_BIO_IN_BLOCK_DEVICE_OPERATIONS, 1,
		    [submit_bio is member of struct block_device_operations])

		dnl #
		dnl # Linux 5.14 API Change:
		dnl # blk_alloc_queue() + alloc_disk() combo replaced by
		dnl # a single call to blk_alloc_disk().
		dnl #
		AC_MSG_CHECKING([whether blk_alloc_disk() exists])
		ZFS_LINUX_TEST_RESULT([blk_alloc_disk], [
			AC_MSG_RESULT(yes)
			AC_DEFINE([HAVE_BLK_ALLOC_DISK], 1, [blk_alloc_disk() exists])

			dnl #
			dnl # 5.20 API change,
			dnl # Removed blk_cleanup_disk(), put_disk() should be used.
			dnl #
			AC_MSG_CHECKING([whether blk_cleanup_disk() exists])
			ZFS_LINUX_TEST_RESULT([blk_cleanup_disk], [
				AC_MSG_RESULT(yes)
				AC_DEFINE([HAVE_BLK_CLEANUP_DISK], 1,
				    [blk_cleanup_disk() exists])
			], [
				AC_MSG_RESULT(no)
			])
		], [
			AC_MSG_RESULT(no)
		])
	], [
		AC_MSG_RESULT(no)

		dnl # Checked as part of the blk_alloc_queue_request_fn test
		dnl #
		dnl # Linux 5.7 API Change
		dnl # blk_alloc_queue() expects request function.
		dnl #
		AC_MSG_CHECKING([whether blk_alloc_queue() expects request function])
		ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn], [
			AC_MSG_RESULT(yes)

			dnl # This is currently always the case.
			AC_MSG_CHECKING([whether make_request_fn() returns blk_qc_t])
			AC_MSG_RESULT(yes)

			AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN, 1,
			    [blk_alloc_queue() expects request function])
			AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
			    [make_request_fn() return type])
			AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
			    [Noting that make_request_fn() returns blk_qc_t])
		],[
			dnl #
			dnl # CentOS Stream 4.18.0-257 API Change
			dnl # The Linux 5.7 blk_alloc_queue() change was back-
			dnl # ported and the symbol renamed blk_alloc_queue_rh().
			dnl # As of this kernel version they're not providing
			dnl # any compatibility code in the kernel for this.
			dnl #
			ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn_rh], [
				AC_MSG_RESULT(yes)

				dnl # This is currently always the case.
				AC_MSG_CHECKING([whether make_request_fn_rh() returns blk_qc_t])
				AC_MSG_RESULT(yes)

				AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH, 1,
				    [blk_alloc_queue_rh() expects request function])
				AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
				    [make_request_fn() return type])
				AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
				    [Noting that make_request_fn() returns blk_qc_t])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Linux 3.2 API Change
				dnl # make_request_fn returns void.
				dnl #
				AC_MSG_CHECKING(
				    [whether make_request_fn() returns void])
				ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				],[
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SUBMIT_BIO_IN_BLOCK_DEVICE_OPERATIONS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_alloc_disk], [
			AC_MSG_RESULT(yes)
			AC_DEFINE([HAVE_BLK_ALLOC_DISK], 1, [blk_alloc_disk() exists])

			dnl #
			dnl # 5.20 API change,
			dnl # Removed blk_cleanup_disk(), put_disk() should be used.
			dnl #
			AC_MSG_CHECKING([whether blk_cleanup_disk() exists])
			ZFS_LINUX_TEST_RESULT([blk_cleanup_disk], [
				AC_MSG_RESULT(yes)
				AC_DEFINE([HAVE_BLK_CLEANUP_DISK], 1,
				    [blk_cleanup_disk() exists])
			], [
				AC_MSG_RESULT(no)
			])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_ALLOC_DISK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_cleanup_disk], [
				AC_MSG_RESULT(yes)
				AC_DEFINE([HAVE_BLK_CLEANUP_DISK], 1,
				    [blk_cleanup_disk() exists])
			], [
				AC_MSG_RESULT(no)
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_CLEANUP_DISK$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn], [
			AC_MSG_RESULT(yes)

			dnl # This is currently always the case.
			AC_MSG_CHECKING([whether make_request_fn() returns blk_qc_t])
			AC_MSG_RESULT(yes)

			AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN, 1,
			    [blk_alloc_queue() expects request function])
			AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
			    [make_request_fn() return type])
			AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
			    [Noting that make_request_fn() returns blk_qc_t])
		], [
			dnl #
			dnl # CentOS Stream 4.18.0-257 API Change
			dnl # The Linux 5.7 blk_alloc_queue() change was back-
			dnl # ported and the symbol renamed blk_alloc_queue_rh().
			dnl # As of this kernel version they're not providing
			dnl # any compatibility code in the kernel for this.
			dnl #
			ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn_rh], [
				AC_MSG_RESULT(yes)

				dnl # This is currently always the case.
				AC_MSG_CHECKING([whether make_request_fn_rh() returns blk_qc_t])
				AC_MSG_RESULT(yes)

				AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH, 1,
				    [blk_alloc_queue_rh() expects request function])
				AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
				    [make_request_fn() return type])
				AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
				    [Noting that make_request_fn() returns blk_qc_t])
			],[
				AC_MSG_RESULT(no)

				dnl #
				dnl # Linux 3.2 API Change
				dnl # make_request_fn returns void.
				dnl #
				AC_MSG_CHECKING(
				    [whether make_request_fn() returns void])
				ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				],[
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_ALLOC_QUEUE_REQUEST_FN$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKE_REQUEST_FN_RET$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKE_REQUEST_FN_RET_QC$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([blk_alloc_queue_request_fn_rh], [
				AC_MSG_RESULT(yes)

				dnl # This is currently always the case.
				AC_MSG_CHECKING([whether make_request_fn_rh() returns blk_qc_t])
				AC_MSG_RESULT(yes)

				AC_DEFINE(HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH, 1,
				    [blk_alloc_queue_rh() expects request function])
				AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
				    [make_request_fn() return type])
				AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
				    [Noting that make_request_fn() returns blk_qc_t])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # Linux 3.2 API Change
				dnl # make_request_fn returns void.
				dnl #
				AC_MSG_CHECKING(
				    [whether make_request_fn() returns void])
				ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				],[
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BLK_ALLOC_QUEUE_REQUEST_FN_RH$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKE_REQUEST_FN_RET$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKE_REQUEST_FN_RET_QC$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([make_request_fn_void], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(MAKE_REQUEST_FN_RET, void,
					    [make_request_fn() return type])
					AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_VOID, 1,
					    [Noting that make_request_fn() returns void])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # Linux 4.4 API Change
					dnl # make_request_fn returns blk_qc_t.
					dnl #
					AC_MSG_CHECKING(
					    [whether make_request_fn() returns blk_qc_t])
					ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					],[
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKE_REQUEST_FN_RET$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKE_REQUEST_FN_RET_VOID$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([make_request_fn_blk_qc_t], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(MAKE_REQUEST_FN_RET, blk_qc_t,
						    [make_request_fn() return type])
						AC_DEFINE(HAVE_MAKE_REQUEST_FN_RET_QC, 1,
						    [Noting that make_request_fn() ]
						    [returns blk_qc_t])
					], [
						ZFS_LINUX_TEST_ERROR([make_request_fn])
					])
m4trace:configure.ac:60: -1- m4_pattern_allow([^MAKE_REQUEST_FN_RET$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_MAKE_REQUEST_FN_RET_QC$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([make_request_fn])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_IO_ACCT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_io_acct_63], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_BDEV_IO_ACCT_63, 1, [bdev_*_io_acct() available])
	], [
		AC_MSG_RESULT(no)

		dnl #
		dnl # 5.19 API,
		dnl #
		dnl # disk_start_io_acct() and disk_end_io_acct() have been replaced by
		dnl # bdev_start_io_acct() and bdev_end_io_acct().
		dnl #
		AC_MSG_CHECKING([whether pre-6.3 bdev_*_io_acct() are available])
		ZFS_LINUX_TEST_RESULT([bdev_io_acct_old], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BDEV_IO_ACCT_OLD, 1, [bdev_*_io_acct() available])
		], [
			AC_MSG_RESULT(no)
			dnl #
			dnl # 5.12 API,
			dnl #
			dnl # bio_start_io_acct() and bio_end_io_acct() became GPL-exported
			dnl # so use disk_start_io_acct() and disk_end_io_acct() instead
			dnl #
			AC_MSG_CHECKING([whether generic disk_*_io_acct() are available])
			ZFS_LINUX_TEST_RESULT([disk_io_acct], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 5.7 API,
				dnl #
				dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
				dnl #
				AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
				ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_IO_ACCT_63$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bdev_io_acct_old], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_BDEV_IO_ACCT_OLD, 1, [bdev_*_io_acct() available])
		], [
			AC_MSG_RESULT(no)
			dnl #
			dnl # 5.12 API,
			dnl #
			dnl # bio_start_io_acct() and bio_end_io_acct() became GPL-exported
			dnl # so use disk_start_io_acct() and disk_end_io_acct() instead
			dnl #
			AC_MSG_CHECKING([whether generic disk_*_io_acct() are available])
			ZFS_LINUX_TEST_RESULT([disk_io_acct], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 5.7 API,
				dnl #
				dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
				dnl #
				AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
				ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BDEV_IO_ACCT_OLD$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([disk_io_acct], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
			], [
				AC_MSG_RESULT(no)

				dnl #
				dnl # 5.7 API,
				dnl #
				dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
				dnl #
				AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
				ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DISK_IO_ACCT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_io_acct], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
				], [
					AC_MSG_RESULT(no)

					dnl #
					dnl # 4.14 API,
					dnl #
					dnl # generic_start_io_acct/generic_end_io_acct now require
					dnl # request_queue to be provided. No functional changes,
					dnl # but preparation for inflight accounting.
					dnl #
					AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
					    [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_IO_ACCT$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args], [generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args], [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([generic_start_io_acct], [block/bio.c], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
						    [generic_*_io_acct() 4 arg available])
					], [
						AC_MSG_RESULT(no)

						dnl #
						dnl # 3.19 API addition
						dnl #
						dnl # torvalds/linux@394ffa50 allows us to increment
						dnl # iostat counters without generic_make_request().
						dnl #
						AC_MSG_CHECKING(
						    [whether generic_*_io_acct wants 3 args])
						ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
						    [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
					])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args], [generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([generic_start_io_acct], [block/bio.c], [
							AC_MSG_RESULT(yes)
							AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
							    [generic_*_io_acct() 3 arg available])
						], [
							AC_MSG_RESULT(no)
						])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_3ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_4ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_4ARG$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_IO_ACCT_4ARG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FPU
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kernel_fpu_license], [
		AC_MSG_RESULT(kernel_fpu_*)
		AC_DEFINE(HAVE_KERNEL_FPU, 1,
		    [kernel has kernel_fpu_* functions])
		AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
		    [kernel exports FPU functions])
	], [
		dnl #
		dnl # Linux 4.2 kernel
		dnl #
		ZFS_LINUX_TEST_RESULT_SYMBOL([__kernel_fpu_license],
		    [__kernel_fpu_begin],
		    [arch/x86/kernel/fpu/core.c arch/x86/kernel/i387.c], [
			AC_MSG_RESULT(__kernel_fpu_*)
			AC_DEFINE(HAVE_UNDERSCORE_KERNEL_FPU, 1,
			    [kernel has __kernel_fpu_* functions])
			AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
			    [kernel exports FPU functions])
		],[
			AC_MSG_RESULT(internal)
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL, 1,
			    [kernel fpu internal])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_EXPORTS_X86_FPU$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([__kernel_fpu_license], [__kernel_fpu_begin], [arch/x86/kernel/fpu/core.c arch/x86/kernel/i387.c], [
			AC_MSG_RESULT(__kernel_fpu_*)
			AC_DEFINE(HAVE_UNDERSCORE_KERNEL_FPU, 1,
			    [kernel has __kernel_fpu_* functions])
			AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
			    [kernel exports FPU functions])
		], [
			AC_MSG_RESULT(internal)
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL, 1,
			    [kernel fpu internal])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL$])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([__kernel_fpu_begin], [arch/x86/kernel/fpu/core.c arch/x86/kernel/i387.c], [
			AC_MSG_RESULT(__kernel_fpu_*)
			AC_DEFINE(HAVE_UNDERSCORE_KERNEL_FPU, 1,
			    [kernel has __kernel_fpu_* functions])
			AC_DEFINE(KERNEL_EXPORTS_X86_FPU, 1,
			    [kernel exports FPU functions])
		], [
			AC_MSG_RESULT(internal)
			AC_DEFINE(HAVE_KERNEL_FPU_INTERNAL, 1,
			    [kernel fpu internal])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KERNEL_FPU_INTERNAL$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_UNDERSCORE_KERNEL_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_EXPORTS_X86_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_UNDERSCORE_KERNEL_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_EXPORTS_X86_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_UNDERSCORE_KERNEL_FPU$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_EXPORTS_X86_FPU$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FMODE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([type_fmode_t], [
		AC_MSG_RESULT([yes])
	], [
		ZFS_LINUX_TEST_ERROR([type_fmode_t])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([type_fmode_t])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KUIDGID_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kuidgid_t], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([kuid_t/kgid_t])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([kuid_t/kgid_t])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KUID_HELPERS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([i_uid_read], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([i_uid_read])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([i_uid_read])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_RENAME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_rename_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_RENAME_IDMAP, 1,
		    [iops->rename() takes struct mnt_idmap*])
	], [
		AC_MSG_CHECKING([whether iops->rename() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([inode_operations_rename_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_RENAME_USERNS, 1,
			    [iops->rename() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->rename2() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_rename2], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_RENAME2, 1, [iops->rename2() exists])
			],[
				AC_MSG_RESULT(no)

				AC_MSG_CHECKING([whether iops->rename() wants flags])
				ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				],[
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
			])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_RENAME_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_rename_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_RENAME_USERNS, 1,
			    [iops->rename() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)

			AC_MSG_CHECKING([whether iops->rename2() exists])
			ZFS_LINUX_TEST_RESULT([inode_operations_rename2], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_RENAME2, 1, [iops->rename2() exists])
			],[
				AC_MSG_RESULT(no)

				AC_MSG_CHECKING([whether iops->rename() wants flags])
				ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				],[
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
			])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_RENAME_USERNS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_rename2], [
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_RENAME2, 1, [iops->rename2() exists])
			], [
				AC_MSG_RESULT(no)

				AC_MSG_CHECKING([whether iops->rename() wants flags])
				ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				],[
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
			])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RENAME2$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([inode_operations_rename_flags], [
					AC_MSG_RESULT(yes)
					AC_DEFINE(HAVE_RENAME_WANTS_FLAGS, 1,
						[iops->rename() wants flags])
				], [
					AC_MSG_RESULT(no)

					AC_MSG_CHECKING([whether struct inode_operations_wrapper takes .rename2()])
					ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					],[
						AC_MSG_RESULT(no)
					])
				])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RENAME_WANTS_FLAGS$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([dir_inode_operations_wrapper_rename2], [
						AC_MSG_RESULT(yes)
						AC_DEFINE(HAVE_RENAME2_OPERATIONS_WRAPPER, 1,
							[struct inode_operations_wrapper takes .rename2()])
					], [
						AC_MSG_RESULT(no)
					])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_RENAME2_OPERATIONS_WRAPPER$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CURRENT_TIME
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([current_time], [current_time], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CURRENT_TIME, 1, [current_time() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([current_time], [fs/inode.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CURRENT_TIME, 1, [current_time() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CURRENT_TIME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CURRENT_TIME$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CURRENT_TIME$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_USERNS_CAPABILITIES
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_NS_CAPABLE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([ns_capable], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([ns_capable()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([ns_capable()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_HAS_CAPABILITY
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT_SYMBOL([has_capability], [has_capability], [kernel/capability.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_HAS_CAPABILITY, 1, [has_capability() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- ZFS_CHECK_SYMBOL_EXPORT([has_capability], [kernel/capability.c], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_HAS_CAPABILITY, 1, [has_capability() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_HAS_CAPABILITY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_HAS_CAPABILITY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_HAS_CAPABILITY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CRED_USER_NS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([cred_user_ns], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([cred_t->user_ns()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([cred_t->user_ns()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KUID_HAS_MAPPING
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kuid_has_mapping], [
		AC_MSG_RESULT(yes)
	], [
		ZFS_LINUX_TEST_ERROR([kuid_has_mapping()])
	])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([kuid_has_mapping()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_IN_COMPAT_SYSCALL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([in_compat_syscall], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IN_COMPAT_SYSCALL, 1,
		    [in_compat_syscall() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IN_COMPAT_SYSCALL$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTIME
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTIME_GET_COARSE_REAL_TS64
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([ktime_get_coarse_real_ts64], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KTIME_GET_COARSE_REAL_TS64, 1,
		    [ktime_get_coarse_real_ts64() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KTIME_GET_COARSE_REAL_TS64$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTIME_GET_RAW_TS64
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([ktime_get_raw_ts64], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KTIME_GET_RAW_TS64, 1,
		    [ktime_get_raw_ts64() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KTIME_GET_RAW_TS64$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TOTALRAM_PAGES_FUNC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([totalram_pages], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TOTALRAM_PAGES_FUNC, 1,
		    [kernel has totalram_pages()])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TOTALRAM_PAGES_FUNC$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_TOTALHIGH_PAGES
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([totalhigh_pages], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_TOTALHIGH_PAGES, 1, [totalhigh_pages() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_TOTALHIGH_PAGES$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KSTRTOUL
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kstrtoul], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_KSTRTOUL, 1, [kstrtoul() exists])
	], [
		ZFS_LINUX_TEST_ERROR([kstrtoul()])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_KSTRTOUL$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_ERROR([kstrtoul()])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERCPU
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERCPU_COUNTER_INIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([percpu_counter_init_with_gfp], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PERCPU_COUNTER_INIT_WITH_GFP, 1,
		    [percpu_counter_init() wants gfp_t])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PERCPU_COUNTER_INIT_WITH_GFP$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERCPU_COUNTER_ADD_BATCH
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([percpu_counter_add_batch], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_PERCPU_COUNTER_ADD_BATCH, 1,
		    [percpu_counter_add_batch() is defined])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PERCPU_COUNTER_ADD_BATCH$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PERCPU_REF_COUNT_IN_DATA
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([percpu_ref_count_in_data], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(ZFS_PERCPU_REF_COUNT_IN_DATA, 1,
		    [count is located in percpu_ref.data])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^ZFS_PERCPU_REF_COUNT_IN_DATA$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CPU_HOTPLUG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([cpu_hotplug], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CPU_HOTPLUG, 1, [yes])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CPU_HOTPLUG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_GENERIC_FILLATTR
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([generic_fillattr_mnt_idmap], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_GENERIC_FILLATTR_IDMAP, 1,
		    [generic_fillattr requires struct mnt_idmap*])
	], [
		AC_MSG_CHECKING([whether generic_fillattr requires struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([generic_fillattr_userns], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_GENERIC_FILLATTR_USERNS, 1,
			    [generic_fillattr requires struct user_namespace*])
		],[
			AC_MSG_RESULT([no])
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FILLATTR_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([generic_fillattr_userns], [
			AC_MSG_RESULT([yes])
			AC_DEFINE(HAVE_GENERIC_FILLATTR_USERNS, 1,
			    [generic_fillattr requires struct user_namespace*])
		], [
			AC_MSG_RESULT([no])
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_GENERIC_FILLATTR_USERNS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_MKNOD
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([mknod_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_MKNOD_IDMAP, 1,
		    [iops->mknod() takes struct mnt_idmap*])
	], [
		AC_MSG_RESULT(no)
		AC_MSG_CHECKING([whether iops->mknod() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([mknod_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKNOD_USERNS, 1,
			    [iops->mknod() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_MKNOD_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([mknod_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_MKNOD_USERNS, 1,
			    [iops->mknod() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_MKNOD_USERNS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SYMLINK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([symlink_mnt_idmap], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IOPS_SYMLINK_IDMAP, 1,
		    [iops->symlink() takes struct mnt_idmap*])
	], [
		AC_MSG_CHECKING([whether iops->symlink() takes struct user_namespace*])
		ZFS_LINUX_TEST_RESULT([symlink_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_SYMLINK_USERNS, 1,
			    [iops->symlink() takes struct user_namespace*])
		],[
			AC_MSG_RESULT(no)
		])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_SYMLINK_IDMAP$])
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([symlink_userns], [
			AC_MSG_RESULT(yes)
			AC_DEFINE(HAVE_IOPS_SYMLINK_USERNS, 1,
			    [iops->symlink() takes struct user_namespace*])
		], [
			AC_MSG_RESULT(no)
		])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IOPS_SYMLINK_USERNS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_BIO_MAX_SEGS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([bio_max_segs], [
		AC_MSG_RESULT(yes)

		AC_DEFINE([HAVE_BIO_MAX_SEGS], 1, [bio_max_segs() is implemented])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_BIO_MAX_SEGS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SIGNAL_STOP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([signal_stop], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SIGNAL_STOP, 1, [signal_stop() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SIGNAL_STOP$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SIGINFO
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([siginfo], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SIGINFO, 1, [kernel_siginfo_t exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SIGINFO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SYSFS
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SYSFS_DEFAULT_GROUPS
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([sysfs_default_groups], [
		AC_MSG_RESULT(yes)
		AC_DEFINE([HAVE_SYSFS_DEFAULT_GROUPS], 1, [struct kobj_type has default_groups])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SYSFS_DEFAULT_GROUPS$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_SET_SPECIAL_STATE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([set_special_state], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_SET_SPECIAL_STATE, 1, [set_special_state() exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_SET_SPECIAL_STATE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_STANDALONE_LINUX_STDARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([has_standalone_linux_stdarg], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_STANDALONE_LINUX_STDARG, 1,
			[standalone <linux/stdarg.h> exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_STANDALONE_LINUX_STDARG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_PAGEMAP_FOLIO_WAIT_BIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([pagemap_has_folio_wait_bit], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(HAVE_PAGEMAP_FOLIO_WAIT_BIT, 1,
			[folio_wait_bit() exists])
	], [
		AC_MSG_RESULT([no])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_PAGEMAP_FOLIO_WAIT_BIT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ADD_DISK
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([add_disk_ret], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ADD_DISK_RET, 1,
		    [add_disk() returns int])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ADD_DISK_RET$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTHREAD
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTHREAD_COMPLETE_AND_EXIT
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kthread_complete_and_exit], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(SPL_KTHREAD_COMPLETE_AND_EXIT, kthread_complete_and_exit, [kthread_complete_and_exit() available])
	], [
		AC_MSG_RESULT(no)
		AC_DEFINE(SPL_KTHREAD_COMPLETE_AND_EXIT, complete_and_exit, [using complete_and_exit() instead])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SPL_KTHREAD_COMPLETE_AND_EXIT$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^SPL_KTHREAD_COMPLETE_AND_EXIT$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_KTHREAD_DEQUEUE_SIGNAL_4ARG
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([kthread_dequeue_signal], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_DEQUEUE_SIGNAL_4ARG, 1, [dequeue_signal() takes 4 arguments])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_DEQUEUE_SIGNAL_4ARG$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_ZERO_PAGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([zero_page_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_ZERO_PAGE_GPL_ONLY, 1,
		    [ZERO_PAGE() is GPL-only])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_ZERO_PAGE_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL___COPY_FROM_USER_INATOMIC
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([__copy_from_user_inatomic_license], [
		AC_MSG_RESULT(yes)
	], [
		AC_MSG_RESULT(no)
		AC_MSG_ERROR([
	*** The `__copy_from_user_inatomic()` Linux kernel function is
	*** incompatible with the CDDL license and will prevent the module
	*** linking stage from succeeding.  OpenZFS cannot be compiled.
		])
	])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_USER_NS_COMMON_INUM
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([user_ns_common_inum], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_USER_NS_COMMON_INUM, 1,
		    [user_namespace->ns.inum exists])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_USER_NS_COMMON_INUM$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_IDMAP_MNT_API
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([idmap_mnt_api], [
                AC_MSG_RESULT([yes])
                AC_DEFINE(HAVE_IDMAP_MNT_API, 1,
                    [APIs for idmapped mount are present])
        ], [
                AC_MSG_RESULT([no])
        ])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IDMAP_MNT_API$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_IATTR_VFSID
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([iattr_vfsid], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_IATTR_VFSID, 1,
		    [iattr->ia_vfsuid and iattr->ia_vfsgid exist])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_IATTR_VFSID$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FILEMAP
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([filemap_range_has_page], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FILEMAP_RANGE_HAS_PAGE, 1,
		[filemap_range_has_page() is available])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FILEMAP_RANGE_HAS_PAGE$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_WRITEPAGE_T
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([writepage_t_folio], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_WRITEPAGE_T_FOLIO, 1,
		   [int (*writepage_t)() takes struct folio*])
	], [
		AC_MSG_RESULT(no)
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_WRITEPAGE_T_FOLIO$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_CPU_HAS_FEATURE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([cpu_has_feature_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_CPU_HAS_FEATURE_GPL_ONLY, 1,
		    [cpu_has_feature() is GPL-only])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_CPU_HAS_FEATURE_GPL_ONLY$])
m4trace:configure.ac:60: -1- ZFS_AC_KERNEL_FLUSH_DCACHE_PAGE
m4trace:configure.ac:60: -1- ZFS_LINUX_TEST_RESULT([flush_dcache_page_license], [
		AC_MSG_RESULT(no)
	], [
		AC_MSG_RESULT(yes)
		AC_DEFINE(HAVE_FLUSH_DCACHE_PAGE_GPL_ONLY, 1,
		    [flush_dcache_page() is GPL-only])
	])
m4trace:configure.ac:60: -1- m4_pattern_allow([^HAVE_FLUSH_DCACHE_PAGE_GPL_ONLY$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^KERNEL_MAKE$])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([INIT_SYSV], [test "x$ZFS_INIT_SYSV" = "xyes"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INIT_SYSV_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INIT_SYSV_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([INIT_SYSV_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([INIT_SYSV_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([INIT_SYSTEMD], [test "x$ZFS_INIT_SYSTEMD" = "xyes"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INIT_SYSTEMD_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^INIT_SYSTEMD_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([INIT_SYSTEMD_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([INIT_SYSTEMD_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([WANT_MODULES_LOAD_D], [test "x$ZFS_WANT_MODULES_LOAD_D" = "xyes"])
m4trace:configure.ac:60: -1- m4_pattern_allow([^WANT_MODULES_LOAD_D_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^WANT_MODULES_LOAD_D_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([WANT_MODULES_LOAD_D_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([WANT_MODULES_LOAD_D_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([CONFIG_USER], [test "$ZFS_CONFIG" = user -o "$ZFS_CONFIG" = all])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CONFIG_USER_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CONFIG_USER_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([CONFIG_USER_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([CONFIG_USER_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([CONFIG_KERNEL], [test "$ZFS_CONFIG" = kernel -o "$ZFS_CONFIG" = all &&
	    test "x$enable_linux_builtin" != xyes ])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CONFIG_KERNEL_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CONFIG_KERNEL_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([CONFIG_KERNEL_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([CONFIG_KERNEL_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([CONFIG_QAT], [test "$ZFS_CONFIG" = kernel -o "$ZFS_CONFIG" = all &&
	    test "x$qatsrc" != x ])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CONFIG_QAT_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^CONFIG_QAT_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([CONFIG_QAT_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([CONFIG_QAT_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([WANT_DEVNAME2DEVID], [test "x$user_libudev" = xyes ])
m4trace:configure.ac:60: -1- m4_pattern_allow([^WANT_DEVNAME2DEVID_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^WANT_DEVNAME2DEVID_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([WANT_DEVNAME2DEVID_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([WANT_DEVNAME2DEVID_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([WANT_MMAP_LIBAIO], [test "x$user_libaio" = xyes ])
m4trace:configure.ac:60: -1- m4_pattern_allow([^WANT_MMAP_LIBAIO_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^WANT_MMAP_LIBAIO_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([WANT_MMAP_LIBAIO_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([WANT_MMAP_LIBAIO_FALSE])
m4trace:configure.ac:60: -1- AM_CONDITIONAL([PAM_ZFS_ENABLED], [test "x$enable_pam" = xyes])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PAM_ZFS_ENABLED_TRUE$])
m4trace:configure.ac:60: -1- m4_pattern_allow([^PAM_ZFS_ENABLED_FALSE$])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([PAM_ZFS_ENABLED_TRUE])
m4trace:configure.ac:60: -1- _AM_SUBST_NOTMAKE([PAM_ZFS_ENABLED_FALSE])
m4trace:configure.ac:61: -1- ZFS_AC_PACKAGE
m4trace:configure.ac:61: -1- ZFS_AC_DEFAULT_PACKAGE
m4trace:configure.ac:61: -1- m4_pattern_allow([^VENDOR$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^DEFAULT_PACKAGE$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^initdir$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^DEFAULT_INIT_SHELL$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^DEFAULT_INIT_NFS_SERVER$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^initconfdir$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPM_DEFINE_INITRAMFS$])
m4trace:configure.ac:61: -1- ZFS_AC_RPM
m4trace:configure.ac:61: -1- m4_pattern_allow([^MULTIARCH_LIBDIR$])
m4trace:configure.ac:61: -1- AM_COND_IF([CONFIG_KERNEL], [
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kernels $(LINUX_VERSION)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "ksrc $(LINUX)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kobj $(LINUX_OBJ)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kernel_cc KERNEL_CC=$(KERNEL_CC)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kernel_ld KERNEL_LD=$(KERNEL_LD)"'
		RPM_DEFINE_KMOD=${RPM_DEFINE_KMOD}' --define "kernel_llvm KERNEL_LLVM=$(KERNEL_LLVM)"'
	])
m4trace:configure.ac:61: -1- m4_pattern_allow([^HAVE_RPM$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPM$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPM_VERSION$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^HAVE_RPMBUILD$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPMBUILD$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPMBUILD_VERSION$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPM_SPEC_DIR$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPM_DEFINE_UTIL$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPM_DEFINE_KMOD$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPM_DEFINE_DKMS$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^RPM_DEFINE_COMMON$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^SRPM_DEFINE_UTIL$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^SRPM_DEFINE_KMOD$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^SRPM_DEFINE_DKMS$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^SRPM_DEFINE_COMMON$])
m4trace:configure.ac:61: -1- ZFS_AC_DPKG
m4trace:configure.ac:61: -1- m4_pattern_allow([^HAVE_DPKG$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^DPKG$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^DPKG_VERSION$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^HAVE_DPKGBUILD$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^DPKGBUILD$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^DPKGBUILD_VERSION$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^CFGOPTS$])
m4trace:configure.ac:61: -1- ZFS_AC_ALIEN
m4trace:configure.ac:61: -1- m4_pattern_allow([^HAVE_ALIEN$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^ALIEN$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^ALIEN_VERSION$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^ALIEN_MAJOR$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^ALIEN_MINOR$])
m4trace:configure.ac:61: -1- m4_pattern_allow([^ALIEN_POINT$])
m4trace:configure.ac:62: -1- ZFS_AC_DEBUG
m4trace:configure.ac:62: -1- ZFS_AC_DEBUG_ENABLE
m4trace:configure.ac:62: -1- m4_pattern_allow([^ZFS_DEBUG$])
m4trace:configure.ac:62: -1- ZFS_AC_DEBUG_DISABLE
m4trace:configure.ac:62: -1- ZFS_AC_DEBUG_INVARIANTS_DETECT
m4trace:configure.ac:62: -1- AM_COND_IF([BUILD_FREEBSD], [ZFS_AC_DEBUG_INVARIANTS_DETECT_FREEBSD], [enable_invariants="no"])
m4trace:configure.ac:62: -1- ZFS_AC_DEBUG_INVARIANTS_DETECT_FREEBSD
m4trace:configure.ac:62: -1- ZFS_AC_DEBUG_ENABLE
m4trace:configure.ac:62: -1- m4_pattern_allow([^ZFS_DEBUG$])
m4trace:configure.ac:62: -1- m4_pattern_allow([^DEBUG_CFLAGS$])
m4trace:configure.ac:62: -1- m4_pattern_allow([^DEBUG_CPPFLAGS$])
m4trace:configure.ac:62: -1- m4_pattern_allow([^DEBUG_LDFLAGS$])
m4trace:configure.ac:62: -1- m4_pattern_allow([^DEBUG_ZFS$])
m4trace:configure.ac:62: -1- m4_pattern_allow([^WITH_DEBUG$])
m4trace:configure.ac:62: -1- m4_pattern_allow([^KERNEL_DEBUG_CFLAGS$])
m4trace:configure.ac:62: -1- m4_pattern_allow([^KERNEL_DEBUG_CPPFLAGS$])
m4trace:configure.ac:63: -1- ZFS_AC_DEBUGINFO
m4trace:configure.ac:63: -1- ZFS_AC_DEBUGINFO_ENABLE
m4trace:configure.ac:63: -1- ZFS_AC_DEBUGINFO_DISABLE
m4trace:configure.ac:63: -1- m4_pattern_allow([^DEBUG_CFLAGS$])
m4trace:configure.ac:63: -1- m4_pattern_allow([^DEBUGINFO_ZFS$])
m4trace:configure.ac:63: -1- m4_pattern_allow([^KERNEL_DEBUG_CFLAGS$])
m4trace:configure.ac:63: -1- m4_pattern_allow([^KERNEL_MAKE$])
m4trace:configure.ac:64: -1- ZFS_AC_DEBUG_KMEM
m4trace:configure.ac:64: -1- m4_pattern_allow([^KERNEL_DEBUG_CPPFLAGS$])
m4trace:configure.ac:64: -1- m4_pattern_allow([^DEBUG_KMEM_ZFS$])
m4trace:configure.ac:65: -1- ZFS_AC_DEBUG_KMEM_TRACKING
m4trace:configure.ac:65: -1- m4_pattern_allow([^KERNEL_DEBUG_CPPFLAGS$])
m4trace:configure.ac:65: -1- m4_pattern_allow([^DEBUG_KMEM_TRACKING_ZFS$])
m4trace:configure.ac:66: -1- ZFS_AC_DEBUG_INVARIANTS
m4trace:configure.ac:66: -1- ZFS_AC_DEBUG_INVARIANTS_DETECT
m4trace:configure.ac:66: -1- AM_COND_IF([BUILD_FREEBSD], [ZFS_AC_DEBUG_INVARIANTS_DETECT_FREEBSD], [enable_invariants="no"])
m4trace:configure.ac:66: -1- ZFS_AC_DEBUG_INVARIANTS_DETECT_FREEBSD
m4trace:configure.ac:66: -1- m4_pattern_allow([^WITH_INVARIANTS$])
m4trace:configure.ac:88: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:88: -1- m4_pattern_allow([^LTLIBOBJS$])
m4trace:configure.ac:88: -1- AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])
m4trace:configure.ac:88: -1- m4_pattern_allow([^am__EXEEXT_TRUE$])
m4trace:configure.ac:88: -1- m4_pattern_allow([^am__EXEEXT_FALSE$])
m4trace:configure.ac:88: -1- _AM_SUBST_NOTMAKE([am__EXEEXT_TRUE])
m4trace:configure.ac:88: -1- _AM_SUBST_NOTMAKE([am__EXEEXT_FALSE])
m4trace:configure.ac:88: -1- _AC_AM_CONFIG_HEADER_HOOK(["$ac_file"])
m4trace:configure.ac:88: -1- _AM_OUTPUT_DEPENDENCY_COMMANDS
m4trace:configure.ac:88: -1- AM_RUN_LOG([cd "$am_dirpart" \
      && sed -e '/# am--include-marker/d' "$am_filepart" \
        | $MAKE -f - am--depfiles])
m4trace:configure.ac:88: -1- _LT_PROG_LTMAIN
