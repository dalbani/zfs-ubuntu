From 778fa36ee79bc8887f3b4bb2c3bb09784a3fb33c Mon Sep 17 00:00:00 2001
From: Coleman Kane <ckane@colemankane.org>
Date: Mon, 22 Feb 2021 21:18:41 -0500
Subject: [PATCH] Linux 5.12 compat: replace bio_*_io_acct with disk_*_io_acct

The bio_*_acct functions became GPL exports, which causes the
kernel modules to refuse to compile. This replaces code with
alternate function calls to the disk_*_io_acct interfaces, which
are not GPL exports. This change was added in kernel commit
99dfc43ecbf67f12a06512918aaba61d55863efc.

Reviewed-by: Brian Behlendorf <behlendorf1@llnl.gov>
Signed-off-by: Coleman Kane <ckane@colemankane.org>
Closes #11639
---
 config/kernel-generic_io_acct.m4              | 69 +++++++++++++------
 include/os/linux/kernel/linux/blkdev_compat.h |  8 ++-
 2 files changed, 53 insertions(+), 24 deletions(-)

diff --git a/config/kernel-generic_io_acct.m4 b/config/kernel-generic_io_acct.m4
index e4ab503d5..0f4381db4 100644
--- a/config/kernel-generic_io_acct.m4
+++ b/config/kernel-generic_io_acct.m4
@@ -2,6 +2,17 @@ dnl #
 dnl # Check for generic io accounting interface.
 dnl #
 AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT], [
+	ZFS_LINUX_TEST_SRC([disk_io_acct], [
+		#include <linux/blkdev.h>
+	], [
+		struct gendisk *disk = NULL;
+		struct bio *bio = NULL;
+		unsigned long start_time;
+
+		start_time = disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio));
+		disk_end_io_acct(disk, bio_op(bio), start_time);
+	])
+
 	ZFS_LINUX_TEST_SRC([bio_io_acct], [
 		#include <linux/blkdev.h>
 	], [
@@ -39,48 +50,62 @@ AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT], [
 
 AC_DEFUN([ZFS_AC_KERNEL_GENERIC_IO_ACCT], [
 	dnl #
-	dnl # 5.7 API,
+	dnl # 5.12 API,
 	dnl #
-	dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
+	dnl # bio_start_io_acct() and bio_end_io_acct() became GPL-exported
+	dnl # so use disk_start_io_acct() and disk_end_io_acct() instead
 	dnl #
-	AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
-	ZFS_LINUX_TEST_RESULT([bio_io_acct], [
+	AC_MSG_CHECKING([whether generic disk_*_io_acct() are available])
+	ZFS_LINUX_TEST_RESULT([disk_io_acct], [
 		AC_MSG_RESULT(yes)
-		AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
+		AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
 	], [
 		AC_MSG_RESULT(no)
 
 		dnl #
-		dnl # 4.14 API,
+		dnl # 5.7 API,
 		dnl #
-		dnl # generic_start_io_acct/generic_end_io_acct now require
-		dnl # request_queue to be provided. No functional changes,
-		dnl # but preparation for inflight accounting.
+		dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
 		dnl #
-		AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
-		ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
-		    [generic_start_io_acct], [block/bio.c], [
+		AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
+		ZFS_LINUX_TEST_RESULT([bio_io_acct], [
 			AC_MSG_RESULT(yes)
-			AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
-			    [generic_*_io_acct() 4 arg available])
+			AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
 		], [
 			AC_MSG_RESULT(no)
 
 			dnl #
-			dnl # 3.19 API addition
+			dnl # 4.14 API,
 			dnl #
-			dnl # torvalds/linux@394ffa50 allows us to increment
-			dnl # iostat counters without generic_make_request().
+			dnl # generic_start_io_acct/generic_end_io_acct now require
+			dnl # request_queue to be provided. No functional changes,
+			dnl # but preparation for inflight accounting.
 			dnl #
-			AC_MSG_CHECKING(
-			    [whether generic_*_io_acct wants 3 args])
-			ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
+			AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
+			ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
 			    [generic_start_io_acct], [block/bio.c], [
 				AC_MSG_RESULT(yes)
-				AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
-				    [generic_*_io_acct() 3 arg available])
+				AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
+				    [generic_*_io_acct() 4 arg available])
 			], [
 				AC_MSG_RESULT(no)
+
+				dnl #
+				dnl # 3.19 API addition
+				dnl #
+				dnl # torvalds/linux@394ffa50 allows us to increment
+				dnl # iostat counters without generic_make_request().
+				dnl #
+				AC_MSG_CHECKING(
+				    [whether generic_*_io_acct wants 3 args])
+				ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
+				    [generic_start_io_acct], [block/bio.c], [
+					AC_MSG_RESULT(yes)
+					AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
+					    [generic_*_io_acct() 3 arg available])
+				], [
+					AC_MSG_RESULT(no)
+				])
 			])
 		])
 	])
diff --git a/include/os/linux/kernel/linux/blkdev_compat.h b/include/os/linux/kernel/linux/blkdev_compat.h
index e41b248b0..ee066537b 100644
--- a/include/os/linux/kernel/linux/blkdev_compat.h
+++ b/include/os/linux/kernel/linux/blkdev_compat.h
@@ -520,7 +520,9 @@ blk_generic_start_io_acct(struct request_queue *q __attribute__((unused)),
     struct gendisk *disk __attribute__((unused)),
     int rw __attribute__((unused)), struct bio *bio)
 {
-#if defined(HAVE_BIO_IO_ACCT)
+#if defined(HAVE_DISK_IO_ACCT)
+	return (disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio)));
+#elif defined(HAVE_BIO_IO_ACCT)
 	return (bio_start_io_acct(bio));
 #elif defined(HAVE_GENERIC_IO_ACCT_3ARG)
 	unsigned long start_time = jiffies;
@@ -541,7 +543,9 @@ blk_generic_end_io_acct(struct request_queue *q __attribute__((unused)),
     struct gendisk *disk __attribute__((unused)),
     int rw __attribute__((unused)), struct bio *bio, unsigned long start_time)
 {
-#if defined(HAVE_BIO_IO_ACCT)
+#if defined(HAVE_DISK_IO_ACCT)
+	disk_end_io_acct(disk, bio_op(bio), start_time);
+#elif defined(HAVE_BIO_IO_ACCT)
 	bio_end_io_acct(bio, start_time);
 #elif defined(HAVE_GENERIC_IO_ACCT_3ARG)
 	generic_end_io_acct(rw, &disk->part0, start_time);
-- 
2.30.2

