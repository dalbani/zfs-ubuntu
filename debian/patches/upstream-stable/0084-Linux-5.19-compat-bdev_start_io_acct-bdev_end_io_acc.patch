From ee84970d4ffc5c7d70e86ae676dd01b125f4f646 Mon Sep 17 00:00:00 2001
From: Brian Behlendorf <behlendorf1@llnl.gov>
Date: Fri, 27 May 2022 21:31:03 +0000
Subject: [PATCH] Linux 5.19 compat: bdev_start_io_acct() / bdev_end_io_acct()

As of the Linux 5.19 kernel the disk_*_io_acct() helper functions
have been replaced by the bdev_*_io_acct() functions.

Reviewed-by: Tony Hutter <hutter2@llnl.gov>
Signed-off-by: Brian Behlendorf <behlendorf1@llnl.gov>
Closes #13515
---
 config/kernel-generic_io_acct.m4              | 83 ++++++++++++-------
 include/os/linux/kernel/linux/blkdev_compat.h |  9 +-
 2 files changed, 62 insertions(+), 30 deletions(-)

diff --git a/config/kernel-generic_io_acct.m4 b/config/kernel-generic_io_acct.m4
index 0f4381db4c..a8a448c6fe 100644
--- a/config/kernel-generic_io_acct.m4
+++ b/config/kernel-generic_io_acct.m4
@@ -2,6 +2,19 @@ dnl #
 dnl # Check for generic io accounting interface.
 dnl #
 AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT], [
+	ZFS_LINUX_TEST_SRC([bdev_io_acct], [
+		#include <linux/blkdev.h>
+	], [
+		struct block_device *bdev = NULL;
+		struct bio *bio = NULL;
+		unsigned long passed_time = 0;
+		unsigned long start_time;
+
+		start_time = bdev_start_io_acct(bdev, bio_sectors(bio),
+		    bio_op(bio), passed_time);
+		bdev_end_io_acct(bdev, bio_op(bio), start_time);
+	])
+
 	ZFS_LINUX_TEST_SRC([disk_io_acct], [
 		#include <linux/blkdev.h>
 	], [
@@ -50,61 +63,75 @@ AC_DEFUN([ZFS_AC_KERNEL_SRC_GENERIC_IO_ACCT], [
 
 AC_DEFUN([ZFS_AC_KERNEL_GENERIC_IO_ACCT], [
 	dnl #
-	dnl # 5.12 API,
+	dnl # 5.19 API,
 	dnl #
-	dnl # bio_start_io_acct() and bio_end_io_acct() became GPL-exported
-	dnl # so use disk_start_io_acct() and disk_end_io_acct() instead
+	dnl # disk_start_io_acct() and disk_end_io_acct() have been replaced by
+	dnl # bdev_start_io_acct() and bdev_end_io_acct().
 	dnl #
-	AC_MSG_CHECKING([whether generic disk_*_io_acct() are available])
-	ZFS_LINUX_TEST_RESULT([disk_io_acct], [
+	AC_MSG_CHECKING([whether generic bdev_*_io_acct() are available])
+	ZFS_LINUX_TEST_RESULT([bdev_io_acct], [
 		AC_MSG_RESULT(yes)
-		AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
+		AC_DEFINE(HAVE_BDEV_IO_ACCT, 1, [bdev_*_io_acct() available])
 	], [
 		AC_MSG_RESULT(no)
 
 		dnl #
-		dnl # 5.7 API,
+		dnl # 5.12 API,
 		dnl #
-		dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
+		dnl # bio_start_io_acct() and bio_end_io_acct() became GPL-exported
+		dnl # so use disk_start_io_acct() and disk_end_io_acct() instead
 		dnl #
-		AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
-		ZFS_LINUX_TEST_RESULT([bio_io_acct], [
+		AC_MSG_CHECKING([whether generic disk_*_io_acct() are available])
+		ZFS_LINUX_TEST_RESULT([disk_io_acct], [
 			AC_MSG_RESULT(yes)
-			AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
+			AC_DEFINE(HAVE_DISK_IO_ACCT, 1, [disk_*_io_acct() available])
 		], [
 			AC_MSG_RESULT(no)
 
 			dnl #
-			dnl # 4.14 API,
+			dnl # 5.7 API,
 			dnl #
-			dnl # generic_start_io_acct/generic_end_io_acct now require
-			dnl # request_queue to be provided. No functional changes,
-			dnl # but preparation for inflight accounting.
+			dnl # Added bio_start_io_acct() and bio_end_io_acct() helpers.
 			dnl #
-			AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
-			ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
-			    [generic_start_io_acct], [block/bio.c], [
+			AC_MSG_CHECKING([whether generic bio_*_io_acct() are available])
+			ZFS_LINUX_TEST_RESULT([bio_io_acct], [
 				AC_MSG_RESULT(yes)
-				AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
-				    [generic_*_io_acct() 4 arg available])
+				AC_DEFINE(HAVE_BIO_IO_ACCT, 1, [bio_*_io_acct() available])
 			], [
 				AC_MSG_RESULT(no)
 
 				dnl #
-				dnl # 3.19 API addition
+				dnl # 4.14 API,
 				dnl #
-				dnl # torvalds/linux@394ffa50 allows us to increment
-				dnl # iostat counters without generic_make_request().
+				dnl # generic_start_io_acct/generic_end_io_acct now require
+				dnl # request_queue to be provided. No functional changes,
+				dnl # but preparation for inflight accounting.
 				dnl #
-				AC_MSG_CHECKING(
-				    [whether generic_*_io_acct wants 3 args])
-				ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
+				AC_MSG_CHECKING([whether generic_*_io_acct wants 4 args])
+				ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_4args],
 				    [generic_start_io_acct], [block/bio.c], [
 					AC_MSG_RESULT(yes)
-					AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
-					    [generic_*_io_acct() 3 arg available])
+					AC_DEFINE(HAVE_GENERIC_IO_ACCT_4ARG, 1,
+					    [generic_*_io_acct() 4 arg available])
 				], [
 					AC_MSG_RESULT(no)
+
+					dnl #
+					dnl # 3.19 API addition
+					dnl #
+					dnl # torvalds/linux@394ffa50 allows us to increment
+					dnl # iostat counters without generic_make_request().
+					dnl #
+					AC_MSG_CHECKING(
+					    [whether generic_*_io_acct wants 3 args])
+					ZFS_LINUX_TEST_RESULT_SYMBOL([generic_acct_3args],
+					    [generic_start_io_acct], [block/bio.c], [
+						AC_MSG_RESULT(yes)
+						AC_DEFINE(HAVE_GENERIC_IO_ACCT_3ARG, 1,
+						    [generic_*_io_acct() 3 arg available])
+					], [
+						AC_MSG_RESULT(no)
+					])
 				])
 			])
 		])
diff --git a/include/os/linux/kernel/linux/blkdev_compat.h b/include/os/linux/kernel/linux/blkdev_compat.h
index da188b4eaf..fd91560a3c 100644
--- a/include/os/linux/kernel/linux/blkdev_compat.h
+++ b/include/os/linux/kernel/linux/blkdev_compat.h
@@ -551,7 +551,10 @@ blk_generic_start_io_acct(struct request_queue *q __attribute__((unused)),
     struct gendisk *disk __attribute__((unused)),
     int rw __attribute__((unused)), struct bio *bio)
 {
-#if defined(HAVE_DISK_IO_ACCT)
+#if defined(HAVE_BDEV_IO_ACCT)
+	return (bdev_start_io_acct(bio->bi_bdev, bio_sectors(bio),
+	    bio_op(bio), jiffies));
+#elif defined(HAVE_DISK_IO_ACCT)
 	return (disk_start_io_acct(disk, bio_sectors(bio), bio_op(bio)));
 #elif defined(HAVE_BIO_IO_ACCT)
 	return (bio_start_io_acct(bio));
@@ -574,7 +577,9 @@ blk_generic_end_io_acct(struct request_queue *q __attribute__((unused)),
     struct gendisk *disk __attribute__((unused)),
     int rw __attribute__((unused)), struct bio *bio, unsigned long start_time)
 {
-#if defined(HAVE_DISK_IO_ACCT)
+#if defined(HAVE_BDEV_IO_ACCT)
+	bdev_end_io_acct(bio->bi_bdev, bio_op(bio), start_time);
+#elif defined(HAVE_DISK_IO_ACCT)
 	disk_end_io_acct(disk, bio_op(bio), start_time);
 #elif defined(HAVE_BIO_IO_ACCT)
 	bio_end_io_acct(bio, start_time);
-- 
2.32.0

